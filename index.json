{
  "api/Fluint.Configuration.Base.ConfigurationManager.html": {
    "href": "api/Fluint.Configuration.Base.ConfigurationManager.html",
    "title": "Class ConfigurationManager | Fluint",
    "keywords": "Class ConfigurationManager Inheritance System.Object ConfigurationManager Implements IConfigurationManager IModule Namespace : Fluint.Configuration.Base Assembly : Fluint.Configuration.Base.dll Syntax public class ConfigurationManager : object, IConfigurationManager, IModule Constructors | Improve this Doc View Source ConfigurationManager(ModulePacket) Declaration public ConfigurationManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Add(IConfiguration) Declaration public void Add(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration | Improve this Doc View Source Contains<T>() Declaration public bool Contains<T>() where T : IConfiguration Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source Get<T>() Declaration public T Get<T>() where T : IConfiguration Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Save() Declaration public void Save() Implements IConfigurationManager IModule"
  },
  "api/Fluint.Configuration.Base.html": {
    "href": "api/Fluint.Configuration.Base.html",
    "title": "Namespace Fluint.Configuration.Base | Fluint",
    "keywords": "Namespace Fluint.Configuration.Base Classes ConfigurationManager"
  },
  "api/Fluint.Diagnostics.Base.html": {
    "href": "api/Fluint.Diagnostics.Base.html",
    "title": "Namespace Fluint.Diagnostics.Base | Fluint",
    "keywords": "Namespace Fluint.Diagnostics.Base Classes SerilogLogger"
  },
  "api/Fluint.Diagnostics.Base.SerilogLogger.html": {
    "href": "api/Fluint.Diagnostics.Base.SerilogLogger.html",
    "title": "Class SerilogLogger | Fluint",
    "keywords": "Class SerilogLogger Inheritance System.Object SerilogLogger Implements ILogger IModule Namespace : Fluint.Diagnostics.Base Assembly : Fluint.Diagnostics.Base.dll Syntax public class SerilogLogger : object, ILogger, IModule Constructors | Improve this Doc View Source SerilogLogger() Declaration public SerilogLogger() Methods | Improve this Doc View Source Debug(Exception, String) Declaration public void Debug(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Debug(Exception, String, Object[]) Declaration public void Debug(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Debug(String) Declaration public void Debug(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Debug(String, Object[]) Declaration public void Debug(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Error(Exception, String) Declaration public void Error(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Error(Exception, String, Object[]) Declaration public void Error(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Error(String) Declaration public void Error(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Error(String, Object) Declaration public void Error(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Error(String, Object, Object) Declaration public void Error(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Error(String, Object, Object, Object) Declaration public void Error(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Error(String, Object[]) Declaration public void Error(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Fatal(Exception, String) Declaration public void Fatal(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Fatal(Exception, String, Object[]) Declaration public void Fatal(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Fatal(String) Declaration public void Fatal(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Fatal(String, Object) Declaration public void Fatal(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Fatal(String, Object, Object) Declaration public void Fatal(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Fatal(String, Object, Object, Object) Declaration public void Fatal(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Fatal(String, Object[]) Declaration public void Fatal(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Information(Exception, String) Declaration public void Information(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Information(Exception, String, Object[]) Declaration public void Information(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Information(String) Declaration public void Information(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Information(String, Object) Declaration public void Information(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Information(String, Object, Object) Declaration public void Information(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Information(String, Object, Object, Object) Declaration public void Information(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Information(String, Object[]) Declaration public void Information(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Verbose(Exception, String) Declaration public void Verbose(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Verbose(Exception, String, Object[]) Declaration public void Verbose(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Verbose(String) Declaration public void Verbose(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Verbose(String, Object) Declaration public void Verbose(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Verbose(String, Object, Object) Declaration public void Verbose(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Verbose(String, Object, Object, Object) Declaration public void Verbose(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Verbose(String, Object[]) Declaration public void Verbose(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Warning(Exception, String) Declaration public void Warning(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Warning(Exception, String, Object[]) Declaration public void Warning(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Warning(String) Declaration public void Warning(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Warning(String, Object) Declaration public void Warning(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Warning(String, Object, Object) Declaration public void Warning(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Warning(String, Object, Object, Object) Declaration public void Warning(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Warning(String, Object[]) Declaration public void Warning(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue Implements ILogger IModule"
  },
  "api/Fluint.Editor.Base.EditPolygon.html": {
    "href": "api/Fluint.Editor.Base.EditPolygon.html",
    "title": "Class EditPolygon | Fluint",
    "keywords": "Class EditPolygon Inheritance System.Object EditPolygon Implements IEditPolygon2D Namespace : Fluint.Editor.Base Assembly : Fluint.Editor.Base.dll Syntax public class EditPolygon : object, IEditPolygon2D Methods | Improve this Doc View Source Load(Vector3[]) Declaration public void Load(Vector3[] points) Parameters Type Name Description Vector3 [] points | Improve this Doc View Source Render() Declaration public void Render() | Improve this Doc View Source Update() Declaration public void Update() Implements IEditPolygon2D"
  },
  "api/Fluint.Editor.Base.html": {
    "href": "api/Fluint.Editor.Base.html",
    "title": "Namespace Fluint.Editor.Base | Fluint",
    "keywords": "Namespace Fluint.Editor.Base Classes EditPolygon SketchTool"
  },
  "api/Fluint.Editor.Base.SketchTool.html": {
    "href": "api/Fluint.Editor.Base.SketchTool.html",
    "title": "Class SketchTool | Fluint",
    "keywords": "Class SketchTool Inheritance System.Object SketchTool Implements ITool IModule ISketchTool Namespace : Fluint.Editor.Base Assembly : Fluint.Editor.Base.dll Syntax public class SketchTool : object, ITool, IModule, ISketchTool Properties | Improve this Doc View Source Skeleton Declaration public ICollection<PositionColorVertex> Skeleton { get; } Property Value Type Description ICollection < PositionColorVertex > | Improve this Doc View Source Type Declaration public string Type { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin() Declaration public void Begin() | Improve this Doc View Source Dragging() Declaration public void Dragging() | Improve this Doc View Source End() Declaration public void End() | Improve this Doc View Source StartDragging() Declaration public void StartDragging() | Improve this Doc View Source StopDragging() Declaration public List<PositionColorVertex> StopDragging() Returns Type Description List < PositionColorVertex > | Improve this Doc View Source Tick() Declaration public void Tick() Implements ITool IModule ISketchTool"
  },
  "api/Fluint.Fluincy.EnableFluincyConfiguration.html": {
    "href": "api/Fluint.Fluincy.EnableFluincyConfiguration.html",
    "title": "Class EnableFluincyConfiguration | Fluint",
    "keywords": "Class EnableFluincyConfiguration Inheritance System.Object EnableFluincyConfiguration Implements IConfiguration Namespace : Fluint.Fluincy Assembly : Fluint.Fluincy.dll Syntax public class EnableFluincyConfiguration : object, IConfiguration Properties | Improve this Doc View Source EnableFluincyServices Declaration public bool EnableFluincyServices { get; set; } Property Value Type Description System.Boolean Implements IConfiguration"
  },
  "api/Fluint.Fluincy.FluincyTask.html": {
    "href": "api/Fluint.Fluincy.FluincyTask.html",
    "title": "Class FluincyTask | Fluint",
    "keywords": "Class FluincyTask Inheritance System.Object FluincyTask Implements ITask IModule Namespace : Fluint.Fluincy Assembly : Fluint.Fluincy.dll Syntax public class FluincyTask : object, ITask, IModule Constructors | Improve this Doc View Source FluincyTask(ModulePacket) Declaration public FluincyTask(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration public TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration public void Start(TaskArgs args) Parameters Type Name Description TaskArgs args Implements ITask IModule"
  },
  "api/Fluint.Fluincy.html": {
    "href": "api/Fluint.Fluincy.html",
    "title": "Namespace Fluint.Fluincy | Fluint",
    "keywords": "Namespace Fluint.Fluincy Classes EnableFluincyConfiguration FluincyTask"
  },
  "api/Fluint.Graphics.API.GL46.GL46ConstantBuffer.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46ConstantBuffer.html",
    "title": "Class GL46ConstantBuffer | Fluint",
    "keywords": "Class GL46ConstantBuffer Inheritance System.Object GL46ConstantBuffer Implements IConstantBuffer IModule IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46ConstantBuffer : object, IConstantBuffer, IModule, IDisposable Methods | Improve this Doc View Source Create<T>(T) Declaration public static IConstantBuffer Create<T>(T data) where T : struct Parameters Type Name Description T data Returns Type Description IConstantBuffer Type Parameters Name Description T | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source UpdateBuffer<T>(T) Declaration public void UpdateBuffer<T>(T data) where T : struct Parameters Type Name Description T data Type Parameters Name Description T Operators | Improve this Doc View Source Implicit(GL46ConstantBuffer to Int32) Declaration public static implicit operator int (GL46ConstantBuffer constantBuffer) Parameters Type Name Description GL46ConstantBuffer constantBuffer Returns Type Description System.Int32 Implements IConstantBuffer IModule IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46Extensions.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46Extensions.html",
    "title": "Class GL46Extensions | Fluint",
    "keywords": "Class GL46Extensions Inheritance System.Object GL46Extensions Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public static class GL46Extensions : object Methods | Improve this Doc View Source ToOpenTK(Format) Declaration public static SizedInternalFormat ToOpenTK(this Format format) Parameters Type Name Description Format format Returns Type Description SizedInternalFormat | Improve this Doc View Source ToOpenTK(ShaderStage) Declaration public static ShaderType ToOpenTK(this ShaderStage shaderStage) Parameters Type Name Description ShaderStage shaderStage Returns Type Description ShaderType | Improve this Doc View Source ToOpenTK(Viewport) Declaration public static Rectangle ToOpenTK(this Viewport viewport) Parameters Type Name Description Viewport viewport Returns Type Description Rectangle"
  },
  "api/Fluint.Graphics.API.GL46.GL46GraphicsDevice.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46GraphicsDevice.html",
    "title": "Class GL46GraphicsDevice | Fluint",
    "keywords": "Class GL46GraphicsDevice Inheritance System.Object GL46GraphicsDevice Implements IGraphicsDevice IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46GraphicsDevice : object, IGraphicsDevice, IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IGraphicsDevice IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46GraphicsFactory.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46GraphicsFactory.html",
    "title": "Class GL46GraphicsFactory | Fluint",
    "keywords": "Class GL46GraphicsFactory Inheritance System.Object GL46GraphicsFactory Implements IGraphicsFactory IModule Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46GraphicsFactory : object, IGraphicsFactory, IModule Constructors | Improve this Doc View Source GL46GraphicsFactory(ILogger) Declaration public GL46GraphicsFactory(ILogger logger) Parameters Type Name Description ILogger logger Methods | Improve this Doc View Source CreateBlendState(Boolean, Blend, Blend, BlendOperation, Blend, Blend, BlendOperation) Declaration public IBlendState CreateBlendState(bool isBlendEnabled, Blend sourceBlend, Blend destinationBlend, BlendOperation blendOperation, Blend sourceAlphaBlend, Blend destinationAlphaBlend, BlendOperation blendOperationAlpha) Parameters Type Name Description System.Boolean isBlendEnabled Blend sourceBlend Blend destinationBlend BlendOperation blendOperation Blend sourceAlphaBlend Blend destinationAlphaBlend BlendOperation blendOperationAlpha Returns Type Description IBlendState | Improve this Doc View Source CreateCommandList() Declaration public ICommandList CreateCommandList() Returns Type Description ICommandList | Improve this Doc View Source CreateConstantBuffer<T>(T) Declaration public IConstantBuffer CreateConstantBuffer<T>(T constants) where T : struct Parameters Type Name Description T constants Returns Type Description IConstantBuffer Type Parameters Name Description T | Improve this Doc View Source CreateDepthStencilState() Declaration public IDepthStencilState CreateDepthStencilState() Returns Type Description IDepthStencilState | Improve this Doc View Source CreateIndexBuffer<T>(T[]) Declaration public IIndexBuffer CreateIndexBuffer<T>(T[] indices) where T : struct Parameters Type Name Description T[] indices Returns Type Description IIndexBuffer Type Parameters Name Description T | Improve this Doc View Source CreatePipeline(Shader, Shader, IInputLayout, IBlendState, IDepthStencilState, IRasterizerState, Viewport, PrimitiveTopology) Declaration public IPipeline CreatePipeline(Shader vertexShader, Shader pixelShader, IInputLayout inputLayout, IBlendState blendState, IDepthStencilState depthStencilState, IRasterizerState rasterizerState, Viewport viewport, PrimitiveTopology primitiveTopology) Parameters Type Name Description Shader vertexShader Shader pixelShader IInputLayout inputLayout IBlendState blendState IDepthStencilState depthStencilState IRasterizerState rasterizerState Viewport viewport PrimitiveTopology primitiveTopology Returns Type Description IPipeline | Improve this Doc View Source CreateRasterizerState(CullMode, FillMode, Boolean, Boolean, Boolean, Boolean) Declaration public IRasterizerState CreateRasterizerState(CullMode cullMode, FillMode fillMode, bool isDepthEnabled, bool isScissorEnabled, bool isMultiSampleEnabled, bool isAntialiasedLineEnabled) Parameters Type Name Description CullMode cullMode FillMode fillMode System.Boolean isDepthEnabled System.Boolean isScissorEnabled System.Boolean isMultiSampleEnabled System.Boolean isAntialiasedLineEnabled Returns Type Description IRasterizerState | Improve this Doc View Source CreateSampler(TextureAddressMode, TextureAddressMode, Filter, ComparisonFunction) Declaration public ISampler CreateSampler(TextureAddressMode addressModeU, TextureAddressMode addressModeV, Filter filter, ComparisonFunction comparisonFunction) Parameters Type Name Description TextureAddressMode addressModeU TextureAddressMode addressModeV Filter filter ComparisonFunction comparisonFunction Returns Type Description ISampler | Improve this Doc View Source CreateShader(ShaderStage, String, VertexType, IEnumerable<(String, String)>) Declaration public Shader CreateShader(ShaderStage shaderStage, string shaderText, VertexType vertexType, IEnumerable<(string, string)> macros) Parameters Type Name Description ShaderStage shaderStage System.String shaderText VertexType vertexType IEnumerable < System.ValueTuple < System.String , System.String >> macros Returns Type Description Shader | Improve this Doc View Source CreateShaderFromFile(ShaderStage, String, VertexType, IEnumerable<(String, String)>) Declaration public Shader CreateShaderFromFile(ShaderStage shaderStage, string filePath, VertexType vertexType, IEnumerable<(string, string)> macros) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType IEnumerable < System.ValueTuple < System.String , System.String >> macros Returns Type Description Shader | Improve this Doc View Source CreateSwapchain(SwapChainDescriptor) Declaration public ISwapChain CreateSwapchain(SwapChainDescriptor swapChainDescriptor) Parameters Type Name Description SwapChainDescriptor swapChainDescriptor Returns Type Description ISwapChain | Improve this Doc View Source CreateTextureFactory() Declaration public ITextureFactory CreateTextureFactory() Returns Type Description ITextureFactory | Improve this Doc View Source CreateVertexBuffer<T>(T[]) Declaration public IVertexBuffer CreateVertexBuffer<T>(T[] vertices) where T : struct Parameters Type Name Description T[] vertices Returns Type Description IVertexBuffer Type Parameters Name Description T | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IGraphicsFactory IModule"
  },
  "api/Fluint.Graphics.API.GL46.GL46IndexBuffer.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46IndexBuffer.html",
    "title": "Class GL46IndexBuffer | Fluint",
    "keywords": "Class GL46IndexBuffer Inheritance System.Object GL46IndexBuffer Implements IIndexBuffer IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46IndexBuffer : object, IIndexBuffer, IDisposable Properties | Improve this Doc View Source Is16Bit Declaration public bool Is16Bit { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Create<T>(T[]) Declaration public static IIndexBuffer Create<T>(T[] indices) where T : struct Parameters Type Name Description T[] indices Returns Type Description IIndexBuffer Type Parameters Name Description T | Improve this Doc View Source Dispose() Declaration public void Dispose() Operators | Improve this Doc View Source Implicit(GL46IndexBuffer to Int32) Declaration public static implicit operator int (GL46IndexBuffer indexBuffer) Parameters Type Name Description GL46IndexBuffer indexBuffer Returns Type Description System.Int32 Implements IIndexBuffer IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46InputLayout.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46InputLayout.html",
    "title": "Class GL46InputLayout | Fluint",
    "keywords": "Class GL46InputLayout Inheritance System.Object GL46InputLayout Implements IInputLayout IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46InputLayout : object, IInputLayout, IDisposable Constructors | Improve this Doc View Source GL46InputLayout(IEnumerable<GLVertexAttribute>) Declaration public GL46InputLayout(IEnumerable<GLVertexAttribute> attributes) Parameters Type Name Description IEnumerable < GLVertexAttribute > attributes Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Operators | Improve this Doc View Source Implicit(GL46InputLayout to Int32) Declaration public static implicit operator int (GL46InputLayout inputLayout) Parameters Type Name Description GL46InputLayout inputLayout Returns Type Description System.Int32 Implements IInputLayout IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46Pipeline.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46Pipeline.html",
    "title": "Class GL46Pipeline | Fluint",
    "keywords": "Class GL46Pipeline Inheritance System.Object GL46Pipeline Implements IPipeline IModule IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46Pipeline : object, IPipeline, IModule, IDisposable Constructors | Improve this Doc View Source GL46Pipeline(IShader, IShader, IInputLayout, Viewport, PrimitiveTopology) Declaration public GL46Pipeline(IShader vertexGL46Shader, IShader pixelGL46Shader, IInputLayout inputLayout, Viewport viewport, PrimitiveTopology primitiveTopology) Parameters Type Name Description IShader vertexGL46Shader IShader pixelGL46Shader IInputLayout inputLayout Viewport viewport PrimitiveTopology primitiveTopology Properties | Improve this Doc View Source BlendState Declaration public IBlendState BlendState { get; } Property Value Type Description IBlendState | Improve this Doc View Source DepthStencilState Declaration public IDepthStencilState DepthStencilState { get; } Property Value Type Description IDepthStencilState | Improve this Doc View Source InputLayout Declaration public IInputLayout InputLayout { get; } Property Value Type Description IInputLayout | Improve this Doc View Source PixelShader Declaration public IShader PixelShader { get; } Property Value Type Description IShader | Improve this Doc View Source PrimitiveTopology Declaration public PrimitiveTopology PrimitiveTopology { get; } Property Value Type Description PrimitiveTopology | Improve this Doc View Source RasterizerState Declaration public IRasterizerState RasterizerState { get; } Property Value Type Description IRasterizerState | Improve this Doc View Source VertexShader Declaration public IShader VertexShader { get; } Property Value Type Description IShader | Improve this Doc View Source Viewport Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Operators | Improve this Doc View Source Implicit(GL46Pipeline to Int32) Declaration public static implicit operator int (GL46Pipeline pipeline) Parameters Type Name Description GL46Pipeline pipeline Returns Type Description System.Int32 Implements IPipeline IModule IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46SwapChain.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46SwapChain.html",
    "title": "Class GL46SwapChain | Fluint",
    "keywords": "Class GL46SwapChain Inheritance System.Object GL46SwapChain Implements ISwapChain IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46SwapChain : object, ISwapChain, IDisposable Constructors | Improve this Doc View Source GL46SwapChain(SwapChainDescriptor) Declaration public GL46SwapChain(SwapChainDescriptor descriptor) Parameters Type Name Description SwapChainDescriptor descriptor Properties | Improve this Doc View Source DepthStencilView Declaration public TextureView DepthStencilView { get; } Property Value Type Description TextureView | Improve this Doc View Source TextureView Declaration public TextureView TextureView { get; } Property Value Type Description TextureView Methods | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Modify(SwapChainDescriptor) Declaration public void Modify(SwapChainDescriptor descriptor) Parameters Type Name Description SwapChainDescriptor descriptor | Improve this Doc View Source Present() Declaration public void Present() Implements ISwapChain IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46Texture.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46Texture.html",
    "title": "Class GL46Texture | Fluint",
    "keywords": "Class GL46Texture Inheritance System.Object GL46Texture Implements ITexture IModule IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46Texture : object, ITexture, IModule, IDisposable Constructors | Improve this Doc View Source GL46Texture(Int32, Int32, Filter) Declaration public GL46Texture(int width, int height, Filter filter) Parameters Type Name Description System.Int32 width System.Int32 height Filter filter | Improve this Doc View Source GL46Texture(Int32, Int32, Filter, TextureAddressMode, ref Byte[]) Declaration public GL46Texture(int width, int height, Filter filter, TextureAddressMode textureAddressMode, ref byte[] pixelData) Parameters Type Name Description System.Int32 width System.Int32 height Filter filter TextureAddressMode textureAddressMode System.Byte [] pixelData Properties | Improve this Doc View Source Handle Declaration public int Handle { get; } Property Value Type Description System.Int32 | Improve this Doc View Source View Declaration public TextureView View { get; } Property Value Type Description TextureView Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source SetData<T>(T[]) Declaration public void SetData<T>(T[] data) where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T Operators | Improve this Doc View Source Implicit(GL46Texture to Int32) Declaration public static implicit operator int (GL46Texture texture) Parameters Type Name Description GL46Texture texture Returns Type Description System.Int32 Implements ITexture IModule IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46TextureFactory.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46TextureFactory.html",
    "title": "Class GL46TextureFactory | Fluint",
    "keywords": "Class GL46TextureFactory Inheritance System.Object GL46TextureFactory Implements ITextureFactory IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46TextureFactory : object, ITextureFactory, IDisposable Methods | Improve this Doc View Source CreateRenderTarget(Int32, Int32, Format) Declaration public ITexture CreateRenderTarget(int width, int height, Format format) Parameters Type Name Description System.Int32 width System.Int32 height Format format Returns Type Description ITexture | Improve this Doc View Source CreateTexture(Int32, Int32, Format, Boolean) Declaration public ITexture CreateTexture(int width, int height, Format format, bool createMipMaps = true) Parameters Type Name Description System.Int32 width System.Int32 height Format format System.Boolean createMipMaps Returns Type Description ITexture | Improve this Doc View Source CreateTextureFromFile(String, Boolean) Declaration public ITexture CreateTextureFromFile(string filePath, bool createMipMaps) Parameters Type Name Description System.String filePath System.Boolean createMipMaps Returns Type Description ITexture | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements ITextureFactory IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.GL46VertexBuffer.html": {
    "href": "api/Fluint.Graphics.API.GL46.GL46VertexBuffer.html",
    "title": "Class GL46VertexBuffer | Fluint",
    "keywords": "Class GL46VertexBuffer Inheritance System.Object GL46VertexBuffer Implements IVertexBuffer IDisposable Namespace : Fluint.Graphics.API.GL46 Assembly : Fluint.Graphics.API.GL46.dll Syntax public class GL46VertexBuffer : object, IVertexBuffer, IDisposable Constructors | Improve this Doc View Source GL46VertexBuffer() Declaration public GL46VertexBuffer() Properties | Improve this Doc View Source VertexStride Declaration public int VertexStride { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Bind() Declaration public void Bind() | Improve this Doc View Source Create<T>(T[]) Declaration public static IVertexBuffer Create<T>(T[] vertices) where T : struct Parameters Type Name Description T[] vertices Returns Type Description IVertexBuffer Type Parameters Name Description T | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Initialize<T>(T[]) Declaration public void Initialize<T>(T[] vertices) where T : struct Parameters Type Name Description T[] vertices Type Parameters Name Description T | Improve this Doc View Source Unbind() Declaration public void Unbind() Operators | Improve this Doc View Source Implicit(GL46VertexBuffer to Int32) Declaration public static implicit operator int (GL46VertexBuffer buffer) Parameters Type Name Description GL46VertexBuffer buffer Returns Type Description System.Int32 Implements IVertexBuffer IDisposable"
  },
  "api/Fluint.Graphics.API.GL46.html": {
    "href": "api/Fluint.Graphics.API.GL46.html",
    "title": "Namespace Fluint.Graphics.API.GL46 | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GL46 Classes GL46ConstantBuffer GL46Extensions GL46GraphicsDevice GL46GraphicsFactory GL46IndexBuffer GL46InputLayout GL46Pipeline GL46SwapChain GL46Texture GL46TextureFactory GL46VertexBuffer"
  },
  "api/Fluint.Graphics.API.GL46.ImGuiImpl.html": {
    "href": "api/Fluint.Graphics.API.GL46.ImGuiImpl.html",
    "title": "Namespace Fluint.Graphics.API.GL46.ImGuiImpl | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GL46.ImGuiImpl Classes ImGuiGhostCreationTask ImGuiPuppet Enums TextureCoordinate"
  },
  "api/Fluint.Graphics.API.GL46.ImGuiImpl.ImGuiGhostCreationTask.html": {
    "href": "api/Fluint.Graphics.API.GL46.ImGuiImpl.ImGuiGhostCreationTask.html",
    "title": "Class ImGuiGhostCreationTask | Fluint",
    "keywords": "Class ImGuiGhostCreationTask Inheritance System.Object ImGuiGhostCreationTask Implements ITask IModule Namespace : Fluint.Graphics.API.GL46.ImGuiImpl Assembly : Fluint.Graphics.API.GL46.dll Syntax public class ImGuiGhostCreationTask : object, ITask, IModule Properties | Improve this Doc View Source Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration public TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration public void Start(TaskArgs args) Parameters Type Name Description TaskArgs args Implements ITask IModule"
  },
  "api/Fluint.Graphics.API.GL46.ImGuiImpl.ImGuiPuppet.html": {
    "href": "api/Fluint.Graphics.API.GL46.ImGuiImpl.ImGuiPuppet.html",
    "title": "Class ImGuiPuppet | Fluint",
    "keywords": "Class ImGuiPuppet Inheritance System.Object ImGuiPuppet Implements IPuppet Namespace : Fluint.Graphics.API.GL46.ImGuiImpl Assembly : Fluint.Graphics.API.GL46.dll Syntax public class ImGuiPuppet : object, IPuppet Constructors | Improve this Doc View Source ImGuiPuppet(ILogger, IConfigurationManager) Declaration public ImGuiPuppet(ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description ILogger logger IConfigurationManager configurationManager Methods | Improve this Doc View Source CreateDeviceResources() Declaration public void CreateDeviceResources() | Improve this Doc View Source DestroyDeviceObjects() Declaration public void DestroyDeviceObjects() | Improve this Doc View Source Dispose() Frees all graphics resources used by the renderer. Declaration public void Dispose() | Improve this Doc View Source OnLoad() Declaration public void OnLoad() | Improve this Doc View Source OnMouseWheelMoved(Vector2) Declaration public void OnMouseWheelMoved(Vector2 offset) Parameters Type Name Description Vector2 offset | Improve this Doc View Source OnRender(Double) Renders the ImGui draw list data. This method requires a because it may create new DeviceBuffers if the size of vertex or index data has increased beyond the capacity of the existing buffers. A Fluint.Graphics.API.GL46.GL46CommandList is needed to submit drawing and resource update commands. Declaration public void OnRender(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source OnResize(Int32, Int32) Declaration public void OnResize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source OnTextReceived(Int32, String) Declaration public void OnTextReceived(int unicode, string data) Parameters Type Name Description System.Int32 unicode System.String data | Improve this Doc View Source OnUpdate(Double) Updates ImGui input and IO configuration state. Declaration public void OnUpdate(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source RecreateFontDeviceTexture() Declaration public void RecreateFontDeviceTexture() | Improve this Doc View Source SetPossessed(IWindow) Declaration public void SetPossessed(in IWindow possessor) Parameters Type Name Description IWindow possessor Implements IPuppet"
  },
  "api/Fluint.Graphics.API.GL46.ImGuiImpl.TextureCoordinate.html": {
    "href": "api/Fluint.Graphics.API.GL46.ImGuiImpl.TextureCoordinate.html",
    "title": "Enum TextureCoordinate | Fluint",
    "keywords": "Enum TextureCoordinate Namespace : Fluint.Graphics.API.GL46.ImGuiImpl Assembly : Fluint.Graphics.API.GL46.dll Syntax public enum TextureCoordinate : int Fields Name Description R S T"
  },
  "api/Fluint.Graphics.API.GLCommon.Commands.DumpGlVersion.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Commands.DumpGlVersion.html",
    "title": "Class DumpGlVersion | Fluint",
    "keywords": "Class DumpGlVersion Inheritance System.Object DumpGlVersion Implements ILambda IModule Namespace : Fluint.Graphics.API.GLCommon.Commands Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class DumpGlVersion : object, ILambda, IModule Constructors | Improve this Doc View Source DumpGlVersion(ModulePacket) Declaration public DumpGlVersion(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.Graphics.API.GLCommon.Commands.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Commands.html",
    "title": "Namespace Fluint.Graphics.API.GLCommon.Commands | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GLCommon.Commands Classes DumpGlVersion VSync"
  },
  "api/Fluint.Graphics.API.GLCommon.Commands.VSync.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Commands.VSync.html",
    "title": "Class VSync | Fluint",
    "keywords": "Class VSync Inheritance System.Object VSync Implements ILambda IModule Namespace : Fluint.Graphics.API.GLCommon.Commands Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class VSync : object, ILambda, IModule Constructors | Improve this Doc View Source VSync(ModulePacket, ILogger) Declaration public VSync(ModulePacket packet, ILogger logger) Parameters Type Name Description ModulePacket packet ILogger logger Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.Graphics.API.GLCommon.EngineTask.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.EngineTask.html",
    "title": "Class EngineTask | Fluint",
    "keywords": "Class EngineTask Inheritance System.Object EngineTask Implements ITask IModule Namespace : Fluint.Graphics.API.GLCommon Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class EngineTask : object, ITask, IModule Constructors | Improve this Doc View Source EngineTask(ModulePacket) Declaration public EngineTask(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration public TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration public void Start(TaskArgs args) Parameters Type Name Description TaskArgs args Implements ITask IModule"
  },
  "api/Fluint.Graphics.API.GLCommon.GLExtensions.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.GLExtensions.html",
    "title": "Class GLExtensions | Fluint",
    "keywords": "Class GLExtensions Inheritance System.Object GLExtensions Namespace : Fluint.Graphics.API.GLCommon Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public static class GLExtensions : object Methods | Improve this Doc View Source Color4(Color4) Declaration public static OpenTK.Mathematics.Color4 Color4(Color4 color4) Parameters Type Name Description Color4 color4 Returns Type Description OpenTK.Mathematics.Color4 | Improve this Doc View Source GLPrimitiveType(PrimitiveTopology) Declaration public static PrimitiveType GLPrimitiveType(PrimitiveTopology primitiveTopology) Parameters Type Name Description PrimitiveTopology primitiveTopology Returns Type Description PrimitiveType | Improve this Doc View Source MagFilterToOpenTK(Filter) Declaration public static TextureMagFilter MagFilterToOpenTK(this Filter filter) Parameters Type Name Description Filter filter Returns Type Description TextureMagFilter | Improve this Doc View Source Matrix3(Matrix3x3) Declaration public static Matrix3 Matrix3(Matrix3x3 matrix) Parameters Type Name Description Matrix3x3 matrix Returns Type Description Matrix3 | Improve this Doc View Source Matrix4(Matrix) Declaration public static Matrix4 Matrix4(Matrix matrix) Parameters Type Name Description Matrix matrix Returns Type Description Matrix4 | Improve this Doc View Source MinFilterToOpenTK(Filter) Declaration public static TextureMinFilter MinFilterToOpenTK(this Filter filter) Parameters Type Name Description Filter filter Returns Type Description TextureMinFilter | Improve this Doc View Source ToOpenTK(PrimitiveTopology) Declaration public static PrimitiveType ToOpenTK(this PrimitiveTopology primitiveTopology) Parameters Type Name Description PrimitiveTopology primitiveTopology Returns Type Description PrimitiveType | Improve this Doc View Source ToOpenTK(TextureAddressMode) Declaration public static TextureWrapMode ToOpenTK(this TextureAddressMode textureAddressMode) Parameters Type Name Description TextureAddressMode textureAddressMode Returns Type Description TextureWrapMode | Improve this Doc View Source Vector2(Vector2) Declaration public static OpenTK.Mathematics.Vector2 Vector2(Vector2 vector2) Parameters Type Name Description Vector2 vector2 Returns Type Description OpenTK.Mathematics.Vector2 | Improve this Doc View Source Vector2(OpenTK.Mathematics.Vector2) Declaration public static Vector2 Vector2(OpenTK.Mathematics.Vector2 vector2) Parameters Type Name Description OpenTK.Mathematics.Vector2 vector2 Returns Type Description Vector2 | Improve this Doc View Source Vector2I(Vector2i) Declaration public static OpenTK.Mathematics.Vector2i Vector2I(Vector2i vector2I) Parameters Type Name Description Vector2i vector2I Returns Type Description OpenTK.Mathematics.Vector2i | Improve this Doc View Source Vector2I(OpenTK.Mathematics.Vector2i) Declaration public static Vector2i Vector2I(OpenTK.Mathematics.Vector2i vector2I) Parameters Type Name Description OpenTK.Mathematics.Vector2i vector2I Returns Type Description Vector2i | Improve this Doc View Source Vector3(Vector3) Declaration public static OpenTK.Mathematics.Vector3 Vector3(Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description OpenTK.Mathematics.Vector3 | Improve this Doc View Source Vector4(Vector4) Declaration public static OpenTK.Mathematics.Vector4 Vector4(Vector4 vector4) Parameters Type Name Description Vector4 vector4 Returns Type Description OpenTK.Mathematics.Vector4 | Improve this Doc View Source Viewport(Viewport) Declaration public static System.Drawing.Rectangle Viewport(Viewport viewport) Parameters Type Name Description Viewport viewport Returns Type Description System.Drawing.Rectangle"
  },
  "api/Fluint.Graphics.API.GLCommon.GLVertexAttribute.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.GLVertexAttribute.html",
    "title": "Struct GLVertexAttribute | Fluint",
    "keywords": "Struct GLVertexAttribute Namespace : Fluint.Graphics.API.GLCommon Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public struct GLVertexAttribute Constructors | Improve this Doc View Source GLVertexAttribute(String, Int32, VertexAttribType, Int32, Int32) Declaration public GLVertexAttribute(string name, int index, VertexAttribType type, int components, int offset) Parameters Type Name Description System.String name System.Int32 index VertexAttribType type System.Int32 components System.Int32 offset Fields | Improve this Doc View Source Components Declaration public readonly int Components Field Value Type Description System.Int32 | Improve this Doc View Source Index Declaration public readonly int Index Field Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public readonly string Name Field Value Type Description System.String | Improve this Doc View Source Offset Declaration public readonly int Offset Field Value Type Description System.Int32 | Improve this Doc View Source Type Declaration public readonly VertexAttribType Type Field Value Type Description VertexAttribType"
  },
  "api/Fluint.Graphics.API.GLCommon.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.html",
    "title": "Namespace Fluint.Graphics.API.GLCommon | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GLCommon Classes EngineTask GLExtensions OpenGlCommand Structs GLVertexAttribute"
  },
  "api/Fluint.Graphics.API.GLCommon.Input.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Input.html",
    "title": "Namespace Fluint.Graphics.API.GLCommon.Input | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GLCommon.Input Classes InputManager"
  },
  "api/Fluint.Graphics.API.GLCommon.Input.InputManager.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Input.InputManager.html",
    "title": "Class InputManager | Fluint",
    "keywords": "Class InputManager Inheritance System.Object InputManager Implements IInputManager IModule Namespace : Fluint.Graphics.API.GLCommon.Input Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class InputManager : object, IInputManager, IModule Properties | Improve this Doc View Source LastMouseLocation Declaration public Vector2 LastMouseLocation { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseMovementDelta Declaration public Vector2 MouseMovementDelta { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseScroll Declaration public Vector2 MouseScroll { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseScrollDelta Declaration public Vector2 MouseScrollDelta { get; } Property Value Type Description Vector2 Methods | Improve this Doc View Source IsKeyPressed(Key) Declaration public bool IsKeyPressed(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source IsKeyReleased(Key) Declaration public bool IsKeyReleased(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source IsMouseButtonPressed(MouseButton) Declaration public bool IsMouseButtonPressed(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean | Improve this Doc View Source IsMouseButtonReleased(MouseButton) Declaration public bool IsMouseButtonReleased(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean | Improve this Doc View Source Load(IWindowProvider) Declaration public void Load(IWindowProvider windowProvider) Parameters Type Name Description IWindowProvider windowProvider | Improve this Doc View Source State(Key) Declaration public InputState State(Key key) Parameters Type Name Description Key key Returns Type Description InputState | Improve this Doc View Source State(MouseButton) Declaration public InputState State(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description InputState | Improve this Doc View Source WasKeyPressed(Key) Declaration public bool WasKeyPressed(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source WasMouseButtonPressed(MouseButton) Declaration public bool WasMouseButtonPressed(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IInputManager.MouseLocation Declaration Vector2 IInputManager.MouseLocation { get; set; } Returns Type Description Vector2 Implements IInputManager IModule"
  },
  "api/Fluint.Graphics.API.GLCommon.OpenGlCommand.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.OpenGlCommand.html",
    "title": "Class OpenGlCommand | Fluint",
    "keywords": "Class OpenGlCommand Inheritance System.Object OpenGlCommand Namespace : Fluint.Graphics.API.GLCommon Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class OpenGlCommand : object Fields | Improve this Doc View Source ClearColor Declaration public Color4 ClearColor Field Value Type Description Color4 | Improve this Doc View Source ClearDepth Declaration public float ClearDepth Field Value Type Description System.Single | Improve this Doc View Source ClearStencil Declaration public byte ClearStencil Field Value Type Description System.Byte | Improve this Doc View Source ConstantBuffer Declaration public int ConstantBuffer Field Value Type Description System.Int32 | Improve this Doc View Source DrawIndexCount Declaration public int DrawIndexCount Field Value Type Description System.Int32 | Improve this Doc View Source DrawIndexOffset Declaration public int DrawIndexOffset Field Value Type Description System.Int32 | Improve this Doc View Source DrawVertexCount Declaration public int DrawVertexCount Field Value Type Description System.Int32 | Improve this Doc View Source DrawVertexOffset Declaration public int DrawVertexOffset Field Value Type Description System.Int32 | Improve this Doc View Source IndexBuffer Declaration public int IndexBuffer Field Value Type Description System.Int32 | Improve this Doc View Source InputLayout Declaration public int InputLayout Field Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Pipeline Declaration public int Pipeline Field Value Type Description System.Int32 | Improve this Doc View Source PrimitiveType Declaration public PrimitiveType PrimitiveType Field Value Type Description PrimitiveType | Improve this Doc View Source ScissorRectangle Declaration public Rectangle ScissorRectangle Field Value Type Description Rectangle | Improve this Doc View Source TextureView Declaration public int TextureView Field Value Type Description System.Int32 | Improve this Doc View Source Type Declaration public CommandType Type Field Value Type Description CommandType | Improve this Doc View Source VertexBuffer Declaration public int VertexBuffer Field Value Type Description System.Int32 | Improve this Doc View Source VertexStride Declaration public int VertexStride Field Value Type Description System.Int32 | Improve this Doc View Source Viewport Declaration public Rectangle Viewport Field Value Type Description Rectangle"
  },
  "api/Fluint.Graphics.API.GLCommon.Windowing.GlWindowProvider.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Windowing.GlWindowProvider.html",
    "title": "Class GlWindowProvider | Fluint",
    "keywords": "Class GlWindowProvider Inheritance System.Object GlWindowProvider Implements IWindowProvider IModule Namespace : Fluint.Graphics.API.GLCommon.Windowing Assembly : Fluint.Graphics.API.GLCommon.dll Syntax public class GlWindowProvider : GameWindow, IWindowProvider, IModule Constructors | Improve this Doc View Source GlWindowProvider(ModulePacket, ILogger, ITaskManager, IConfigurationManager) Declaration public GlWindowProvider(ModulePacket packet, ILogger logger, ITaskManager taskManager, IConfigurationManager configurationManager) Parameters Type Name Description ModulePacket packet ILogger logger ITaskManager taskManager IConfigurationManager configurationManager Properties | Improve this Doc View Source Client Declaration public IWindow Client { get; } Property Value Type Description IWindow | Improve this Doc View Source FrameQueue Declaration public Queue<Action> FrameQueue { get; } Property Value Type Description Queue < Action > | Improve this Doc View Source NativeKeyboardObject Declaration public object NativeKeyboardObject { get; } Property Value Type Description System.Object | Improve this Doc View Source NativeMouseObject Declaration public object NativeMouseObject { get; } Property Value Type Description System.Object | Improve this Doc View Source ScreenSize Declaration public Vector2i ScreenSize { get; } Property Value Type Description Vector2i | Improve this Doc View Source WindowLocation Declaration public Vector2i WindowLocation { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source WindowSize Declaration public Vector2i WindowSize { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source WindowTitle Declaration public string WindowTitle { get; set; } Property Value Type Description System.String | Improve this Doc View Source WindowVSync Declaration public bool WindowVSync { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Adopt<TClient>() Declaration public void Adopt<TClient>() where TClient : IWindow Type Parameters Name Description TClient | Improve this Doc View Source OnLoad() Declaration protected override void OnLoad() | Improve this Doc View Source OnMouseWheel(MouseWheelEventArgs) Declaration protected override void OnMouseWheel(MouseWheelEventArgs e) Parameters Type Name Description MouseWheelEventArgs e | Improve this Doc View Source OnRenderFrame(FrameEventArgs) Declaration protected override void OnRenderFrame(FrameEventArgs args) Parameters Type Name Description FrameEventArgs args | Improve this Doc View Source OnResize(ResizeEventArgs) Declaration protected override void OnResize(ResizeEventArgs e) Parameters Type Name Description ResizeEventArgs e | Improve this Doc View Source OnTextInput(TextInputEventArgs) Declaration protected override void OnTextInput(TextInputEventArgs e) Parameters Type Name Description TextInputEventArgs e | Improve this Doc View Source OnUpdateFrame(FrameEventArgs) Declaration protected override void OnUpdateFrame(FrameEventArgs args) Parameters Type Name Description FrameEventArgs args | Improve this Doc View Source SetMouseLocation(Vector2) Declaration public void SetMouseLocation(Vector2 location) Parameters Type Name Description Vector2 location | Improve this Doc View Source Start() Declaration public void Start() Implements IWindowProvider IModule"
  },
  "api/Fluint.Graphics.API.GLCommon.Windowing.html": {
    "href": "api/Fluint.Graphics.API.GLCommon.Windowing.html",
    "title": "Namespace Fluint.Graphics.API.GLCommon.Windowing | Fluint",
    "keywords": "Namespace Fluint.Graphics.API.GLCommon.Windowing Classes GlWindowProvider"
  },
  "api/Fluint.Graphics.Base.Camera.html": {
    "href": "api/Fluint.Graphics.Base.Camera.html",
    "title": "Class Camera | Fluint",
    "keywords": "Class Camera Inheritance System.Object Camera Implements ICamera IModule Namespace : Fluint.Graphics.Base Assembly : Fluint.Graphics.Base.dll Syntax public class Camera : object, ICamera, IModule Properties | Improve this Doc View Source Fov Declaration public float Fov { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Front Declaration public Vector3 Front { get; } Property Value Type Description Vector3 | Improve this Doc View Source Pitch Declaration public float Pitch { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Position Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source ProjectionMode Declaration public ProjectionMode ProjectionMode { get; set; } Property Value Type Description ProjectionMode | Improve this Doc View Source Right Declaration public Vector3 Right { get; } Property Value Type Description Vector3 | Improve this Doc View Source Up Declaration public Vector3 Up { get; } Property Value Type Description Vector3 | Improve this Doc View Source Viewport Declaration public ViewportF Viewport { get; set; } Property Value Type Description ViewportF | Improve this Doc View Source Yaw Declaration public float Yaw { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Zoom Declaration public float Zoom { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source GetProjectionMatrix() Declaration public Matrix GetProjectionMatrix() Returns Type Description Matrix | Improve this Doc View Source GetViewMatrix() Declaration public Matrix GetViewMatrix() Returns Type Description Matrix Implements ICamera IModule"
  },
  "api/Fluint.Graphics.Base.Canvas.html": {
    "href": "api/Fluint.Graphics.Base.Canvas.html",
    "title": "Class Canvas | Fluint",
    "keywords": "Class Canvas Inheritance System.Object Canvas Implements ICanvas IModule Namespace : Fluint.Graphics.Base Assembly : Fluint.Graphics.Base.dll Syntax public class Canvas : object, ICanvas, IModule Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Pixels Declaration public Color[] Pixels { get; } Property Value Type Description Color [] | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source ConvertIndex(Int32, Int32) Declaration public int ConvertIndex(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Returns Type Description System.Int32 | Improve this Doc View Source DrawCircle(Vector2i, Int32, Color) Declaration public void DrawCircle(Vector2i location, int radius, Color color) Parameters Type Name Description Vector2i location System.Int32 radius Color color | Improve this Doc View Source DrawCircle(Vector2i, Int32, Func<Vector2i, Color>) Declaration public void DrawCircle(Vector2i location, int radius, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location System.Int32 radius Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledCircle(Vector2i, Int32, Color) Declaration public void DrawFilledCircle(Vector2i location, int radius, Color color) Parameters Type Name Description Vector2i location System.Int32 radius Color color | Improve this Doc View Source DrawFilledCircle(Vector2i, Int32, Func<Vector2i, Color>) Declaration public void DrawFilledCircle(Vector2i location, int radius, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location System.Int32 radius Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledQuad(Vector2i, Vector2i, Vector2i, Vector2i, Color) Declaration public void DrawFilledQuad(Vector2i v1, Vector2i v2, Vector2i v3, Vector2i v4, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Vector2i v4 Color color | Improve this Doc View Source DrawFilledQuad(Vector2i, Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawFilledQuad(Vector2i v1, Vector2i v2, Vector2i v3, Vector2i v4, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Vector2i v4 Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledRectangle(Vector2i, Vector2i, Color) Declaration public void DrawFilledRectangle(Vector2i location, Vector2i size, Color color) Parameters Type Name Description Vector2i location Vector2i size Color color | Improve this Doc View Source DrawFilledRectangle(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawFilledRectangle(Vector2i location, Vector2i size, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location Vector2i size Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledTriangle(Vector2i, Vector2i, Vector2i, Color) Declaration public void DrawFilledTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawFilledTriangle(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawFilledTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source DrawLine(Vector2i, Vector2i, Color) Declaration public void DrawLine(Vector2i start, Vector2i end, Color color) Parameters Type Name Description Vector2i start Vector2i end Color color | Improve this Doc View Source DrawLine(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawLine(Vector2i start, Vector2i end, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i start Vector2i end Func < Vector2i , Color > color | Improve this Doc View Source DrawQuad(Vector2i, Vector2i, Vector2i, Color) Declaration public void DrawQuad(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawQuad(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawQuad(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source DrawRectangle(Vector2i, Vector2i, Color) Declaration public void DrawRectangle(Vector2i location, Vector2i size, Color color) Parameters Type Name Description Vector2i location Vector2i size Color color | Improve this Doc View Source DrawRectangle(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawRectangle(Vector2i location, Vector2i size, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location Vector2i size Func < Vector2i , Color > color | Improve this Doc View Source DrawShape(Color, Vector2i[]) Declaration public void DrawShape(Color color, params Vector2i[] points) Parameters Type Name Description Color color Vector2i [] points | Improve this Doc View Source DrawShape(Func<Vector2i, Color>, Vector2i[]) Declaration public void DrawShape(Func<Vector2i, Color> color, params Vector2i[] points) Parameters Type Name Description Func < Vector2i , Color > color Vector2i [] points | Improve this Doc View Source DrawTriangle(Vector2i, Vector2i, Vector2i, Color) Declaration public void DrawTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawTriangle(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration public void DrawTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source Get(Int32, Int32) Declaration public Color Get(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Returns Type Description Color | Improve this Doc View Source InitializeCanvas(Int32, Int32) Declaration public void InitializeCanvas(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source Set(Int32, Int32, Color) Declaration public void Set(int x, int y, Color color) Parameters Type Name Description System.Int32 x System.Int32 y Color color Implements ICanvas IModule"
  },
  "api/Fluint.Graphics.Base.FpsTask.html": {
    "href": "api/Fluint.Graphics.Base.FpsTask.html",
    "title": "Class FpsTask | Fluint",
    "keywords": "Class FpsTask Inheritance System.Object FpsTask Implements ITask IModule Namespace : Fluint.Graphics.Base Assembly : Fluint.Graphics.Base.dll Syntax public class FpsTask : object, ITask, IModule Constructors | Improve this Doc View Source FpsTask(ModulePacket) Declaration public FpsTask(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration public TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration public void Start(TaskArgs args) Parameters Type Name Description TaskArgs args Implements ITask IModule"
  },
  "api/Fluint.Graphics.Base.html": {
    "href": "api/Fluint.Graphics.Base.html",
    "title": "Namespace Fluint.Graphics.Base | Fluint",
    "keywords": "Namespace Fluint.Graphics.Base Classes Camera Canvas FpsTask Mesh MeshFactory"
  },
  "api/Fluint.Graphics.Base.Mesh.html": {
    "href": "api/Fluint.Graphics.Base.Mesh.html",
    "title": "Class Mesh | Fluint",
    "keywords": "Class Mesh Inheritance System.Object Mesh Implements IMesh IModule Namespace : Fluint.Graphics.Base Assembly : Fluint.Graphics.Base.dll Syntax public class Mesh : object, IMesh, IModule Constructors | Improve this Doc View Source Mesh(IVertexBuffer) Declaration public Mesh(IVertexBuffer vertexBuffer) Parameters Type Name Description IVertexBuffer vertexBuffer Properties | Improve this Doc View Source VertexBuffer Declaration public IVertexBuffer VertexBuffer { get; } Property Value Type Description IVertexBuffer Implements IMesh IModule"
  },
  "api/Fluint.Graphics.Base.MeshFactory.html": {
    "href": "api/Fluint.Graphics.Base.MeshFactory.html",
    "title": "Class MeshFactory | Fluint",
    "keywords": "Class MeshFactory Inheritance System.Object MeshFactory Implements IMeshFactory Namespace : Fluint.Graphics.Base Assembly : Fluint.Graphics.Base.dll Syntax public class MeshFactory : object, IMeshFactory Constructors | Improve this Doc View Source MeshFactory(ModulePacket) Declaration public MeshFactory(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source CreateMesh() Declaration public IMesh CreateMesh() Returns Type Description IMesh | Improve this Doc View Source CreateUnitBox() Declaration public IMesh CreateUnitBox() Returns Type Description IMesh Implements IMeshFactory"
  },
  "api/Fluint.Input.Base.BindingsManager.html": {
    "href": "api/Fluint.Input.Base.BindingsManager.html",
    "title": "Class BindingsManager | Fluint",
    "keywords": "Class BindingsManager Inheritance System.Object BindingsManager Implements IBindingsManager IModule Namespace : Fluint.Input.Base Assembly : Fluint.Input.Base.dll Syntax public class BindingsManager : object, IBindingsManager, IModule Constructors | Improve this Doc View Source BindingsManager(ModulePacket) Declaration public BindingsManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Fields | Improve this Doc View Source Default Declaration public static readonly IEnumerable<Binding> Default Field Value Type Description IEnumerable < Binding > Methods | Improve this Doc View Source Get(Binding) Declaration public InputState Get(Binding binding) Parameters Type Name Description Binding binding Returns Type Description InputState | Improve this Doc View Source Get(String) Declaration public InputState Get(string binding) Parameters Type Name Description System.String binding Returns Type Description InputState | Improve this Doc View Source GetBinding(String) Declaration public Binding GetBinding(string bindName) Parameters Type Name Description System.String bindName Returns Type Description Binding | Improve this Doc View Source GetBindings() Declaration public IEnumerable<Binding> GetBindings() Returns Type Description IEnumerable < Binding > | Improve this Doc View Source GetCollection(String) Declaration public IEnumerable<Binding> GetCollection(string tag) Parameters Type Name Description System.String tag Returns Type Description IEnumerable < Binding > | Improve this Doc View Source GetState(Binding) Declaration public InputState GetState(Binding binding) Parameters Type Name Description Binding binding Returns Type Description InputState | Improve this Doc View Source GetState(String) Declaration public InputState GetState(string bindName) Parameters Type Name Description System.String bindName Returns Type Description InputState | Improve this Doc View Source Load(IInputManager) Declaration public void Load(IInputManager inputManager) Parameters Type Name Description IInputManager inputManager | Improve this Doc View Source LoadBinding(Binding) Declaration public void LoadBinding(Binding binding) Parameters Type Name Description Binding binding | Improve this Doc View Source LoadBindings(IEnumerable<Binding>) Declaration public void LoadBindings(IEnumerable<Binding> bindings) Parameters Type Name Description IEnumerable < Binding > bindings | Improve this Doc View Source LoadCollection(String) Declaration public void LoadCollection(string collectionTag) Parameters Type Name Description System.String collectionTag | Improve this Doc View Source SaveCurrentCollection(String) Declaration public void SaveCurrentCollection(string tag) Parameters Type Name Description System.String tag Events | Improve this Doc View Source BindingStateUpdated Declaration public event Action<InputState, Binding> BindingStateUpdated Event Type Type Description Action < InputState , Binding > Implements IBindingsManager IModule"
  },
  "api/Fluint.Input.Base.html": {
    "href": "api/Fluint.Input.Base.html",
    "title": "Namespace Fluint.Input.Base | Fluint",
    "keywords": "Namespace Fluint.Input.Base Classes BindingsManager MouseCapture Structs InputBindingsConfiguration"
  },
  "api/Fluint.Input.Base.InputBindingsConfiguration.html": {
    "href": "api/Fluint.Input.Base.InputBindingsConfiguration.html",
    "title": "Struct InputBindingsConfiguration | Fluint",
    "keywords": "Struct InputBindingsConfiguration Implements IConfiguration Namespace : Fluint.Input.Base Assembly : Fluint.Input.Base.dll Syntax public struct InputBindingsConfiguration : IConfiguration Constructors | Improve this Doc View Source InputBindingsConfiguration(Dictionary<String, List<Binding>>) Declaration public InputBindingsConfiguration(Dictionary<string, List<Binding>> bindings) Parameters Type Name Description Dictionary < System.String , List < Binding >> bindings Properties | Improve this Doc View Source Bindings Declaration public Dictionary<string, List<Binding>> Bindings { get; } Property Value Type Description Dictionary < System.String , List < Binding >> Implements IConfiguration"
  },
  "api/Fluint.Input.Base.MouseCapture.html": {
    "href": "api/Fluint.Input.Base.MouseCapture.html",
    "title": "Class MouseCapture | Fluint",
    "keywords": "Class MouseCapture Inheritance System.Object MouseCapture Implements IMouseCapture IModule Namespace : Fluint.Input.Base Assembly : Fluint.Input.Base.dll Syntax public class MouseCapture : object, IMouseCapture, IModule Properties | Improve this Doc View Source X Declaration public int X { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Y Declaration public int Y { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Begin(IWindow) Declaration public void Begin(IWindow window) Parameters Type Name Description IWindow window | Improve this Doc View Source Capture() Declaration public void Capture() | Improve this Doc View Source Update() Declaration public void Update() Implements IMouseCapture IModule"
  },
  "api/Fluint.IO.Base.AssimpImporter.html": {
    "href": "api/Fluint.IO.Base.AssimpImporter.html",
    "title": "Class AssimpImporter | Fluint",
    "keywords": "Class AssimpImporter Inheritance System.Object AssimpImporter Implements IImporter IModule Namespace : Fluint.IO.Base Assembly : Fluint.IO.Base.dll Syntax public class AssimpImporter : object, IImporter, IModule Constructors | Improve this Doc View Source AssimpImporter(ModulePacket) Declaration public AssimpImporter(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source FileExtenstions Declaration public string[] FileExtenstions { get; } Property Value Type Description System.String [] Methods | Improve this Doc View Source Import(String) Declaration public IMesh[] Import(string fileName) Parameters Type Name Description System.String fileName Returns Type Description IMesh [] Implements IImporter IModule"
  },
  "api/Fluint.IO.Base.html": {
    "href": "api/Fluint.IO.Base.html",
    "title": "Namespace Fluint.IO.Base | Fluint",
    "keywords": "Namespace Fluint.IO.Base Classes AssimpImporter IoManager"
  },
  "api/Fluint.IO.Base.IoManager.html": {
    "href": "api/Fluint.IO.Base.IoManager.html",
    "title": "Class IoManager | Fluint",
    "keywords": "Class IoManager Inheritance System.Object IoManager Implements IIoManager IModule Namespace : Fluint.IO.Base Assembly : Fluint.IO.Base.dll Syntax public class IoManager : object, IIoManager, IModule Constructors | Improve this Doc View Source IoManager(ModulePacket) Declaration public IoManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Export(String, IMesh[], String) Declaration public void Export(string fileName, IMesh[] meshes, string format = \"\") Parameters Type Name Description System.String fileName IMesh [] meshes System.String format | Improve this Doc View Source Import(String) Declaration public IMesh[] Import(string fileName) Parameters Type Name Description System.String fileName Returns Type Description IMesh [] | Improve this Doc View Source QueryExportableFormats() Declaration public string[] QueryExportableFormats() Returns Type Description System.String [] | Improve this Doc View Source QueryImportableFormats() Declaration public string[] QueryImportableFormats() Returns Type Description System.String [] Implements IIoManager IModule"
  },
  "api/Fluint.Layer.Configuration.ConfigurationAttribute.html": {
    "href": "api/Fluint.Layer.Configuration.ConfigurationAttribute.html",
    "title": "Class ConfigurationAttribute | Fluint",
    "keywords": "Class ConfigurationAttribute Inheritance System.Object ConfigurationAttribute Namespace : Fluint.Layer.Configuration Assembly : Fluint.Layer.dll Syntax public class ConfigurationAttribute : Attribute Constructors | Improve this Doc View Source ConfigurationAttribute(String) Declaration public ConfigurationAttribute(string location) Parameters Type Name Description System.String location | Improve this Doc View Source ConfigurationAttribute(String, String) Declaration public ConfigurationAttribute(string title, string description) Parameters Type Name Description System.String title System.String description | Improve this Doc View Source ConfigurationAttribute(String, String, String) Declaration public ConfigurationAttribute(string title, string description, string location) Parameters Type Name Description System.String title System.String description System.String location Properties | Improve this Doc View Source Description Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Location Declaration public string Location { get; set; } Property Value Type Description System.String | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.Configuration.html": {
    "href": "api/Fluint.Layer.Configuration.html",
    "title": "Namespace Fluint.Layer.Configuration | Fluint",
    "keywords": "Namespace Fluint.Layer.Configuration Classes ConfigurationAttribute Interfaces IConfiguration an interface for creating configuration files. IConfigurationManager An interface for managing configuration classes, and serializing them."
  },
  "api/Fluint.Layer.Configuration.IConfiguration.html": {
    "href": "api/Fluint.Layer.Configuration.IConfiguration.html",
    "title": "Interface IConfiguration | Fluint",
    "keywords": "Interface IConfiguration an interface for creating configuration files. Namespace : Fluint.Layer.Configuration Assembly : Fluint.Layer.dll Syntax public interface IConfiguration"
  },
  "api/Fluint.Layer.Configuration.IConfigurationManager.html": {
    "href": "api/Fluint.Layer.Configuration.IConfigurationManager.html",
    "title": "Interface IConfigurationManager | Fluint",
    "keywords": "Interface IConfigurationManager An interface for managing configuration classes, and serializing them. Namespace : Fluint.Layer.Configuration Assembly : Fluint.Layer.dll Syntax public interface IConfigurationManager : IModule Methods | Improve this Doc View Source Add(IConfiguration) Saves the class in the configurations container Declaration void Add(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration The data to be saved. | Improve this Doc View Source Contains<T>() Checks if the configuration manager has type. Declaration bool Contains<T>() where T : IConfiguration Returns Type Description System.Boolean if the type is queryable, thus exists. Type Parameters Name Description T the type to check for. | Improve this Doc View Source Get<T>() For getting the data of the specified configuration class. Declaration T Get<T>() where T : IConfiguration Returns Type Description T The deserialized data. Type Parameters Name Description T The type of data you want | Improve this Doc View Source Save() Saves all the data to the long-term container 'ex: hard-drive' Declaration void Save()"
  },
  "api/Fluint.Layer.DependencyInjection.html": {
    "href": "api/Fluint.Layer.DependencyInjection.html",
    "title": "Namespace Fluint.Layer.DependencyInjection | Fluint",
    "keywords": "Namespace Fluint.Layer.DependencyInjection Classes ModuleCollection ModulePacket"
  },
  "api/Fluint.Layer.DependencyInjection.ModuleCollection.html": {
    "href": "api/Fluint.Layer.DependencyInjection.ModuleCollection.html",
    "title": "Class ModuleCollection | Fluint",
    "keywords": "Class ModuleCollection Inheritance System.Object ModuleCollection Namespace : Fluint.Layer.DependencyInjection Assembly : Fluint.Layer.dll Syntax public class ModuleCollection : object Methods | Improve this Doc View Source AddInstanced(Type) Declaration public void AddInstanced(Type instanced) Parameters Type Name Description Type instanced | Improve this Doc View Source AddInstanced<TInstancedType>() Declaration public void AddInstanced<TInstancedType>() Type Parameters Name Description TInstancedType | Improve this Doc View Source GenerateModulePacket(IRuntime) Declaration public ModulePacket GenerateModulePacket(IRuntime runtime) Parameters Type Name Description IRuntime runtime Returns Type Description ModulePacket | Improve this Doc View Source MapScoped(Type, Type) Declaration public void MapScoped(Type abstraction, Type implementation) Parameters Type Name Description Type abstraction Type implementation | Improve this Doc View Source MapScoped<TAbstraction, TImplementation>() Declaration public void MapScoped<TAbstraction, TImplementation>() where TAbstraction : IModule where TImplementation : IModule Type Parameters Name Description TAbstraction TImplementation | Improve this Doc View Source MapSingleton(Type, Type) Declaration public void MapSingleton(Type abstraction, Type implementation) Parameters Type Name Description Type abstraction Type implementation | Improve this Doc View Source MapSingleton<TAbstraction, TImplementation>() Declaration public void MapSingleton<TAbstraction, TImplementation>() where TAbstraction : IModule where TImplementation : IModule Type Parameters Name Description TAbstraction TImplementation"
  },
  "api/Fluint.Layer.DependencyInjection.ModulePacket.html": {
    "href": "api/Fluint.Layer.DependencyInjection.ModulePacket.html",
    "title": "Class ModulePacket | Fluint",
    "keywords": "Class ModulePacket Inheritance System.Object ModulePacket Namespace : Fluint.Layer.DependencyInjection Assembly : Fluint.Layer.dll Syntax public class ModulePacket : object Constructors | Improve this Doc View Source ModulePacket(IRuntime, Dictionary<Type, Type>, Dictionary<Type, Type>, List<Type>) Declaration public ModulePacket(IRuntime runtime, Dictionary<Type, Type> scopedMappings, Dictionary<Type, Type> singletonMappings, List<Type> instances) Parameters Type Name Description IRuntime runtime Dictionary < Type , Type > scopedMappings Dictionary < Type , Type > singletonMappings List < Type > instances Fields | Improve this Doc View Source ScopedMappings Declaration public readonly Dictionary<Type, Type> ScopedMappings Field Value Type Description Dictionary < Type , Type > | Improve this Doc View Source SingletonMappings Declaration public readonly Dictionary<Type, IModule> SingletonMappings Field Value Type Description Dictionary < Type , IModule > | Improve this Doc View Source StaticModules Declaration public readonly List<IModule> StaticModules Field Value Type Description List < IModule > Properties | Improve this Doc View Source CurrentRuntime Declaration public IRuntime CurrentRuntime { get; } Property Value Type Description IRuntime Methods | Improve this Doc View Source CreateInstance(Type) Declaration public object CreateInstance(Type target) Parameters Type Name Description Type target Returns Type Description System.Object | Improve this Doc View Source CreateInstance(Type, Type[]) Declaration public object CreateInstance(Type target, Type[] generics) Parameters Type Name Description Type target Type [] generics Returns Type Description System.Object | Improve this Doc View Source CreateInstance<T>() Declaration public T CreateInstance<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source CreateScoped<T>() Declaration public T CreateScoped<T>() where T : IModule Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source FetchAndCreateInstance(Type) Declaration public object FetchAndCreateInstance(Type type) Parameters Type Name Description Type type Returns Type Description System.Object | Improve this Doc View Source GetInstances() Declaration public IEnumerable<IModule> GetInstances() Returns Type Description IEnumerable < IModule > | Improve this Doc View Source GetInstances<T>() Declaration public IEnumerable<T> GetInstances<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source GetSingleton<T>() Declaration public T GetSingleton<T>() where T : IModule Returns Type Description T Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Diagnostics.Assert.html": {
    "href": "api/Fluint.Layer.Diagnostics.Assert.html",
    "title": "Class Assert | Fluint",
    "keywords": "Class Assert Inheritance System.Object Assert Namespace : Fluint.Layer.Diagnostics Assembly : Fluint.Layer.dll Syntax public static class Assert : object Methods | Improve this Doc View Source AreEqual(Object, Object, String) Declaration public static void AreEqual(object object1, object object2, string message = \"No additional information given.\") Parameters Type Name Description System.Object object1 System.Object object2 System.String message | Improve this Doc View Source AreNotEqual(Object, Object, String) Declaration public static void AreNotEqual(object object1, object object2, string message = \"No additional information given.\") Parameters Type Name Description System.Object object1 System.Object object2 System.String message | Improve this Doc View Source IsFalse(Boolean, String) Declaration public static void IsFalse(bool data, string message = \"No additional information given.\") Parameters Type Name Description System.Boolean data System.String message | Improve this Doc View Source IsTrue(Boolean, String) Declaration public static void IsTrue(bool data, string message = \"No additional information given.\") Parameters Type Name Description System.Boolean data System.String message"
  },
  "api/Fluint.Layer.Diagnostics.Benchmark.html": {
    "href": "api/Fluint.Layer.Diagnostics.Benchmark.html",
    "title": "Class Benchmark | Fluint",
    "keywords": "Class Benchmark Inheritance System.Object Benchmark Namespace : Fluint.Layer.Diagnostics Assembly : Fluint.Layer.dll Syntax public class Benchmark : object Constructors | Improve this Doc View Source Benchmark(Action, UInt32) Declaration public Benchmark(Action action, uint testSample) Parameters Type Name Description Action action System.UInt32 testSample Fields | Improve this Doc View Source AverageMillisecondDuration Declaration public double AverageMillisecondDuration Field Value Type Description System.Double | Improve this Doc View Source AverageTimeSpan Declaration public TimeSpan AverageTimeSpan Field Value Type Description TimeSpan | Improve this Doc View Source BenchmarDuration Declaration public TimeSpan BenchmarDuration Field Value Type Description TimeSpan | Improve this Doc View Source BenchmarkEndTime Declaration public DateTime BenchmarkEndTime Field Value Type Description DateTime | Improve this Doc View Source BenchmarkMillisecondsDuration Declaration public long BenchmarkMillisecondsDuration Field Value Type Description System.Int64 | Improve this Doc View Source BenchmarkStartTime Declaration public DateTime BenchmarkStartTime Field Value Type Description DateTime | Improve this Doc View Source TestSample Declaration public uint TestSample Field Value Type Description System.UInt32 Methods | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Fluint.Layer.Diagnostics.EngineApiException.html": {
    "href": "api/Fluint.Layer.Diagnostics.EngineApiException.html",
    "title": "Class EngineApiException | Fluint",
    "keywords": "Class EngineApiException Inheritance System.Object EngineApiException Namespace : Fluint.Layer.Diagnostics Assembly : Fluint.Layer.dll Syntax public class EngineApiException : Exception Constructors | Improve this Doc View Source EngineApiException() Declaration public EngineApiException() | Improve this Doc View Source EngineApiException(String, String) Declaration public EngineApiException(string api, string message) Parameters Type Name Description System.String api System.String message"
  },
  "api/Fluint.Layer.Diagnostics.html": {
    "href": "api/Fluint.Layer.Diagnostics.html",
    "title": "Namespace Fluint.Layer.Diagnostics | Fluint",
    "keywords": "Namespace Fluint.Layer.Diagnostics Classes Assert Benchmark EngineApiException Interfaces ILogger an interface for a Logger"
  },
  "api/Fluint.Layer.Diagnostics.ILogger.html": {
    "href": "api/Fluint.Layer.Diagnostics.ILogger.html",
    "title": "Interface ILogger | Fluint",
    "keywords": "Interface ILogger an interface for a Logger Namespace : Fluint.Layer.Diagnostics Assembly : Fluint.Layer.dll Syntax public interface ILogger : IModule Methods | Improve this Doc View Source Debug(Exception, String) Declaration void Debug(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Debug(Exception, String, Object[]) Declaration void Debug(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Debug(String) Declaration void Debug(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Debug(String, Object[]) Declaration void Debug(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Error(Exception, String) Declaration void Error(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Error(Exception, String, Object[]) Declaration void Error(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Error(String) Declaration void Error(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Error(String, Object) Declaration void Error(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Error(String, Object, Object) Declaration void Error(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Error(String, Object, Object, Object) Declaration void Error(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Error(String, Object[]) Declaration void Error(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Fatal(Exception, String) Declaration void Fatal(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Fatal(Exception, String, Object[]) Declaration void Fatal(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Fatal(String) Declaration void Fatal(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Fatal(String, Object) Declaration void Fatal(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Fatal(String, Object, Object) Declaration void Fatal(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Fatal(String, Object, Object, Object) Declaration void Fatal(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Fatal(String, Object[]) Declaration void Fatal(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Information(Exception, String) Declaration void Information(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Information(Exception, String, Object[]) Declaration void Information(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Information(String) Declaration void Information(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Information(String, Object) Declaration void Information(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Information(String, Object, Object) Declaration void Information(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Information(String, Object, Object, Object) Declaration void Information(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Information(String, Object[]) Declaration void Information(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Verbose(Exception, String) Declaration void Verbose(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Verbose(Exception, String, Object[]) Declaration void Verbose(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Verbose(String) Declaration void Verbose(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Verbose(String, Object) Declaration void Verbose(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Verbose(String, Object, Object) Declaration void Verbose(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Verbose(String, Object, Object, Object) Declaration void Verbose(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Verbose(String, Object[]) Declaration void Verbose(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Warning(Exception, String) Declaration void Warning(Exception exception, string messageTemplate) Parameters Type Name Description Exception exception System.String messageTemplate | Improve this Doc View Source Warning(Exception, String, Object[]) Declaration void Warning(Exception exception, string messageTemplate, params object[] propertyValue) Parameters Type Name Description Exception exception System.String messageTemplate System.Object [] propertyValue | Improve this Doc View Source Warning(String) Declaration void Warning(string messageTemplate) Parameters Type Name Description System.String messageTemplate | Improve this Doc View Source Warning(String, Object) Declaration void Warning(string messageTemplate, object first) Parameters Type Name Description System.String messageTemplate System.Object first | Improve this Doc View Source Warning(String, Object, Object) Declaration void Warning(string messageTemplate, object first, object second) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second | Improve this Doc View Source Warning(String, Object, Object, Object) Declaration void Warning(string messageTemplate, object first, object second, object third) Parameters Type Name Description System.String messageTemplate System.Object first System.Object second System.Object third | Improve this Doc View Source Warning(String, Object[]) Declaration void Warning(string messageTemplate, params object[] propertyValue) Parameters Type Name Description System.String messageTemplate System.Object [] propertyValue"
  },
  "api/Fluint.Layer.Editor.html": {
    "href": "api/Fluint.Layer.Editor.html",
    "title": "Namespace Fluint.Layer.Editor | Fluint",
    "keywords": "Namespace Fluint.Layer.Editor Classes ToolState Interfaces IEditPolygon2D ISketchTool"
  },
  "api/Fluint.Layer.Editor.IEditPolygon2D.html": {
    "href": "api/Fluint.Layer.Editor.IEditPolygon2D.html",
    "title": "Interface IEditPolygon2D | Fluint",
    "keywords": "Interface IEditPolygon2D Namespace : Fluint.Layer.Editor Assembly : Fluint.Layer.dll Syntax public interface IEditPolygon2D Methods | Improve this Doc View Source Load(Vector3[]) Declaration void Load(Vector3[] points) Parameters Type Name Description Vector3 [] points | Improve this Doc View Source Render() Declaration void Render() | Improve this Doc View Source Update() Declaration void Update()"
  },
  "api/Fluint.Layer.Editor.ISketchTool.html": {
    "href": "api/Fluint.Layer.Editor.ISketchTool.html",
    "title": "Interface ISketchTool | Fluint",
    "keywords": "Interface ISketchTool Namespace : Fluint.Layer.Editor Assembly : Fluint.Layer.dll Syntax public interface ISketchTool Properties | Improve this Doc View Source Skeleton Declaration ICollection<PositionColorVertex> Skeleton { get; } Property Value Type Description ICollection < PositionColorVertex > Methods | Improve this Doc View Source Dragging() Declaration void Dragging() | Improve this Doc View Source StartDragging() Declaration void StartDragging() | Improve this Doc View Source StopDragging() Declaration List<PositionColorVertex> StopDragging() Returns Type Description List < PositionColorVertex >"
  },
  "api/Fluint.Layer.Editor.Tools.html": {
    "href": "api/Fluint.Layer.Editor.Tools.html",
    "title": "Namespace Fluint.Layer.Editor.Tools | Fluint",
    "keywords": "Namespace Fluint.Layer.Editor.Tools Classes PointerTool ToolAttribute Interfaces ITool"
  },
  "api/Fluint.Layer.Editor.Tools.ITool.html": {
    "href": "api/Fluint.Layer.Editor.Tools.ITool.html",
    "title": "Interface ITool | Fluint",
    "keywords": "Interface ITool Namespace : Fluint.Layer.Editor.Tools Assembly : Fluint.Layer.dll Syntax public interface ITool : IModule Methods | Improve this Doc View Source Begin() Declaration void Begin() | Improve this Doc View Source End() Declaration void End() | Improve this Doc View Source Tick() Declaration void Tick()"
  },
  "api/Fluint.Layer.Editor.Tools.PointerTool.html": {
    "href": "api/Fluint.Layer.Editor.Tools.PointerTool.html",
    "title": "Class PointerTool | Fluint",
    "keywords": "Class PointerTool Inheritance System.Object PointerTool Implements ITool IModule Namespace : Fluint.Layer.Editor.Tools Assembly : Fluint.Layer.dll Syntax public class PointerTool : object, ITool, IModule Methods | Improve this Doc View Source Begin() Declaration public void Begin() | Improve this Doc View Source End() Declaration public void End() | Improve this Doc View Source Tick() Declaration public void Tick() Implements ITool IModule"
  },
  "api/Fluint.Layer.Editor.Tools.ToolAttribute.html": {
    "href": "api/Fluint.Layer.Editor.Tools.ToolAttribute.html",
    "title": "Class ToolAttribute | Fluint",
    "keywords": "Class ToolAttribute Inheritance System.Object ToolAttribute Namespace : Fluint.Layer.Editor.Tools Assembly : Fluint.Layer.dll Syntax public class ToolAttribute : Attribute Constructors | Improve this Doc View Source ToolAttribute(String, String) Declaration public ToolAttribute(string displayName, string iconPath) Parameters Type Name Description System.String displayName System.String iconPath Properties | Improve this Doc View Source DisplayName Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source IconPath Declaration public string IconPath { get; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.Editor.ToolState.html": {
    "href": "api/Fluint.Layer.Editor.ToolState.html",
    "title": "Class ToolState | Fluint",
    "keywords": "Class ToolState Inheritance System.Object ToolState Implements IState Namespace : Fluint.Layer.Editor Assembly : Fluint.Layer.dll Syntax public class ToolState : object, IState Properties | Improve this Doc View Source ActiveTool Declaration public ITool ActiveTool { get; set; } Property Value Type Description ITool Implements IState"
  },
  "api/Fluint.Layer.Functionality.Common.html": {
    "href": "api/Fluint.Layer.Functionality.Common.html",
    "title": "Namespace Fluint.Layer.Functionality.Common | Fluint",
    "keywords": "Namespace Fluint.Layer.Functionality.Common Interfaces IGracefulExit"
  },
  "api/Fluint.Layer.Functionality.Common.IGracefulExit.html": {
    "href": "api/Fluint.Layer.Functionality.Common.IGracefulExit.html",
    "title": "Interface IGracefulExit | Fluint",
    "keywords": "Interface IGracefulExit Namespace : Fluint.Layer.Functionality.Common Assembly : Fluint.Layer.dll Syntax public interface IGracefulExit : ILogicModule, IModule Methods | Improve this Doc View Source Exit() Declaration void Exit()"
  },
  "api/Fluint.Layer.Functionality.Graphics.html": {
    "href": "api/Fluint.Layer.Functionality.Graphics.html",
    "title": "Namespace Fluint.Layer.Functionality.Graphics | Fluint",
    "keywords": "Namespace Fluint.Layer.Functionality.Graphics Interfaces IGenerateSphere"
  },
  "api/Fluint.Layer.Functionality.Graphics.IGenerateSphere.html": {
    "href": "api/Fluint.Layer.Functionality.Graphics.IGenerateSphere.html",
    "title": "Interface IGenerateSphere | Fluint",
    "keywords": "Interface IGenerateSphere Namespace : Fluint.Layer.Functionality.Graphics Assembly : Fluint.Layer.dll Syntax public interface IGenerateSphere : ILogicModule, IModule Methods | Improve this Doc View Source GenerateIcoSphere() Declaration PositionColorVertex[] GenerateIcoSphere() Returns Type Description PositionColorVertex [] | Improve this Doc View Source GenerateQuadSphere() Declaration PositionColorVertex[] GenerateQuadSphere() Returns Type Description PositionColorVertex [] | Improve this Doc View Source GenerateUVSphere() Declaration PositionColorVertex[] GenerateUVSphere() Returns Type Description PositionColorVertex []"
  },
  "api/Fluint.Layer.Functionality.html": {
    "href": "api/Fluint.Layer.Functionality.html",
    "title": "Namespace Fluint.Layer.Functionality | Fluint",
    "keywords": "Namespace Fluint.Layer.Functionality Classes ModularAction Interfaces IActionManager ILogicModule"
  },
  "api/Fluint.Layer.Functionality.IActionManager.html": {
    "href": "api/Fluint.Layer.Functionality.IActionManager.html",
    "title": "Interface IActionManager | Fluint",
    "keywords": "Interface IActionManager Namespace : Fluint.Layer.Functionality Assembly : Fluint.Layer.dll Syntax public interface IActionManager : IModule Methods | Improve this Doc View Source GetAction<T>() Declaration T GetAction<T>() where T : ILogicModule Returns Type Description T Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Functionality.ILogicModule.html": {
    "href": "api/Fluint.Layer.Functionality.ILogicModule.html",
    "title": "Interface ILogicModule | Fluint",
    "keywords": "Interface ILogicModule Namespace : Fluint.Layer.Functionality Assembly : Fluint.Layer.dll Syntax public interface ILogicModule : IModule"
  },
  "api/Fluint.Layer.Functionality.ModularAction.html": {
    "href": "api/Fluint.Layer.Functionality.ModularAction.html",
    "title": "Class ModularAction | Fluint",
    "keywords": "Class ModularAction Inheritance System.Object ModularAction Namespace : Fluint.Layer.Functionality Assembly : Fluint.Layer.dll Syntax public class ModularAction : ICollection<Action> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(Action) Declaration public void Add(Action item) Parameters Type Name Description Action item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(Action) Declaration public bool Contains(Action item) Parameters Type Name Description Action item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(Action[], Int32) Declaration public void CopyTo(Action[] array, int arrayIndex) Parameters Type Name Description Action [] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Action> GetEnumerator() Returns Type Description IEnumerator < Action > | Improve this Doc View Source Insert(Int32, Action) Declaration public void Insert(int key, Action action) Parameters Type Name Description System.Int32 key Action action | Improve this Doc View Source Invoke() Declaration public void Invoke() | Improve this Doc View Source Remove(Action) Declaration public bool Remove(Action item) Parameters Type Name Description Action item Returns Type Description System.Boolean Operators | Improve this Doc View Source Implicit(Action to ModularAction) Declaration public static implicit operator ModularAction(Action right) Parameters Type Name Description Action right Returns Type Description ModularAction | Improve this Doc View Source Implicit(ModularAction to Action) Declaration public static implicit operator Action(ModularAction right) Parameters Type Name Description ModularAction right Returns Type Description Action"
  },
  "api/Fluint.Layer.Graphics.API.BindingContextSettings.html": {
    "href": "api/Fluint.Layer.Graphics.API.BindingContextSettings.html",
    "title": "Struct BindingContextSettings | Fluint",
    "keywords": "Struct BindingContextSettings Contains Settings for IBindingContext Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct BindingContextSettings Constructors | Improve this Doc View Source BindingContextSettings(IntPtr, Int32, Int32) Declaration public BindingContextSettings(IntPtr handle, int height, int width) Parameters Type Name Description IntPtr handle System.Int32 height System.Int32 width Properties | Improve this Doc View Source ContextHandle The Control's Context Pointer Declaration public IntPtr ContextHandle { get; set; } Property Value Type Description IntPtr | Improve this Doc View Source Height Declaration public int Height { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Width Declaration public int Width { get; set; } Property Value Type Description System.Int32"
  },
  "api/Fluint.Layer.Graphics.API.Blend.html": {
    "href": "api/Fluint.Layer.Graphics.API.Blend.html",
    "title": "Enum Blend | Fluint",
    "keywords": "Enum Blend Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum Blend : int Fields Name Description InverseSourceAlpha InverseSourceColor One SourceAlpha SourceColor Zero"
  },
  "api/Fluint.Layer.Graphics.API.BlendOperation.html": {
    "href": "api/Fluint.Layer.Graphics.API.BlendOperation.html",
    "title": "Enum BlendOperation | Fluint",
    "keywords": "Enum BlendOperation Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum BlendOperation : int Fields Name Description Add Max Min Subtract"
  },
  "api/Fluint.Layer.Graphics.API.BufferScope.html": {
    "href": "api/Fluint.Layer.Graphics.API.BufferScope.html",
    "title": "Enum BufferScope | Fluint",
    "keywords": "Enum BufferScope Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum BufferScope : int Fields Name Description Global NotAssigned PixelShader VertexShader"
  },
  "api/Fluint.Layer.Graphics.API.Command.html": {
    "href": "api/Fluint.Layer.Graphics.API.Command.html",
    "title": "Struct Command | Fluint",
    "keywords": "Struct Command Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct Command Constructors | Improve this Doc View Source Command(String, Object[]) Declaration public Command(string commandIdentifier, params object[] arguments) Parameters Type Name Description System.String commandIdentifier System.Object [] arguments Fields | Improve this Doc View Source Arguments Declaration public readonly object[] Arguments Field Value Type Description System.Object [] | Improve this Doc View Source CommandIdentifier Declaration public readonly string CommandIdentifier Field Value Type Description System.String | Improve this Doc View Source LoadContext Declaration public const string LoadContext = null Field Value Type Description System.String"
  },
  "api/Fluint.Layer.Graphics.API.CommandType.html": {
    "href": "api/Fluint.Layer.Graphics.API.CommandType.html",
    "title": "Enum CommandType | Fluint",
    "keywords": "Enum CommandType Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum CommandType : int Fields Name Description Begin ClearDepthStencil ClearRenderTarget Draw DrawIndexed End SetBlendState SetComputeShader SetConstantBuffers SetDepthStencilState SetIndexBuffer SetInputLayout SetPipeline SetPixelShader SetPrimitiveTopology SetRasterizerState SetRenderTarget SetRenderTargets SetSamplers SetScissor SetTextures SetVertexBuffer SetVertexShader SetViewport"
  },
  "api/Fluint.Layer.Graphics.API.ComparisonFunction.html": {
    "href": "api/Fluint.Layer.Graphics.API.ComparisonFunction.html",
    "title": "Enum ComparisonFunction | Fluint",
    "keywords": "Enum ComparisonFunction Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ComparisonFunction : int Fields Name Description Always Equal Greater GreaterEqual Less LessEqual Never NotEqual"
  },
  "api/Fluint.Layer.Graphics.API.CullMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.CullMode.html",
    "title": "Enum CullMode | Fluint",
    "keywords": "Enum CullMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum CullMode : int Fields Name Description Back Front None"
  },
  "api/Fluint.Layer.Graphics.API.FillMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.FillMode.html",
    "title": "Enum FillMode | Fluint",
    "keywords": "Enum FillMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum FillMode : int Fields Name Description Solid Wireframe"
  },
  "api/Fluint.Layer.Graphics.API.Filter.html": {
    "href": "api/Fluint.Layer.Graphics.API.Filter.html",
    "title": "Enum Filter | Fluint",
    "keywords": "Enum Filter Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum Filter : int Fields Name Description Anisotropic Linear Nearest None Extension Methods GLExtensions.MagFilterToOpenTK() GLExtensions.MinFilterToOpenTK()"
  },
  "api/Fluint.Layer.Graphics.API.Format.html": {
    "href": "api/Fluint.Layer.Graphics.API.Format.html",
    "title": "Enum Format | Fluint",
    "keywords": "Enum Format Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum Format : int Fields Name Description D24UnormS8UInt D32Float R16G16B16A16Float R16G16Float R16UInt R32Float R32G32B32A32Float R32G32B32Float R32G32Float R32UInt R8G8B8A8UNorm R8G8B8UNorm R8UNorm Extension Methods GL46Extensions.ToOpenTK()"
  },
  "api/Fluint.Layer.Graphics.API.html": {
    "href": "api/Fluint.Layer.Graphics.API.html",
    "title": "Namespace Fluint.Layer.Graphics.API | Fluint",
    "keywords": "Namespace Fluint.Layer.Graphics.API Classes Shader ShaderPacket SwapChainDescriptor TextureView VertexLayoutAttribute Structs BindingContextSettings Contains Settings for IBindingContext Command PositionColorVertex A data structure to be loaded into buffers, contains position, and color. PositionNormalUvtidVertex A data structure to be loaded into buffers, contains position, normal, UV, TextureID. PositionNormalVertex A data structure to be loaded into buffers, contains position, and normal. PositionVertex A data structure to be loaded into buffers, contains position. ShaderObject Interfaces IBindingContext IBlendState ICommandList IConstantBuffer IDepthStencilState IFramebuffer IGraphicsDevice IGraphicsFactory IIndexBuffer IInputLayout IPipeline IRasterizerState ISampler IShader IShaderGenerationModule IShaderGenerator ISwapChain ITexture ITextureFactory IVertexBuffer IVertexLayout<TVertexType> Enums Blend BlendOperation BufferScope CommandType ComparisonFunction CullMode FillMode Filter Format PrimitiveTopology ProjectionMode SamplerAddressMode SamplerMipMapMode ShaderObjectType ShaderScope ShaderStage ShadingMode SwapEffect TextureAddressMode TextureViewType VertexLayoutAttributeType VertexType"
  },
  "api/Fluint.Layer.Graphics.API.IBindingContext.html": {
    "href": "api/Fluint.Layer.Graphics.API.IBindingContext.html",
    "title": "Interface IBindingContext | Fluint",
    "keywords": "Interface IBindingContext Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IBindingContext : IModule, IDisposable Properties | Improve this Doc View Source NativeContext Declaration object NativeContext { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source InitializeContext(BindingContextSettings) Declaration void InitializeContext(BindingContextSettings settings) Parameters Type Name Description BindingContextSettings settings | Improve this Doc View Source MakeCurrent() Declaration void MakeCurrent() | Improve this Doc View Source PostRender() Declaration void PostRender() | Improve this Doc View Source PreRender() Declaration void PreRender() | Improve this Doc View Source Resize(Int32, Int32) Declaration void Resize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source SwapBuffers() Declaration void SwapBuffers()"
  },
  "api/Fluint.Layer.Graphics.API.IBlendState.html": {
    "href": "api/Fluint.Layer.Graphics.API.IBlendState.html",
    "title": "Interface IBlendState | Fluint",
    "keywords": "Interface IBlendState Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IBlendState : IDisposable"
  },
  "api/Fluint.Layer.Graphics.API.ICommandList.html": {
    "href": "api/Fluint.Layer.Graphics.API.ICommandList.html",
    "title": "Interface ICommandList | Fluint",
    "keywords": "Interface ICommandList Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface ICommandList Methods | Improve this Doc View Source Begin(String, IPipeline) Declaration void Begin(string passName, IPipeline pipeline) Parameters Type Name Description System.String passName IPipeline pipeline | Improve this Doc View Source Clear() Declaration void Clear() | Improve this Doc View Source ClearDepthStencil(TextureView, Single, Byte) Declaration void ClearDepthStencil(TextureView depthStencil, float clearDepth, byte stencilDepth) Parameters Type Name Description TextureView depthStencil System.Single clearDepth System.Byte stencilDepth | Improve this Doc View Source ClearRenderTarget(TextureView, Color4) Declaration void ClearRenderTarget(TextureView renderTarget, Color4 clearColor) Parameters Type Name Description TextureView renderTarget Color4 clearColor | Improve this Doc View Source Draw(Int32) Declaration void Draw(int vertexCount) Parameters Type Name Description System.Int32 vertexCount | Improve this Doc View Source DrawIndexed(Int32, Int32, Int32) Declaration void DrawIndexed(int indexCount, int indexOffset, int vertexOffset) Parameters Type Name Description System.Int32 indexCount System.Int32 indexOffset System.Int32 vertexOffset | Improve this Doc View Source End() Declaration void End() | Improve this Doc View Source SetBlendState(IBlendState) Declaration void SetBlendState(IBlendState blendState) Parameters Type Name Description IBlendState blendState | Improve this Doc View Source SetConstantBuffer(IConstantBuffer, BufferScope) Declaration void SetConstantBuffer(IConstantBuffer buffer, BufferScope bufferScope) Parameters Type Name Description IConstantBuffer buffer BufferScope bufferScope | Improve this Doc View Source SetDepthStencilState(IDepthStencilState) Declaration void SetDepthStencilState(IDepthStencilState depthStencilState) Parameters Type Name Description IDepthStencilState depthStencilState | Improve this Doc View Source SetIndexBuffer(IIndexBuffer) Declaration void SetIndexBuffer(IIndexBuffer indexBuffer) Parameters Type Name Description IIndexBuffer indexBuffer | Improve this Doc View Source SetInputLayout(IInputLayout) Declaration void SetInputLayout(IInputLayout inputLayout) Parameters Type Name Description IInputLayout inputLayout | Improve this Doc View Source SetPixelShader(IShader) Declaration void SetPixelShader(IShader pixelShader) Parameters Type Name Description IShader pixelShader | Improve this Doc View Source SetPrimitiveTopology(PrimitiveTopology) Declaration void SetPrimitiveTopology(PrimitiveTopology primitiveTopology) Parameters Type Name Description PrimitiveTopology primitiveTopology | Improve this Doc View Source SetRasterizerState(IRasterizerState) Declaration void SetRasterizerState(IRasterizerState rasterizerState) Parameters Type Name Description IRasterizerState rasterizerState | Improve this Doc View Source SetRenderTarget(TextureView, TextureView) Declaration void SetRenderTarget(TextureView renderTargets, TextureView depthStencilView) Parameters Type Name Description TextureView renderTargets TextureView depthStencilView | Improve this Doc View Source SetRenderTargets(TextureView[], TextureView) Declaration void SetRenderTargets(TextureView[] renderTargets, TextureView depthStencilView) Parameters Type Name Description TextureView [] renderTargets TextureView depthStencilView | Improve this Doc View Source SetSampler(ISampler) Declaration void SetSampler(ISampler sampler) Parameters Type Name Description ISampler sampler | Improve this Doc View Source SetScissorRectangle(Rectangle) Declaration void SetScissorRectangle(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle | Improve this Doc View Source SetTexture(TextureView) Declaration void SetTexture(TextureView textureView) Parameters Type Name Description TextureView textureView | Improve this Doc View Source SetVertexBuffer(IVertexBuffer) Declaration void SetVertexBuffer(IVertexBuffer vertexBuffer) Parameters Type Name Description IVertexBuffer vertexBuffer | Improve this Doc View Source SetVertexShader(IShader) Declaration void SetVertexShader(IShader vertexShader) Parameters Type Name Description IShader vertexShader | Improve this Doc View Source SetViewport(Viewport) Declaration void SetViewport(Viewport viewport) Parameters Type Name Description Viewport viewport | Improve this Doc View Source Submit() Declaration void Submit()"
  },
  "api/Fluint.Layer.Graphics.API.IConstantBuffer.html": {
    "href": "api/Fluint.Layer.Graphics.API.IConstantBuffer.html",
    "title": "Interface IConstantBuffer | Fluint",
    "keywords": "Interface IConstantBuffer Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IConstantBuffer : IModule, IDisposable Methods | Improve this Doc View Source UpdateBuffer<T>(T) Declaration void UpdateBuffer<T>(T constants) where T : struct Parameters Type Name Description T constants Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Graphics.API.IDepthStencilState.html": {
    "href": "api/Fluint.Layer.Graphics.API.IDepthStencilState.html",
    "title": "Interface IDepthStencilState | Fluint",
    "keywords": "Interface IDepthStencilState Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IDepthStencilState : IDisposable"
  },
  "api/Fluint.Layer.Graphics.API.IFramebuffer.html": {
    "href": "api/Fluint.Layer.Graphics.API.IFramebuffer.html",
    "title": "Interface IFramebuffer | Fluint",
    "keywords": "Interface IFramebuffer Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IFramebuffer : IModule, IDisposable Properties | Improve this Doc View Source Handle Declaration int Handle { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Size Declaration Vector2i Size { get; } Property Value Type Description Vector2i Methods | Improve this Doc View Source Bind() Declaration void Bind() | Improve this Doc View Source Create(Vector2i) Declaration void Create(Vector2i size) Parameters Type Name Description Vector2i size | Improve this Doc View Source GetTexture() Declaration ITexture GetTexture() Returns Type Description ITexture | Improve this Doc View Source Unbind() Declaration void Unbind()"
  },
  "api/Fluint.Layer.Graphics.API.IGraphicsDevice.html": {
    "href": "api/Fluint.Layer.Graphics.API.IGraphicsDevice.html",
    "title": "Interface IGraphicsDevice | Fluint",
    "keywords": "Interface IGraphicsDevice Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IGraphicsDevice : IDisposable"
  },
  "api/Fluint.Layer.Graphics.API.IGraphicsFactory.html": {
    "href": "api/Fluint.Layer.Graphics.API.IGraphicsFactory.html",
    "title": "Interface IGraphicsFactory | Fluint",
    "keywords": "Interface IGraphicsFactory Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IGraphicsFactory : IModule Methods | Improve this Doc View Source CreateBlendState(Boolean, Blend, Blend, BlendOperation, Blend, Blend, BlendOperation) Declaration IBlendState CreateBlendState(bool isBlendEnabled, Blend sourceBlend, Blend destinationBlend, BlendOperation blendOperation, Blend sourceAlphaBlend, Blend destinationAlphaBlend, BlendOperation blendOperationAlpha) Parameters Type Name Description System.Boolean isBlendEnabled Blend sourceBlend Blend destinationBlend BlendOperation blendOperation Blend sourceAlphaBlend Blend destinationAlphaBlend BlendOperation blendOperationAlpha Returns Type Description IBlendState | Improve this Doc View Source CreateCommandList() Declaration ICommandList CreateCommandList() Returns Type Description ICommandList | Improve this Doc View Source CreateConstantBuffer<T>(T) Declaration IConstantBuffer CreateConstantBuffer<T>(T constants) where T : struct Parameters Type Name Description T constants Returns Type Description IConstantBuffer Type Parameters Name Description T | Improve this Doc View Source CreateDepthStencilState() Declaration IDepthStencilState CreateDepthStencilState() Returns Type Description IDepthStencilState | Improve this Doc View Source CreateIndexBuffer<T>(T[]) Declaration IIndexBuffer CreateIndexBuffer<T>(T[] indices) where T : struct Parameters Type Name Description T[] indices Returns Type Description IIndexBuffer Type Parameters Name Description T | Improve this Doc View Source CreatePipeline(Shader, Shader, IInputLayout, IBlendState, IDepthStencilState, IRasterizerState, Viewport, PrimitiveTopology) Declaration IPipeline CreatePipeline(Shader vertexShader, Shader pixelShader, IInputLayout inputLayout, IBlendState blendState, IDepthStencilState depthStencilState, IRasterizerState rasterizerState, Viewport viewport, PrimitiveTopology primitiveTopology) Parameters Type Name Description Shader vertexShader Shader pixelShader IInputLayout inputLayout IBlendState blendState IDepthStencilState depthStencilState IRasterizerState rasterizerState Viewport viewport PrimitiveTopology primitiveTopology Returns Type Description IPipeline | Improve this Doc View Source CreateRasterizerState(CullMode, FillMode, Boolean, Boolean, Boolean, Boolean) Declaration IRasterizerState CreateRasterizerState(CullMode cullMode, FillMode fillMode, bool isDepthEnabled, bool isScissorEnabled, bool isMultiSampleEnabled, bool isAntialiasedLineEnabled) Parameters Type Name Description CullMode cullMode FillMode fillMode System.Boolean isDepthEnabled System.Boolean isScissorEnabled System.Boolean isMultiSampleEnabled System.Boolean isAntialiasedLineEnabled Returns Type Description IRasterizerState | Improve this Doc View Source CreateSampler(TextureAddressMode, TextureAddressMode, Filter, ComparisonFunction) Declaration ISampler CreateSampler(TextureAddressMode addressModeU, TextureAddressMode addressModeV, Filter filter, ComparisonFunction comparisonFunction) Parameters Type Name Description TextureAddressMode addressModeU TextureAddressMode addressModeV Filter filter ComparisonFunction comparisonFunction Returns Type Description ISampler | Improve this Doc View Source CreateShader(ShaderStage, String, VertexType, IEnumerable<(String, String)>) Declaration Shader CreateShader(ShaderStage shaderStage, string shaderText, VertexType vertexType, IEnumerable<(string, string)> macros) Parameters Type Name Description ShaderStage shaderStage System.String shaderText VertexType vertexType IEnumerable < System.ValueTuple < System.String , System.String >> macros Returns Type Description Shader | Improve this Doc View Source CreateShaderFromFile(ShaderStage, String, VertexType, IEnumerable<(String, String)>) Declaration Shader CreateShaderFromFile(ShaderStage shaderStage, string filePath, VertexType vertexType, IEnumerable<(string, string)> macros) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType IEnumerable < System.ValueTuple < System.String , System.String >> macros Returns Type Description Shader | Improve this Doc View Source CreateSwapchain(SwapChainDescriptor) Declaration ISwapChain CreateSwapchain(SwapChainDescriptor swapChainDescriptor) Parameters Type Name Description SwapChainDescriptor swapChainDescriptor Returns Type Description ISwapChain | Improve this Doc View Source CreateTextureFactory() Declaration ITextureFactory CreateTextureFactory() Returns Type Description ITextureFactory | Improve this Doc View Source CreateVertexBuffer<T>(T[]) Declaration IVertexBuffer CreateVertexBuffer<T>(T[] vertices) where T : struct Parameters Type Name Description T[] vertices Returns Type Description IVertexBuffer Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Graphics.API.IIndexBuffer.html": {
    "href": "api/Fluint.Layer.Graphics.API.IIndexBuffer.html",
    "title": "Interface IIndexBuffer | Fluint",
    "keywords": "Interface IIndexBuffer Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IIndexBuffer : IDisposable Properties | Improve this Doc View Source Is16Bit Declaration bool Is16Bit { get; } Property Value Type Description System.Boolean"
  },
  "api/Fluint.Layer.Graphics.API.IInputLayout.html": {
    "href": "api/Fluint.Layer.Graphics.API.IInputLayout.html",
    "title": "Interface IInputLayout | Fluint",
    "keywords": "Interface IInputLayout Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IInputLayout : IDisposable"
  },
  "api/Fluint.Layer.Graphics.API.IPipeline.html": {
    "href": "api/Fluint.Layer.Graphics.API.IPipeline.html",
    "title": "Interface IPipeline | Fluint",
    "keywords": "Interface IPipeline Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IPipeline : IModule, IDisposable Properties | Improve this Doc View Source BlendState Declaration IBlendState BlendState { get; } Property Value Type Description IBlendState | Improve this Doc View Source DepthStencilState Declaration IDepthStencilState DepthStencilState { get; } Property Value Type Description IDepthStencilState | Improve this Doc View Source InputLayout Declaration IInputLayout InputLayout { get; } Property Value Type Description IInputLayout | Improve this Doc View Source PixelShader Declaration IShader PixelShader { get; } Property Value Type Description IShader | Improve this Doc View Source PrimitiveTopology Declaration PrimitiveTopology PrimitiveTopology { get; } Property Value Type Description PrimitiveTopology | Improve this Doc View Source RasterizerState Declaration IRasterizerState RasterizerState { get; } Property Value Type Description IRasterizerState | Improve this Doc View Source VertexShader Declaration IShader VertexShader { get; } Property Value Type Description IShader | Improve this Doc View Source Viewport Declaration Viewport Viewport { get; set; } Property Value Type Description Viewport"
  },
  "api/Fluint.Layer.Graphics.API.IRasterizerState.html": {
    "href": "api/Fluint.Layer.Graphics.API.IRasterizerState.html",
    "title": "Interface IRasterizerState | Fluint",
    "keywords": "Interface IRasterizerState Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IRasterizerState : IDisposable Properties | Improve this Doc View Source CullMode Declaration CullMode CullMode { get; } Property Value Type Description CullMode | Improve this Doc View Source FillMode Declaration FillMode FillMode { get; } Property Value Type Description FillMode | Improve this Doc View Source IsAntialiasedLineEnabled Declaration bool IsAntialiasedLineEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDepthEnabled Declaration bool IsDepthEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMultiSampleEnabled Declaration bool IsMultiSampleEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsScissorEnabled Declaration bool IsScissorEnabled { get; } Property Value Type Description System.Boolean"
  },
  "api/Fluint.Layer.Graphics.API.ISampler.html": {
    "href": "api/Fluint.Layer.Graphics.API.ISampler.html",
    "title": "Interface ISampler | Fluint",
    "keywords": "Interface ISampler Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface ISampler"
  },
  "api/Fluint.Layer.Graphics.API.IShader.html": {
    "href": "api/Fluint.Layer.Graphics.API.IShader.html",
    "title": "Interface IShader | Fluint",
    "keywords": "Interface IShader Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IShader : IModule, IDisposable Properties | Improve this Doc View Source InputLayout Declaration IInputLayout InputLayout { get; } Property Value Type Description IInputLayout Methods | Improve this Doc View Source CompileFile(ShaderStage, String, VertexType) Declaration void CompileFile(ShaderStage shaderStage, string filePath, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType | Improve this Doc View Source CompileString(ShaderStage, String, VertexType) Declaration void CompileString(ShaderStage shaderStage, string shaderText, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String shaderText VertexType vertexType"
  },
  "api/Fluint.Layer.Graphics.API.IShaderGenerationModule.html": {
    "href": "api/Fluint.Layer.Graphics.API.IShaderGenerationModule.html",
    "title": "Interface IShaderGenerationModule | Fluint",
    "keywords": "Interface IShaderGenerationModule Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IShaderGenerationModule Properties | Improve this Doc View Source Priority Sets the priority of this module, the lower numbers will be concatenated first. Declaration int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Stage Declaration ShaderStage Stage { get; } Property Value Type Description ShaderStage Methods | Improve this Doc View Source Generate() Generates the code to concatenate. Declaration string Generate() Returns Type Description System.String Returns the generated code."
  },
  "api/Fluint.Layer.Graphics.API.IShaderGenerator.html": {
    "href": "api/Fluint.Layer.Graphics.API.IShaderGenerator.html",
    "title": "Interface IShaderGenerator | Fluint",
    "keywords": "Interface IShaderGenerator Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IShaderGenerator Methods | Improve this Doc View Source Add(IShaderGenerationModule) Declaration void Add(IShaderGenerationModule module) Parameters Type Name Description IShaderGenerationModule module | Improve this Doc View Source Generate() Declaration IShader Generate() Returns Type Description IShader"
  },
  "api/Fluint.Layer.Graphics.API.ISwapChain.html": {
    "href": "api/Fluint.Layer.Graphics.API.ISwapChain.html",
    "title": "Interface ISwapChain | Fluint",
    "keywords": "Interface ISwapChain Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface ISwapChain : IDisposable Properties | Improve this Doc View Source DepthStencilView Declaration TextureView DepthStencilView { get; } Property Value Type Description TextureView | Improve this Doc View Source TextureView Declaration TextureView TextureView { get; } Property Value Type Description TextureView Methods | Improve this Doc View Source Disconnect() Declaration void Disconnect() | Improve this Doc View Source Modify(SwapChainDescriptor) Declaration void Modify(SwapChainDescriptor descriptor) Parameters Type Name Description SwapChainDescriptor descriptor | Improve this Doc View Source Present() Declaration void Present()"
  },
  "api/Fluint.Layer.Graphics.API.ITexture.html": {
    "href": "api/Fluint.Layer.Graphics.API.ITexture.html",
    "title": "Interface ITexture | Fluint",
    "keywords": "Interface ITexture Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface ITexture : IModule, IDisposable Properties | Improve this Doc View Source Handle Declaration int Handle { get; } Property Value Type Description System.Int32 | Improve this Doc View Source View Declaration TextureView View { get; } Property Value Type Description TextureView Methods | Improve this Doc View Source SetData<T>(T[]) Declaration void SetData<T>(T[] data) where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Graphics.API.ITextureFactory.html": {
    "href": "api/Fluint.Layer.Graphics.API.ITextureFactory.html",
    "title": "Interface ITextureFactory | Fluint",
    "keywords": "Interface ITextureFactory Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface ITextureFactory : IDisposable Methods | Improve this Doc View Source CreateRenderTarget(Int32, Int32, Format) Declaration ITexture CreateRenderTarget(int width, int height, Format format) Parameters Type Name Description System.Int32 width System.Int32 height Format format Returns Type Description ITexture | Improve this Doc View Source CreateTexture(Int32, Int32, Format, Boolean) Declaration ITexture CreateTexture(int width, int height, Format format, bool createMipMaps = true) Parameters Type Name Description System.Int32 width System.Int32 height Format format System.Boolean createMipMaps Returns Type Description ITexture | Improve this Doc View Source CreateTextureFromFile(String, Boolean) Declaration ITexture CreateTextureFromFile(string filePath, bool createMipMaps) Parameters Type Name Description System.String filePath System.Boolean createMipMaps Returns Type Description ITexture"
  },
  "api/Fluint.Layer.Graphics.API.IVertexBuffer.html": {
    "href": "api/Fluint.Layer.Graphics.API.IVertexBuffer.html",
    "title": "Interface IVertexBuffer | Fluint",
    "keywords": "Interface IVertexBuffer Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IVertexBuffer : IDisposable Properties | Improve this Doc View Source VertexStride Declaration int VertexStride { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Initialize<T>(T[]) Declaration void Initialize<T>(T[] vertices) where T : struct Parameters Type Name Description T[] vertices Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Graphics.API.IVertexLayout-1.html": {
    "href": "api/Fluint.Layer.Graphics.API.IVertexLayout-1.html",
    "title": "Interface IVertexLayout<TVertexType> | Fluint",
    "keywords": "Interface IVertexLayout<TVertexType> Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public interface IVertexLayout<TVertexType> : IModule, IDisposable where TVertexType : struct Type Parameters Name Description TVertexType Properties | Improve this Doc View Source VertexSize Gets the size of the vertex. Declaration int VertexSize { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Calculate() Calculates the vertex size. Declaration void Calculate() | Improve this Doc View Source Disable() To disable the layout. Declaration void Disable() | Improve this Doc View Source Enable() To enable the layout. Declaration void Enable() | Improve this Doc View Source Load() To be called before enabling the layout. Declaration void Load()"
  },
  "api/Fluint.Layer.Graphics.API.PositionColorVertex.html": {
    "href": "api/Fluint.Layer.Graphics.API.PositionColorVertex.html",
    "title": "Struct PositionColorVertex | Fluint",
    "keywords": "Struct PositionColorVertex A data structure to be loaded into buffers, contains position, and color. Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct PositionColorVertex Constructors | Improve this Doc View Source PositionColorVertex(Vector3, Vector4) Declaration public PositionColorVertex(Vector3 position, Vector4 color) Parameters Type Name Description Vector3 position Vector4 color Fields | Improve this Doc View Source Color Declaration public Vector4 Color Field Value Type Description Vector4 | Improve this Doc View Source Position Declaration public Vector3 Position Field Value Type Description Vector3"
  },
  "api/Fluint.Layer.Graphics.API.PositionNormalUvtidVertex.html": {
    "href": "api/Fluint.Layer.Graphics.API.PositionNormalUvtidVertex.html",
    "title": "Struct PositionNormalUvtidVertex | Fluint",
    "keywords": "Struct PositionNormalUvtidVertex A data structure to be loaded into buffers, contains position, normal, UV, TextureID. Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct PositionNormalUvtidVertex Constructors | Improve this Doc View Source PositionNormalUvtidVertex(Vector3, Vector3, Vector2, UInt32) Declaration public PositionNormalUvtidVertex(Vector3 position, Vector3 normal, Vector2 uv, uint tid) Parameters Type Name Description Vector3 position Vector3 normal Vector2 uv System.UInt32 tid Fields | Improve this Doc View Source Normal Declaration public readonly Vector3 Normal Field Value Type Description Vector3 | Improve this Doc View Source Position Declaration public readonly Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source Tid Declaration public readonly uint Tid Field Value Type Description System.UInt32 | Improve this Doc View Source Uv Declaration public readonly Vector2 Uv Field Value Type Description Vector2"
  },
  "api/Fluint.Layer.Graphics.API.PositionNormalVertex.html": {
    "href": "api/Fluint.Layer.Graphics.API.PositionNormalVertex.html",
    "title": "Struct PositionNormalVertex | Fluint",
    "keywords": "Struct PositionNormalVertex A data structure to be loaded into buffers, contains position, and normal. Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct PositionNormalVertex Constructors | Improve this Doc View Source PositionNormalVertex(Vector3, Vector3) Declaration public PositionNormalVertex(Vector3 position, Vector3 normal) Parameters Type Name Description Vector3 position Vector3 normal Properties | Improve this Doc View Source Normal Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 | Improve this Doc View Source Position Declaration public Vector3 Position { get; } Property Value Type Description Vector3"
  },
  "api/Fluint.Layer.Graphics.API.PositionVertex.html": {
    "href": "api/Fluint.Layer.Graphics.API.PositionVertex.html",
    "title": "Struct PositionVertex | Fluint",
    "keywords": "Struct PositionVertex A data structure to be loaded into buffers, contains position. Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct PositionVertex Constructors | Improve this Doc View Source PositionVertex(Vector3) Declaration public PositionVertex(Vector3 position) Parameters Type Name Description Vector3 position Properties | Improve this Doc View Source Position Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3"
  },
  "api/Fluint.Layer.Graphics.API.PrimitiveTopology.html": {
    "href": "api/Fluint.Layer.Graphics.API.PrimitiveTopology.html",
    "title": "Enum PrimitiveTopology | Fluint",
    "keywords": "Enum PrimitiveTopology Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum PrimitiveTopology : int Fields Name Description LineList Lines NotAssigned TriangleList Extension Methods GLExtensions.ToOpenTK()"
  },
  "api/Fluint.Layer.Graphics.API.ProjectionMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.ProjectionMode.html",
    "title": "Enum ProjectionMode | Fluint",
    "keywords": "Enum ProjectionMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ProjectionMode : int Fields Name Description Orthogonal Prespective"
  },
  "api/Fluint.Layer.Graphics.API.SamplerAddressMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.SamplerAddressMode.html",
    "title": "Enum SamplerAddressMode | Fluint",
    "keywords": "Enum SamplerAddressMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum SamplerAddressMode : int Fields Name Description Border Clamp Mirror MirrorOnce Wrap"
  },
  "api/Fluint.Layer.Graphics.API.SamplerMipMapMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.SamplerMipMapMode.html",
    "title": "Enum SamplerMipMapMode | Fluint",
    "keywords": "Enum SamplerMipMapMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum SamplerMipMapMode : int Fields Name Description Linear Nearest"
  },
  "api/Fluint.Layer.Graphics.API.Shader.html": {
    "href": "api/Fluint.Layer.Graphics.API.Shader.html",
    "title": "Class Shader | Fluint",
    "keywords": "Class Shader Inheritance System.Object Shader Implements IShader IModule IDisposable Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public abstract class Shader : object, IShader, IModule, IDisposable Constructors | Improve this Doc View Source Shader() Declaration protected Shader() Properties | Improve this Doc View Source InputLayout Declaration public IInputLayout InputLayout { get; protected set; } Property Value Type Description IInputLayout | Improve this Doc View Source Macros Declaration protected Dictionary<string, string> Macros { get; } Property Value Type Description Dictionary < System.String , System.String > Methods | Improve this Doc View Source AddMacro(String, String) Declaration public void AddMacro(string name, string value) Parameters Type Name Description System.String name System.String value | Improve this Doc View Source CompileFile(ShaderStage, String, VertexType) Declaration public void CompileFile(ShaderStage shaderStage, string filePath, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType | Improve this Doc View Source CompileFileInternal(ShaderStage, String, VertexType) Declaration protected abstract void CompileFileInternal(ShaderStage shaderStage, string filePath, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType | Improve this Doc View Source CompileString(ShaderStage, String, VertexType) Declaration public void CompileString(ShaderStage shaderStage, string shaderText, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String shaderText VertexType vertexType | Improve this Doc View Source CompileStringInternal(ShaderStage, String, VertexType) Declaration protected abstract void CompileStringInternal(ShaderStage shaderStage, string filePath, VertexType vertexType) Parameters Type Name Description ShaderStage shaderStage System.String filePath VertexType vertexType | Improve this Doc View Source Dispose() Declaration public abstract void Dispose() Implements IShader IModule IDisposable"
  },
  "api/Fluint.Layer.Graphics.API.ShaderObject.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShaderObject.html",
    "title": "Struct ShaderObject | Fluint",
    "keywords": "Struct ShaderObject Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public struct ShaderObject Constructors | Improve this Doc View Source ShaderObject(ShaderObjectType, Object, String) Declaration public ShaderObject(ShaderObjectType type, object value, string tag) Parameters Type Name Description ShaderObjectType type System.Object value System.String tag Fields | Improve this Doc View Source Tag Declaration public string Tag Field Value Type Description System.String | Improve this Doc View Source Type Declaration public ShaderObjectType Type Field Value Type Description ShaderObjectType | Improve this Doc View Source Value Declaration public object Value Field Value Type Description System.Object"
  },
  "api/Fluint.Layer.Graphics.API.ShaderObjectType.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShaderObjectType.html",
    "title": "Enum ShaderObjectType | Fluint",
    "keywords": "Enum ShaderObjectType Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ShaderObjectType : int Fields Name Description Double Float Int Matrix4X4 Texture Uint Vector2 Vector3 Vector4"
  },
  "api/Fluint.Layer.Graphics.API.ShaderPacket.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShaderPacket.html",
    "title": "Class ShaderPacket | Fluint",
    "keywords": "Class ShaderPacket Inheritance System.Object ShaderPacket Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public class ShaderPacket : IReadOnlyList<ShaderObject> Constructors | Improve this Doc View Source ShaderPacket() Declaration public ShaderPacket() | Improve this Doc View Source ShaderPacket(IEnumerable<ShaderObject>, String) Declaration public ShaderPacket(IEnumerable<ShaderObject> value, string tag) Parameters Type Name Description IEnumerable < ShaderObject > value System.String tag Fields | Improve this Doc View Source ShaderObjects Declaration public ShaderObject[] ShaderObjects Field Value Type Description ShaderObject [] | Improve this Doc View Source Tag Declaration public string Tag Field Value Type Description System.String Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public ShaderObject this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description ShaderObject Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<ShaderObject> GetEnumerator() Returns Type Description IEnumerator < ShaderObject >"
  },
  "api/Fluint.Layer.Graphics.API.ShaderScope.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShaderScope.html",
    "title": "Enum ShaderScope | Fluint",
    "keywords": "Enum ShaderScope Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ShaderScope : int Fields Name Description GlobalScope MainFunction"
  },
  "api/Fluint.Layer.Graphics.API.ShaderStage.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShaderStage.html",
    "title": "Enum ShaderStage | Fluint",
    "keywords": "Enum ShaderStage Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ShaderStage : int Fields Name Description Compute Geometry Pixel Tesselation Vertex Extension Methods GL46Extensions.ToOpenTK()"
  },
  "api/Fluint.Layer.Graphics.API.ShadingMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.ShadingMode.html",
    "title": "Enum ShadingMode | Fluint",
    "keywords": "Enum ShadingMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum ShadingMode : int Fields Name Description Flat Smooth"
  },
  "api/Fluint.Layer.Graphics.API.SwapChainDescriptor.html": {
    "href": "api/Fluint.Layer.Graphics.API.SwapChainDescriptor.html",
    "title": "Class SwapChainDescriptor | Fluint",
    "keywords": "Class SwapChainDescriptor Inheritance System.Object SwapChainDescriptor Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public class SwapChainDescriptor : object Constructors | Improve this Doc View Source SwapChainDescriptor(Int32, Int32, Boolean, Boolean, SwapEffect) Declaration public SwapChainDescriptor(int width, int height, bool isWindowed, bool vSync, SwapEffect swapEffect) Parameters Type Name Description System.Int32 width System.Int32 height System.Boolean isWindowed System.Boolean vSync SwapEffect swapEffect Fields | Improve this Doc View Source Height Declaration public readonly int Height Field Value Type Description System.Int32 | Improve this Doc View Source SwapEffect Declaration public readonly SwapEffect SwapEffect Field Value Type Description SwapEffect | Improve this Doc View Source Width Declaration public readonly int Width Field Value Type Description System.Int32"
  },
  "api/Fluint.Layer.Graphics.API.SwapEffect.html": {
    "href": "api/Fluint.Layer.Graphics.API.SwapEffect.html",
    "title": "Enum SwapEffect | Fluint",
    "keywords": "Enum SwapEffect Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum SwapEffect : int Fields Name Description Discard FlipDiscard FlipSequential Sequential"
  },
  "api/Fluint.Layer.Graphics.API.TextureAddressMode.html": {
    "href": "api/Fluint.Layer.Graphics.API.TextureAddressMode.html",
    "title": "Enum TextureAddressMode | Fluint",
    "keywords": "Enum TextureAddressMode Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum TextureAddressMode : int Fields Name Description Border Clamp Mirror Wrap Extension Methods GLExtensions.ToOpenTK()"
  },
  "api/Fluint.Layer.Graphics.API.TextureView.html": {
    "href": "api/Fluint.Layer.Graphics.API.TextureView.html",
    "title": "Class TextureView | Fluint",
    "keywords": "Class TextureView Inheritance System.Object TextureView Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public class TextureView : object Fields | Improve this Doc View Source Handle Declaration public int Handle Field Value Type Description System.Int32 Properties | Improve this Doc View Source Type Declaration public TextureViewType Type { get; protected set; } Property Value Type Description TextureViewType"
  },
  "api/Fluint.Layer.Graphics.API.TextureViewType.html": {
    "href": "api/Fluint.Layer.Graphics.API.TextureViewType.html",
    "title": "Enum TextureViewType | Fluint",
    "keywords": "Enum TextureViewType Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum TextureViewType : int Fields Name Description DepthStencil RenderTarget ShaderResource"
  },
  "api/Fluint.Layer.Graphics.API.VertexLayoutAttribute.html": {
    "href": "api/Fluint.Layer.Graphics.API.VertexLayoutAttribute.html",
    "title": "Class VertexLayoutAttribute | Fluint",
    "keywords": "Class VertexLayoutAttribute Inheritance System.Object VertexLayoutAttribute Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public class VertexLayoutAttribute : object Constructors | Improve this Doc View Source VertexLayoutAttribute(String, VertexLayoutAttributeType, Int32) Declaration public VertexLayoutAttribute(string name, VertexLayoutAttributeType attributeType, int componentsCount) Parameters Type Name Description System.String name VertexLayoutAttributeType attributeType System.Int32 componentsCount Properties | Improve this Doc View Source AttributeType Declaration public VertexLayoutAttributeType AttributeType { get; set; } Property Value Type Description VertexLayoutAttributeType | Improve this Doc View Source ComponentsCount Declaration public int ComponentsCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.Graphics.API.VertexLayoutAttributeType.html": {
    "href": "api/Fluint.Layer.Graphics.API.VertexLayoutAttributeType.html",
    "title": "Enum VertexLayoutAttributeType | Fluint",
    "keywords": "Enum VertexLayoutAttributeType Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum VertexLayoutAttributeType : int Fields Name Description Byte Double Float Int Short UnsignedByte UnsignedInt UnsignedShort"
  },
  "api/Fluint.Layer.Graphics.API.VertexType.html": {
    "href": "api/Fluint.Layer.Graphics.API.VertexType.html",
    "title": "Enum VertexType | Fluint",
    "keywords": "Enum VertexType Namespace : Fluint.Layer.Graphics.API Assembly : Fluint.Layer.dll Syntax public enum VertexType : int Fields Name Description Position PositionColor PositionTexture PositionTextureNormalTangent Unknown"
  },
  "api/Fluint.Layer.Graphics.ECS.html": {
    "href": "api/Fluint.Layer.Graphics.ECS.html",
    "title": "Namespace Fluint.Layer.Graphics.ECS | Fluint",
    "keywords": "Namespace Fluint.Layer.Graphics.ECS Classes IObject Interfaces IScene"
  },
  "api/Fluint.Layer.Graphics.ECS.IObject.html": {
    "href": "api/Fluint.Layer.Graphics.ECS.IObject.html",
    "title": "Class IObject | Fluint",
    "keywords": "Class IObject Inheritance System.Object IObject Namespace : Fluint.Layer.Graphics.ECS Assembly : Fluint.Layer.dll Syntax public class IObject : object"
  },
  "api/Fluint.Layer.Graphics.ECS.IScene.html": {
    "href": "api/Fluint.Layer.Graphics.ECS.IScene.html",
    "title": "Interface IScene | Fluint",
    "keywords": "Interface IScene Namespace : Fluint.Layer.Graphics.ECS Assembly : Fluint.Layer.dll Syntax public interface IScene"
  },
  "api/Fluint.Layer.Graphics.html": {
    "href": "api/Fluint.Layer.Graphics.html",
    "title": "Namespace Fluint.Layer.Graphics | Fluint",
    "keywords": "Namespace Fluint.Layer.Graphics Interfaces ICamera ICanvas IMesh IMeshFactory IRenderable IRenderer"
  },
  "api/Fluint.Layer.Graphics.ICamera.html": {
    "href": "api/Fluint.Layer.Graphics.ICamera.html",
    "title": "Interface ICamera | Fluint",
    "keywords": "Interface ICamera Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface ICamera : IModule Properties | Improve this Doc View Source Fov Declaration float Fov { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Front Declaration Vector3 Front { get; } Property Value Type Description Vector3 | Improve this Doc View Source Pitch Declaration float Pitch { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Position Declaration Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source ProjectionMode Declaration ProjectionMode ProjectionMode { get; set; } Property Value Type Description ProjectionMode | Improve this Doc View Source Right Declaration Vector3 Right { get; } Property Value Type Description Vector3 | Improve this Doc View Source Up Declaration Vector3 Up { get; } Property Value Type Description Vector3 | Improve this Doc View Source Viewport Declaration ViewportF Viewport { get; set; } Property Value Type Description ViewportF | Improve this Doc View Source Yaw Declaration float Yaw { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Zoom Declaration float Zoom { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source GetProjectionMatrix() Declaration Matrix GetProjectionMatrix() Returns Type Description Matrix | Improve this Doc View Source GetViewMatrix() Declaration Matrix GetViewMatrix() Returns Type Description Matrix"
  },
  "api/Fluint.Layer.Graphics.ICanvas.html": {
    "href": "api/Fluint.Layer.Graphics.ICanvas.html",
    "title": "Interface ICanvas | Fluint",
    "keywords": "Interface ICanvas Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface ICanvas : IModule Properties | Improve this Doc View Source Height Declaration int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Pixels Declaration Color[] Pixels { get; } Property Value Type Description Color [] | Improve this Doc View Source Width Declaration int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration void Clear() | Improve this Doc View Source ConvertIndex(Int32, Int32) Declaration int ConvertIndex(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Returns Type Description System.Int32 | Improve this Doc View Source DrawCircle(Vector2i, Int32, Color) Declaration void DrawCircle(Vector2i location, int radius, Color color) Parameters Type Name Description Vector2i location System.Int32 radius Color color | Improve this Doc View Source DrawCircle(Vector2i, Int32, Func<Vector2i, Color>) Declaration void DrawCircle(Vector2i location, int radius, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location System.Int32 radius Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledCircle(Vector2i, Int32, Color) Declaration void DrawFilledCircle(Vector2i location, int radius, Color color) Parameters Type Name Description Vector2i location System.Int32 radius Color color | Improve this Doc View Source DrawFilledCircle(Vector2i, Int32, Func<Vector2i, Color>) Declaration void DrawFilledCircle(Vector2i location, int radius, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location System.Int32 radius Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledQuad(Vector2i, Vector2i, Vector2i, Vector2i, Color) Declaration void DrawFilledQuad(Vector2i v1, Vector2i v2, Vector2i v3, Vector2i v4, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Vector2i v4 Color color | Improve this Doc View Source DrawFilledQuad(Vector2i, Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawFilledQuad(Vector2i v1, Vector2i v2, Vector2i v3, Vector2i v4, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Vector2i v4 Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledRectangle(Vector2i, Vector2i, Color) Declaration void DrawFilledRectangle(Vector2i location, Vector2i size, Color color) Parameters Type Name Description Vector2i location Vector2i size Color color | Improve this Doc View Source DrawFilledRectangle(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawFilledRectangle(Vector2i location, Vector2i size, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location Vector2i size Func < Vector2i , Color > color | Improve this Doc View Source DrawFilledTriangle(Vector2i, Vector2i, Vector2i, Color) Declaration void DrawFilledTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawFilledTriangle(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawFilledTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source DrawLine(Vector2i, Vector2i, Color) Declaration void DrawLine(Vector2i start, Vector2i end, Color color) Parameters Type Name Description Vector2i start Vector2i end Color color | Improve this Doc View Source DrawLine(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawLine(Vector2i start, Vector2i end, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i start Vector2i end Func < Vector2i , Color > color | Improve this Doc View Source DrawQuad(Vector2i, Vector2i, Vector2i, Color) Declaration void DrawQuad(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawQuad(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawQuad(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source DrawRectangle(Vector2i, Vector2i, Color) Declaration void DrawRectangle(Vector2i location, Vector2i size, Color color) Parameters Type Name Description Vector2i location Vector2i size Color color | Improve this Doc View Source DrawRectangle(Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawRectangle(Vector2i location, Vector2i size, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i location Vector2i size Func < Vector2i , Color > color | Improve this Doc View Source DrawShape(Color, Vector2i[]) Declaration void DrawShape(Color color, params Vector2i[] points) Parameters Type Name Description Color color Vector2i [] points | Improve this Doc View Source DrawShape(Func<Vector2i, Color>, Vector2i[]) Declaration void DrawShape(Func<Vector2i, Color> color, params Vector2i[] points) Parameters Type Name Description Func < Vector2i , Color > color Vector2i [] points | Improve this Doc View Source DrawTriangle(Vector2i, Vector2i, Vector2i, Color) Declaration void DrawTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Color color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Color color | Improve this Doc View Source DrawTriangle(Vector2i, Vector2i, Vector2i, Func<Vector2i, Color>) Declaration void DrawTriangle(Vector2i v1, Vector2i v2, Vector2i v3, Func<Vector2i, Color> color) Parameters Type Name Description Vector2i v1 Vector2i v2 Vector2i v3 Func < Vector2i , Color > color | Improve this Doc View Source Get(Int32, Int32) Declaration Color Get(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Returns Type Description Color | Improve this Doc View Source InitializeCanvas(Int32, Int32) Declaration void InitializeCanvas(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source Set(Int32, Int32, Color) Declaration void Set(int x, int y, Color color) Parameters Type Name Description System.Int32 x System.Int32 y Color color"
  },
  "api/Fluint.Layer.Graphics.IMesh.html": {
    "href": "api/Fluint.Layer.Graphics.IMesh.html",
    "title": "Interface IMesh | Fluint",
    "keywords": "Interface IMesh Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface IMesh : IModule Properties | Improve this Doc View Source VertexBuffer Declaration IVertexBuffer VertexBuffer { get; } Property Value Type Description IVertexBuffer"
  },
  "api/Fluint.Layer.Graphics.IMeshFactory.html": {
    "href": "api/Fluint.Layer.Graphics.IMeshFactory.html",
    "title": "Interface IMeshFactory | Fluint",
    "keywords": "Interface IMeshFactory Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface IMeshFactory Methods | Improve this Doc View Source CreateMesh() Declaration IMesh CreateMesh() Returns Type Description IMesh | Improve this Doc View Source CreateUnitBox() Declaration IMesh CreateUnitBox() Returns Type Description IMesh | Improve this Doc View Source CreateUnitSphere() Declaration IMesh CreateUnitSphere() Returns Type Description IMesh"
  },
  "api/Fluint.Layer.Graphics.IRenderable.html": {
    "href": "api/Fluint.Layer.Graphics.IRenderable.html",
    "title": "Interface IRenderable | Fluint",
    "keywords": "Interface IRenderable Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface IRenderable Properties | Improve this Doc View Source Type Declaration VertexType Type { get; } Property Value Type Description VertexType Methods | Improve this Doc View Source AddTo(IRenderer) Declaration void AddTo(IRenderer renderer) Parameters Type Name Description IRenderer renderer"
  },
  "api/Fluint.Layer.Graphics.IRenderer.html": {
    "href": "api/Fluint.Layer.Graphics.IRenderer.html",
    "title": "Interface IRenderer | Fluint",
    "keywords": "Interface IRenderer Namespace : Fluint.Layer.Graphics Assembly : Fluint.Layer.dll Syntax public interface IRenderer Properties | Improve this Doc View Source CommandList Declaration ICommandList CommandList { get; } Property Value Type Description ICommandList Methods | Improve this Doc View Source End() Declaration void End() | Improve this Doc View Source Push() Declaration void Push() | Improve this Doc View Source Start() Declaration void Start()"
  },
  "api/Fluint.Layer.html": {
    "href": "api/Fluint.Layer.html",
    "title": "Namespace Fluint.Layer | Fluint",
    "keywords": "Namespace Fluint.Layer Classes ModuleAttribute An attribute containing the name and the description of the module. ModulesManager Interfaces IModule A piece of software that enables certain behavior in fluint. IRuntime"
  },
  "api/Fluint.Layer.IModule.html": {
    "href": "api/Fluint.Layer.IModule.html",
    "title": "Interface IModule | Fluint",
    "keywords": "Interface IModule A piece of software that enables certain behavior in fluint. Namespace : Fluint.Layer Assembly : Fluint.Layer.dll Syntax public interface IModule"
  },
  "api/Fluint.Layer.Input.Binding.html": {
    "href": "api/Fluint.Layer.Input.Binding.html",
    "title": "Class Binding | Fluint",
    "keywords": "Class Binding Inheritance System.Object Binding Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public class Binding : object Properties | Improve this Doc View Source MainCombination Declaration public Key[] MainCombination { get; set; } Property Value Type Description Key [] | Improve this Doc View Source SecondaryCombination Declaration public Key[] SecondaryCombination { get; set; } Property Value Type Description Key [] | Improve this Doc View Source Tag Declaration public string Tag { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Fluint.Layer.Input.html": {
    "href": "api/Fluint.Layer.Input.html",
    "title": "Namespace Fluint.Layer.Input | Fluint",
    "keywords": "Namespace Fluint.Layer.Input Classes Binding Interfaces IBindingsManager an interface for managing keybinds. IInputManager An Interface for managing the input. IMouseCapture Enums InputState Key Specifies key codes and modifiers in US keyboard layout. MouseButton Specifies the buttons of a mouse."
  },
  "api/Fluint.Layer.Input.IBindingsManager.html": {
    "href": "api/Fluint.Layer.Input.IBindingsManager.html",
    "title": "Interface IBindingsManager | Fluint",
    "keywords": "Interface IBindingsManager an interface for managing keybinds. Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public interface IBindingsManager : IModule Methods | Improve this Doc View Source Get(Binding) Gets the state of the binding. Declaration InputState Get(Binding binding) Parameters Type Name Description Binding binding the actual binding Returns Type Description InputState the input binding state | Improve this Doc View Source Get(String) Gets the state of the binding. Declaration InputState Get(string binding) Parameters Type Name Description System.String binding the string represting the binding's tag. Returns Type Description InputState the input binding state | Improve this Doc View Source GetBinding(String) Gets the binding provided it's string tag. Declaration Binding GetBinding(string bindName) Parameters Type Name Description System.String bindName The actual binding tag. Returns Type Description Binding | Improve this Doc View Source GetBindings() Gets a list of all bindings bound. Declaration IEnumerable<Binding> GetBindings() Returns Type Description IEnumerable < Binding > | Improve this Doc View Source GetCollection(String) Gets a binding collection with specified tag. Declaration IEnumerable<Binding> GetCollection(string tag) Parameters Type Name Description System.String tag a tag to get the collection by. Returns Type Description IEnumerable < Binding > | Improve this Doc View Source GetState(Binding) Gets the state of the binding. Declaration InputState GetState(Binding binding) Parameters Type Name Description Binding binding The provided binding. Returns Type Description InputState The state of provided binding. | Improve this Doc View Source GetState(String) Gets the state of the binding. Declaration InputState GetState(string bindName) Parameters Type Name Description System.String bindName String name of binding, gets translated into binding later. Returns Type Description InputState The state of keys in the binding. | Improve this Doc View Source Load(IInputManager) Initializes the bindings manager. Declaration void Load(IInputManager inputManager) Parameters Type Name Description IInputManager inputManager an input manager to use for checking input. | Improve this Doc View Source LoadBinding(Binding) Loads a specific binding. Declaration void LoadBinding(Binding binding) Parameters Type Name Description Binding binding the singular binding to load. | Improve this Doc View Source LoadBindings(IEnumerable<Binding>) Loads a collection of bindings. Declaration void LoadBindings(IEnumerable<Binding> bindings) Parameters Type Name Description IEnumerable < Binding > bindings the collection of bindings to load. | Improve this Doc View Source LoadCollection(String) Loads a binding collection with specified tag. Declaration void LoadCollection(string collectionTag) Parameters Type Name Description System.String collectionTag a tag to get the collection by. | Improve this Doc View Source SaveCurrentCollection(String) Saves the current collection. Declaration void SaveCurrentCollection(string tag) Parameters Type Name Description System.String tag the tag to save collection by. Events | Improve this Doc View Source BindingStateUpdated Declaration event Action<InputState, Binding> BindingStateUpdated Event Type Type Description Action < InputState , Binding >"
  },
  "api/Fluint.Layer.Input.IInputManager.html": {
    "href": "api/Fluint.Layer.Input.IInputManager.html",
    "title": "Interface IInputManager | Fluint",
    "keywords": "Interface IInputManager An Interface for managing the input. Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public interface IInputManager : IModule Properties | Improve this Doc View Source LastMouseLocation Declaration Vector2 LastMouseLocation { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseLocation Gets the location of the mouse. Declaration Vector2 MouseLocation { get; set; } Property Value Type Description Vector2 the location of the mouse. | Improve this Doc View Source MouseMovementDelta Declaration Vector2 MouseMovementDelta { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseScroll Declaration Vector2 MouseScroll { get; } Property Value Type Description Vector2 | Improve this Doc View Source MouseScrollDelta Declaration Vector2 MouseScrollDelta { get; } Property Value Type Description Vector2 Methods | Improve this Doc View Source IsKeyPressed(Key) Declaration bool IsKeyPressed(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source IsKeyReleased(Key) Declaration bool IsKeyReleased(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source IsMouseButtonPressed(MouseButton) Declaration bool IsMouseButtonPressed(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean | Improve this Doc View Source IsMouseButtonReleased(MouseButton) Declaration bool IsMouseButtonReleased(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean | Improve this Doc View Source Load(IWindowProvider) Declaration void Load(IWindowProvider bindingContext) Parameters Type Name Description IWindowProvider bindingContext | Improve this Doc View Source State(Key) Declaration InputState State(Key key) Parameters Type Name Description Key key Returns Type Description InputState | Improve this Doc View Source State(MouseButton) Declaration InputState State(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description InputState | Improve this Doc View Source WasKeyPressed(Key) Declaration bool WasKeyPressed(Key key) Parameters Type Name Description Key key Returns Type Description System.Boolean | Improve this Doc View Source WasMouseButtonPressed(MouseButton) Declaration bool WasMouseButtonPressed(MouseButton button) Parameters Type Name Description MouseButton button Returns Type Description System.Boolean"
  },
  "api/Fluint.Layer.Input.IMouseCapture.html": {
    "href": "api/Fluint.Layer.Input.IMouseCapture.html",
    "title": "Interface IMouseCapture | Fluint",
    "keywords": "Interface IMouseCapture Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public interface IMouseCapture : IModule Properties | Improve this Doc View Source X Declaration int X { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Y Declaration int Y { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Begin(IWindow) Declaration void Begin(IWindow window) Parameters Type Name Description IWindow window | Improve this Doc View Source Capture() Declaration void Capture() | Improve this Doc View Source Update() Declaration void Update()"
  },
  "api/Fluint.Layer.Input.InputState.html": {
    "href": "api/Fluint.Layer.Input.InputState.html",
    "title": "Enum InputState | Fluint",
    "keywords": "Enum InputState Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public enum InputState : int Fields Name Description Press Release Repeat"
  },
  "api/Fluint.Layer.Input.Key.html": {
    "href": "api/Fluint.Layer.Input.Key.html",
    "title": "Enum Key | Fluint",
    "keywords": "Enum Key Specifies key codes and modifiers in US keyboard layout. Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public enum Key : int Fields Name Description A The A key. Apostrophe The apostrophe key. B The B key. Backslash The backslash. Backspace The backspace key. C The C key. CapsLock The caps lock key. Comma The comma key. D The D key. D0 The 0 key. D1 The 1 key. D2 The 2 key. D3 The 3 key. D4 The 4 key. D5 The 5 key. D6 The 6 key. D7 The 7 key. D8 The 8 key. D9 The 9 key. Delete The delete key. Down The down arrow key. E The E key. End The end key. Enter The enter key. Equal The equal key. Escape The escape key. F The F key. F1 The F1 key. F10 The F10 key. F11 The F11 key. F12 The F12 key. F13 The F13 key. F14 The F14 key. F15 The F15 key. F16 The F16 key. F17 The F17 key. F18 The F18 key. F19 The F19 key. F2 The F2 key. F20 The F20 key. F21 The F21 key. F22 The F22 key. F23 The F23 key. F24 The F24 key. F25 The F25 key. F3 The F3 key. F4 The F4 key. F5 The F5 key. F6 The F6 key. F7 The F7 key. F8 The F8 key. F9 The F9 key. G The G key. GraveAccent The grave accent key. H The H key. Home The home key. I The I key. Insert The insert key. J The J key. K The K key. KeyPad0 The 0 key on the key pad. KeyPad1 The 1 key on the key pad. KeyPad2 The 2 key on the key pad. KeyPad3 The 3 key on the key pad. KeyPad4 The 4 key on the key pad. KeyPad5 The 5 key on the key pad. KeyPad6 The 6 key on the key pad. KeyPad7 The 7 key on the key pad. KeyPad8 The 8 key on the key pad. KeyPad9 The 9 key on the key pad. KeyPadAdd The add key on the key pad. KeyPadDecimal The decimal key on the key pad. KeyPadDivide The divide key on the key pad. KeyPadEnter The enter key on the key pad. KeyPadEqual The equal key on the key pad. KeyPadMultiply The multiply key on the key pad. KeyPadSubtract The subtract key on the key pad. L The L key. LastKey The last valid key in this enum. Left The left arrow key. LeftAlt The left alt key. LeftBracket The left bracket(opening bracket) key. LeftControl The left control key. LeftShift The left shift key. LeftSuper The left super key. M The M key. Menu The menu key. Minus The minus key. N The N key. NumLock The num lock key. O The O key. P The P key. PageDown The page down key. PageUp The page up key. Pause The pause key. Period The period key. PrintScreen The print screen key. Q The Q key. R The R key. Right The right arrow key. RightAlt The right alt key. RightBracket The right bracket(closing bracket) key. RightControl The right control key. RightShift The right shift key. RightSuper The right super key. S The S key. ScrollLock The scroll lock key. Semicolon The semicolon key. Slash The slash key. Space The spacebar key. T The T key. Tab The tab key. U The U key. Unknown An unknown key. Up The up arrow key. V The V key. W The W key. X The X key. Y The Y key. Z The Z key."
  },
  "api/Fluint.Layer.Input.MouseButton.html": {
    "href": "api/Fluint.Layer.Input.MouseButton.html",
    "title": "Enum MouseButton | Fluint",
    "keywords": "Enum MouseButton Specifies the buttons of a mouse. Namespace : Fluint.Layer.Input Assembly : Fluint.Layer.dll Syntax public enum MouseButton : int Fields Name Description Button1 The first button. Button2 The second button. Button3 The third button. Button4 The fourth button. Button5 The fifth button. Button6 The sixth button. Button7 The seventh button. Button8 The eighth button. Button9 The ninth button. Last The highest mouse button available. Left The left mouse button. This corresponds to Button1 . Middle The middle mouse button. This corresponds to Button3 . Right The right mouse button. This corresponds to Button2 ."
  },
  "api/Fluint.Layer.IO.html": {
    "href": "api/Fluint.Layer.IO.html",
    "title": "Namespace Fluint.Layer.IO | Fluint",
    "keywords": "Namespace Fluint.Layer.IO Interfaces IExporter IImporter IIoManager"
  },
  "api/Fluint.Layer.IO.IExporter.html": {
    "href": "api/Fluint.Layer.IO.IExporter.html",
    "title": "Interface IExporter | Fluint",
    "keywords": "Interface IExporter Namespace : Fluint.Layer.IO Assembly : Fluint.Layer.dll Syntax public interface IExporter : IModule Properties | Improve this Doc View Source FileExtenstions Declaration string[] FileExtenstions { get; } Property Value Type Description System.String [] Methods | Improve this Doc View Source Export(IMesh[], String) Declaration void Export(IMesh[] meshes, string fileName) Parameters Type Name Description IMesh [] meshes System.String fileName"
  },
  "api/Fluint.Layer.IO.IImporter.html": {
    "href": "api/Fluint.Layer.IO.IImporter.html",
    "title": "Interface IImporter | Fluint",
    "keywords": "Interface IImporter Namespace : Fluint.Layer.IO Assembly : Fluint.Layer.dll Syntax public interface IImporter : IModule Properties | Improve this Doc View Source FileExtenstions Declaration string[] FileExtenstions { get; } Property Value Type Description System.String [] Methods | Improve this Doc View Source Import(String) Declaration IMesh[] Import(string fileName) Parameters Type Name Description System.String fileName Returns Type Description IMesh []"
  },
  "api/Fluint.Layer.IO.IIoManager.html": {
    "href": "api/Fluint.Layer.IO.IIoManager.html",
    "title": "Interface IIoManager | Fluint",
    "keywords": "Interface IIoManager Namespace : Fluint.Layer.IO Assembly : Fluint.Layer.dll Syntax public interface IIoManager : IModule Methods | Improve this Doc View Source Export(String, IMesh[], String) Declaration void Export(string fileName, IMesh[] meshes, string format = \"\") Parameters Type Name Description System.String fileName IMesh [] meshes System.String format | Improve this Doc View Source Import(String) Declaration IMesh[] Import(string fileName) Parameters Type Name Description System.String fileName Returns Type Description IMesh [] | Improve this Doc View Source QueryExportableFormats() Declaration string[] QueryExportableFormats() Returns Type Description System.String [] | Improve this Doc View Source QueryImportableFormats() Declaration string[] QueryImportableFormats() Returns Type Description System.String []"
  },
  "api/Fluint.Layer.IRuntime.html": {
    "href": "api/Fluint.Layer.IRuntime.html",
    "title": "Interface IRuntime | Fluint",
    "keywords": "Interface IRuntime Namespace : Fluint.Layer Assembly : Fluint.Layer.dll Syntax public interface IRuntime Properties | Improve this Doc View Source Id Declaration int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Manifest Declaration StartupManifest Manifest { get; } Property Value Type Description Fluint.Layer.StartupManifest | Improve this Doc View Source Packet Declaration ModulePacket Packet { get; } Property Value Type Description ModulePacket | Improve this Doc View Source Parent Declaration InstanceManager Parent { get; } Property Value Type Description InstanceManager Methods | Improve this Doc View Source Create(Int32, StartupManifest, ModulePacket, InstanceManager) Declaration void Create(int id, StartupManifest manifest, ModulePacket packet, InstanceManager parent) Parameters Type Name Description System.Int32 id Fluint.Layer.StartupManifest manifest ModulePacket packet InstanceManager parent | Improve this Doc View Source Kill() Declaration void Kill() | Improve this Doc View Source Start() Declaration void Start()"
  },
  "api/Fluint.Layer.Localization.html": {
    "href": "api/Fluint.Layer.Localization.html",
    "title": "Namespace Fluint.Layer.Localization | Fluint",
    "keywords": "Namespace Fluint.Layer.Localization Interfaces ILocalizationManager"
  },
  "api/Fluint.Layer.Localization.ILocalizationManager.html": {
    "href": "api/Fluint.Layer.Localization.ILocalizationManager.html",
    "title": "Interface ILocalizationManager | Fluint",
    "keywords": "Interface ILocalizationManager Namespace : Fluint.Layer.Localization Assembly : Fluint.Layer.dll Syntax public interface ILocalizationManager : IModule Properties | Improve this Doc View Source ActiveLanguage Declaration string ActiveLanguage { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateRecord(String, String) Declaration void CreateRecord(string recordName, string recordData) Parameters Type Name Description System.String recordName System.String recordData | Improve this Doc View Source Fetch(String) Declaration string Fetch(string recordName) Parameters Type Name Description System.String recordName Returns Type Description System.String | Improve this Doc View Source FetchLanguages() Declaration string[] FetchLanguages() Returns Type Description System.String []"
  },
  "api/Fluint.Layer.Mathematics.AngleSingle.html": {
    "href": "api/Fluint.Layer.Mathematics.AngleSingle.html",
    "title": "Struct AngleSingle | Fluint",
    "keywords": "Struct AngleSingle Represents a unit independent angle using a single-precision floating-point internal representation. Implements IComparable IComparable < AngleSingle > IEquatable < AngleSingle > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct AngleSingle : IComparable, IComparable<AngleSingle>, IEquatable<AngleSingle>, IFormattable Constructors | Improve this Doc View Source AngleSingle(Single, AngleType) Initializes a new instance of the SharpDX.AngleSingle structure with the given unit dependant angle and unit type. Declaration public AngleSingle(float angle, AngleType type) Parameters Type Name Description System.Single angle A unit dependant measure of the angle. AngleType type The type of unit the angle argument is. | Improve this Doc View Source AngleSingle(Single, Single) Initializes a new instance of the SharpDX.AngleSingle structure using the arc length formula (θ = s/r). Declaration public AngleSingle(float arcLength, float radius) Parameters Type Name Description System.Single arcLength The measure of the arc. System.Single radius The radius of the circle. Fields | Improve this Doc View Source Degree A value that specifies the size of a single degree. Declaration public const float Degree = null Field Value Type Description System.Single | Improve this Doc View Source Gradian A value that specifies the size of a single gradian. Declaration public const float Gradian = null Field Value Type Description System.Single | Improve this Doc View Source Milliradian A value that specifies the size of a single milliradian. Declaration public const float Milliradian = null Field Value Type Description System.Single | Improve this Doc View Source Minute A value that specifies the size of a single minute. Declaration public const float Minute = null Field Value Type Description System.Single | Improve this Doc View Source Radian A value that specifies the size of a single radian. Declaration public const float Radian = null Field Value Type Description System.Single | Improve this Doc View Source Second A value that specifies the size of a single second. Declaration public const float Second = null Field Value Type Description System.Single Properties | Improve this Doc View Source Complement Gets a SharpDX.AngleSingle instance that complements this angle (i.e. the two angles add to 90°). Declaration public AngleSingle Complement { get; } Property Value Type Description AngleSingle | Improve this Doc View Source Degrees Gets or sets the total number of degrees this SharpDX.AngleSingle represents. Declaration public float Degrees { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FullRotationAngle Gets a new SharpDX.AngleSingle instance that represents the full rotation angle (i.e. 360° or 2π). Declaration public static AngleSingle FullRotationAngle { get; } Property Value Type Description AngleSingle | Improve this Doc View Source Gradians Gets or sets the total number of gradians this SharpDX.AngleSingle represents. Declaration public float Gradians { get; set; } Property Value Type Description System.Single | Improve this Doc View Source IsAcute Gets a System.Boolean that determines whether this SharpDX.Angle is an acute angle (i.e. less than 90° but greater than 0°). Declaration public bool IsAcute { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFullRotation Gets a System.Boolean that determines whether this SharpDX.Angle is a full rotation angle (i.e. 360° or 2π). Declaration public bool IsFullRotation { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOblique Gets a System.Boolean that determines whether this SharpDX.Angle is an oblique angle (i.e. is not 90° or a multiple of 90°). Declaration public bool IsOblique { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsObtuse Gets a System.Boolean that determines whether this SharpDX.Angle is an obtuse angle (i.e. greater than 90° but less than 180°). Declaration public bool IsObtuse { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReflex Gets a System.Boolean that determines whether this SharpDX.Angle is a reflex angle (i.e. greater than 180° but less than 360°). Declaration public bool IsReflex { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRight Gets a System.Boolean that determines whether this SharpDX.Angle is a right angle (i.e. 90° or π/2). Declaration public bool IsRight { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsStraight Gets a System.Boolean that determines whether this SharpDX.Angle is a straight angle (i.e. 180° or π). Declaration public bool IsStraight { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Milliradians Gets or sets the total number of milliradians this SharpDX.AngleSingle represents. One milliradian is equal to 1/(2000π). Declaration public float Milliradians { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Minutes Gets or sets the minutes component of the degrees this SharpDX.AngleSingle represents. When setting the minutes, if the value is in the range (-60, 60) the whole degrees are not changed; otherwise, the whole degrees may be changed. Fractional values may set the seconds component. Declaration public float Minutes { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Radians Gets or sets the total number of radians this SharpDX.AngleSingle represents. Declaration public float Radians { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Revolutions Gets or sets the total number of revolutions this SharpDX.AngleSingle represents. Declaration public float Revolutions { get; set; } Property Value Type Description System.Single | Improve this Doc View Source RightAngle Gets a new SharpDX.AngleSingle instance that represents the right angle (i.e. 90° or π/2). Declaration public static AngleSingle RightAngle { get; } Property Value Type Description AngleSingle | Improve this Doc View Source Seconds Gets or sets the seconds of the degrees this SharpDX.AngleSingle represents. When setting the seconds, if the value is in the range (-60, 60) the whole minutes or whole degrees are not changed; otherwise, the whole minutes or whole degrees may be changed. Declaration public float Seconds { get; set; } Property Value Type Description System.Single | Improve this Doc View Source StraightAngle Gets a new SharpDX.AngleSingle instance that represents the straight angle (i.e. 180° or π). Declaration public static AngleSingle StraightAngle { get; } Property Value Type Description AngleSingle | Improve this Doc View Source Supplement Gets a SharpDX.AngleSingle instance that supplements this angle (i.e. the two angles add to 180°). Declaration public AngleSingle Supplement { get; } Property Value Type Description AngleSingle | Improve this Doc View Source ZeroAngle Gets a new SharpDX.AngleSingle instance that represents the zero angle (i.e. 0°). Declaration public static AngleSingle ZeroAngle { get; } Property Value Type Description AngleSingle Methods | Improve this Doc View Source Add(AngleSingle, AngleSingle) Adds two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle Add(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to add. AngleSingle right The second object to add. Returns Type Description AngleSingle The value of the two objects added together. | Improve this Doc View Source CompareTo(AngleSingle) Compares this instance to a second SharpDX.AngleSingle and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object. Declaration public int CompareTo(AngleSingle other) Parameters Type Name Description AngleSingle other The object to compare. Returns Type Description System.Int32 A signed integer that indicates the relationship of the current instance to the obj parameter. If the value is less than zero, the current instance is less than the other. If the value is zero, the current instance is equal to the other. If the value is greater than zero, the current instance is greater than the other. | Improve this Doc View Source CompareTo(Object) Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object. Declaration public int CompareTo(object other) Parameters Type Name Description System.Object other The object to compare. Returns Type Description System.Int32 A signed integer that indicates the relationship of the current instance to the obj parameter. If the value is less than zero, the current instance is less than the other. If the value is zero, the current instance is equal to the other. If the value is greater than zero, the current instance is greater than the other. | Improve this Doc View Source Divide(AngleSingle, AngleSingle) Divides two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle Divide(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The numerator object. AngleSingle right The denominator object. Returns Type Description AngleSingle The value of the two objects divided. | Improve this Doc View Source Equals(AngleSingle) Returns a value that indicates whether the current instance and a specified SharpDX.AngleSingle object have the same value. Declaration public bool Equals(AngleSingle other) Parameters Type Name Description AngleSingle other The object to compare. Returns Type Description System.Boolean Returns true if this SharpDX.AngleSingle object and another have the same value; otherwise, false. | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance and a specified object have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean Returns true if the obj parameter is a SharpDX.AngleSingle object or a type capable of implicit conversion to a SharpDX.AngleSingle value, and its value is equal to the value of the current SharpDX.Angle object; otherwise, false. | Improve this Doc View Source GetHashCode() Returns a hash code for this SharpDX.AngleSingle instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. | Improve this Doc View Source Max(AngleSingle, AngleSingle) Compares two SharpDX.AngleSingle instances and returns the greater angle. Declaration public static AngleSingle Max(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first SharpDX.AngleSingle instance to compare. AngleSingle right The second SharpDX.AngleSingle instance to compare. Returns Type Description AngleSingle The greater of the two given SharpDX.AngleSingle instances. | Improve this Doc View Source Min(AngleSingle, AngleSingle) Compares two SharpDX.AngleSingle instances and returns the smaller angle. Declaration public static AngleSingle Min(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first SharpDX.AngleSingle instance to compare. AngleSingle right The second SharpDX.AngleSingle instance to compare. Returns Type Description AngleSingle The smaller of the two given SharpDX.AngleSingle instances. | Improve this Doc View Source Multiply(AngleSingle, AngleSingle) Multiplies two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle Multiply(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to multiply. AngleSingle right The second object to multiply. Returns Type Description AngleSingle The value of the two objects multiplied together. | Improve this Doc View Source Subtract(AngleSingle, AngleSingle) Subtracts two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle Subtract(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to subtract. AngleSingle right The second object to subtract. Returns Type Description AngleSingle The value of the two objects subtracted. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Wrap() Wraps this SharpDX.AngleSingle to be in the range [π, -π]. Declaration public void Wrap() | Improve this Doc View Source Wrap(AngleSingle) Wraps the SharpDX.AngleSingle given in the value argument to be in the range [π, -π]. Declaration public static AngleSingle Wrap(AngleSingle value) Parameters Type Name Description AngleSingle value A SharpDX.AngleSingle to wrap. Returns Type Description AngleSingle The SharpDX.AngleSingle that is wrapped. | Improve this Doc View Source WrapPositive() Wraps this SharpDX.AngleSingle to be in the range [0, 2π). Declaration public void WrapPositive() | Improve this Doc View Source WrapPositive(AngleSingle) Wraps the SharpDX.AngleSingle given in the value argument to be in the range [0, 2π). Declaration public static AngleSingle WrapPositive(AngleSingle value) Parameters Type Name Description AngleSingle value A SharpDX.AngleSingle to wrap. Returns Type Description AngleSingle The SharpDX.AngleSingle that is wrapped. Operators | Improve this Doc View Source Addition(AngleSingle, AngleSingle) Adds two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle operator +(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to add. AngleSingle right The second object to add. Returns Type Description AngleSingle The value of the two objects added together. | Improve this Doc View Source Division(AngleSingle, AngleSingle) Divides two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle operator /(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The numerator object. AngleSingle right The denominator object. Returns Type Description AngleSingle The value of the two objects divided. | Improve this Doc View Source Equality(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether the values of two SharpDX.Angle objects are equal. Declaration public static bool operator ==(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if the left and right parameters have the same value; otherwise, false. | Improve this Doc View Source GreaterThan(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether a SharpDX.Angle object is greater than another SharpDX.AngleSingle object. Declaration public static bool operator>(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if left is greater than right; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether a SharpDX.Angle object is greater than or equal to another SharpDX.AngleSingle object. Declaration public static bool operator >=(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if left is greater than or equal to right; otherwise, false. | Improve this Doc View Source Inequality(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether the values of two SharpDX.Angle objects are not equal. Declaration public static bool operator !=(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if the left and right parameters do not have the same value; otherwise, false. | Improve this Doc View Source LessThan(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether a SharpDX.Angle object is less than another SharpDX.AngleSingle object. Declaration public static bool operator <(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if left is less than right; otherwise, false. | Improve this Doc View Source LessThanOrEqual(AngleSingle, AngleSingle) Returns a System.Boolean that indicates whether a SharpDX.Angle object is less than or equal to another SharpDX.AngleSingle object. Declaration public static bool operator <=(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to compare. AngleSingle right The second object to compare. Returns Type Description System.Boolean True if left is less than or equal to right; otherwise, false. | Improve this Doc View Source Multiply(AngleSingle, AngleSingle) Multiplies two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle operator *(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to multiply. AngleSingle right The second object to multiply. Returns Type Description AngleSingle The value of the two objects multiplied together. | Improve this Doc View Source Subtraction(AngleSingle, AngleSingle) Subtracts two SharpDX.AngleSingle objects and returns the result. Declaration public static AngleSingle operator -(AngleSingle left, AngleSingle right) Parameters Type Name Description AngleSingle left The first object to subtract AngleSingle right The second object to subtract. Returns Type Description AngleSingle The value of the two objects subtracted. | Improve this Doc View Source UnaryNegation(AngleSingle) Returns the negated value of the SharpDX.AngleSingle operand. Declaration public static AngleSingle operator -(AngleSingle value) Parameters Type Name Description AngleSingle value A SharpDX.AngleSingle object. Returns Type Description AngleSingle The negated value of the value parameter. | Improve this Doc View Source UnaryPlus(AngleSingle) Returns the value of the SharpDX.AngleSingle operand. (The sign of the operand is unchanged.) Declaration public static AngleSingle operator +(AngleSingle value) Parameters Type Name Description AngleSingle value A SharpDX.AngleSingle object. Returns Type Description AngleSingle The value of the value parameter. Implements IComparable IComparable<> IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.AngleType.html": {
    "href": "api/Fluint.Layer.Mathematics.AngleType.html",
    "title": "Enum AngleType | Fluint",
    "keywords": "Enum AngleType Describes the type of angle. Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public enum AngleType : int Fields Name Description Degree Specifies an angle measurement in degrees. Gradian Specifies an angle measurement in gradians. Radian Specifies an angle measurement in radians. Revolution Specifies an angle measurement in revolutions."
  },
  "api/Fluint.Layer.Mathematics.Bool4.html": {
    "href": "api/Fluint.Layer.Mathematics.Bool4.html",
    "title": "Struct Bool4 | Fluint",
    "keywords": "Struct Bool4 Represents a four dimensional mathematical vector of bool (32 bits per bool value). Implements IEquatable < Bool4 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Bool4 : IEquatable<Bool4>, IFormattable Constructors | Improve this Doc View Source Bool4(Boolean) Initializes a new instance of the Bool4 struct. Declaration public Bool4(bool value) Parameters Type Name Description System.Boolean value The value that will be assigned to all components. | Improve this Doc View Source Bool4(Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the Bool4 struct. Declaration public Bool4(bool x, bool y, bool z, bool w) Parameters Type Name Description System.Boolean x Initial value for the X component of the vector. System.Boolean y Initial value for the Y component of the vector. System.Boolean z Initial value for the Z component of the vector. System.Boolean w Initial value for the W component of the vector. | Improve this Doc View Source Bool4(Boolean[]) Initializes a new instance of the Bool4 struct. Declaration public Bool4(bool[] values) Parameters Type Name Description System.Boolean [] values The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements. Fields | Improve this Doc View Source False A Bool4 with all of its components set to false. Declaration public static readonly Bool4 False Field Value Type Description Bool4 | Improve this Doc View Source One A Bool4 with all of its components set to true. Declaration public static readonly Bool4 One Field Value Type Description Bool4 | Improve this Doc View Source SizeInBytes The size of the Bool4 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitW The W unit Bool4 (0, 0, 0, true). Declaration public static readonly Bool4 UnitW Field Value Type Description Bool4 | Improve this Doc View Source UnitX The X unit Bool4 (true, 0, 0, 0). Declaration public static readonly Bool4 UnitX Field Value Type Description Bool4 | Improve this Doc View Source UnitY The Y unit Bool4 (0, true, 0, 0). Declaration public static readonly Bool4 UnitY Field Value Type Description Bool4 | Improve this Doc View Source UnitZ The Z unit Bool4 (0, 0, true, 0). Declaration public static readonly Bool4 UnitZ Field Value Type Description Bool4 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description System.Boolean The value of the X, Y, Z, or W component, depending on the index. | Improve this Doc View Source W The W component of the vector. Declaration public bool W { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source X The X component of the vector. Declaration public bool X { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Y The Y component of the vector. Declaration public bool Y { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Z The Z component of the vector. Declaration public bool Z { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Bool4) Determines whether the specified Bool4 is equal to this instance. Declaration public bool Equals(Bool4 other) Parameters Type Name Description Bool4 other The Bool4 to compare with this instance. Returns Type Description System.Boolean true if the specified Bool4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Bool4) Determines whether the specified Bool4 is equal to this instance. Declaration public bool Equals(ref Bool4 other) Parameters Type Name Description Bool4 other The Bool4 to compare with this instance. Returns Type Description System.Boolean true if the specified Bool4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public bool[] ToArray() Returns Type Description System.Boolean [] A four-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Equality(Bool4, Bool4) Tests for equality between two objects. Declaration public static bool operator ==(Bool4 left, Bool4 right) Parameters Type Name Description Bool4 left The first value to compare. Bool4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Implicit(Bool4 to Boolean[]) Performs an implicit conversion from Bool4 to array. Declaration public static implicit operator bool[](Bool4 input) Parameters Type Name Description Bool4 input The input. Returns Type Description System.Boolean [] The result of the conversion. | Improve this Doc View Source Implicit(Boolean[] to Bool4) Performs an implicit conversion from array to Bool4 . Declaration public static implicit operator Bool4(bool[] input) Parameters Type Name Description System.Boolean [] input The input. Returns Type Description Bool4 The result of the conversion. | Improve this Doc View Source Inequality(Bool4, Bool4) Tests for inequality between two objects. Declaration public static bool operator !=(Bool4 left, Bool4 right) Parameters Type Name Description Bool4 left The first value to compare. Bool4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.BoundingBox.html": {
    "href": "api/Fluint.Layer.Mathematics.BoundingBox.html",
    "title": "Struct BoundingBox | Fluint",
    "keywords": "Struct BoundingBox Represents an axis-aligned bounding box in three dimensional space. Implements IEquatable < BoundingBox > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct BoundingBox : IEquatable<BoundingBox>, IFormattable Constructors | Improve this Doc View Source BoundingBox(Vector3, Vector3) Initializes a new instance of the BoundingBox struct. Declaration public BoundingBox(Vector3 minimum, Vector3 maximum) Parameters Type Name Description Vector3 minimum The minimum vertex of the bounding box. Vector3 maximum The maximum vertex of the bounding box. Fields | Improve this Doc View Source Maximum The maximum point of the box. Declaration public Vector3 Maximum Field Value Type Description Vector3 | Improve this Doc View Source Minimum The minimum point of the box. Declaration public Vector3 Minimum Field Value Type Description Vector3 Properties | Improve this Doc View Source Center Returns the size of the bounding box Declaration public Vector3 Center { get; } Property Value Type Description Vector3 | Improve this Doc View Source Depth Returns the height of the bounding box Declaration public float Depth { get; } Property Value Type Description System.Single | Improve this Doc View Source Height Returns the height of the bounding box Declaration public float Height { get; } Property Value Type Description System.Single | Improve this Doc View Source Size Returns the size of the bounding box Declaration public Vector3 Size { get; } Property Value Type Description Vector3 | Improve this Doc View Source Width Returns the width of the bounding box Declaration public float Width { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Contains(BoundingBox) Determines whether the current objects contains a BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref BoundingBox) Determines whether the current objects contains a BoundingBox . Declaration public ContainmentType Contains(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(BoundingSphere) Determines whether the current objects contains a BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref BoundingSphere) Determines whether the current objects contains a BoundingSphere . Declaration public ContainmentType Contains(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(Vector3) Determines whether the current objects contains a point. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref Vector3) Determines whether the current objects contains a point. Declaration public ContainmentType Contains(ref Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Equals(BoundingBox) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(BoundingBox value) Parameters Type Name Description BoundingBox value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref BoundingBox) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref BoundingBox value) Parameters Type Name Description BoundingBox value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source FromPoints(Vector3[]) Constructs a BoundingBox that fully contains the given points. Declaration public static BoundingBox FromPoints(Vector3[] points) Parameters Type Name Description Vector3 [] points The points that will be contained by the box. Returns Type Description BoundingBox The newly constructed bounding box. | Improve this Doc View Source FromPoints(Vector3[], out BoundingBox) Constructs a BoundingBox that fully contains the given points. Declaration public static void FromPoints(Vector3[] points, out BoundingBox result) Parameters Type Name Description Vector3 [] points The points that will be contained by the box. BoundingBox result When the method completes, contains the newly constructed bounding box. | Improve this Doc View Source FromSphere(BoundingSphere) Constructs a BoundingBox from a given sphere. Declaration public static BoundingBox FromSphere(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere that will designate the extents of the box. Returns Type Description BoundingBox The newly constructed bounding box. | Improve this Doc View Source FromSphere(ref BoundingSphere, out BoundingBox) Constructs a BoundingBox from a given sphere. Declaration public static void FromSphere(ref BoundingSphere sphere, out BoundingBox result) Parameters Type Name Description BoundingSphere sphere The sphere that will designate the extents of the box. BoundingBox result When the method completes, contains the newly constructed bounding box. | Improve this Doc View Source GetCorners() Retrieves the eight corners of the bounding box. Declaration public Vector3[] GetCorners() Returns Type Description Vector3 [] An array of points representing the eight corners of the bounding box. | Improve this Doc View Source GetCorners(Vector3[]) Retrieves the eight corners of the bounding box. Declaration public void GetCorners(Vector3[] corners) Parameters Type Name Description Vector3 [] corners | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Intersects(BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane) Determines if there is an intersection between the current object and a Plane . Declaration public PlaneIntersectionType Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Vector3) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Single) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out float distance) Parameters Type Name Description Ray ray The ray to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Merge(BoundingBox, BoundingBox) Constructs a BoundingBox that is as large as the total combined area of the two specified boxes. Declaration public static BoundingBox Merge(BoundingBox value1, BoundingBox value2) Parameters Type Name Description BoundingBox value1 The first box to merge. BoundingBox value2 The second box to merge. Returns Type Description BoundingBox The newly constructed bounding box. | Improve this Doc View Source Merge(ref BoundingBox, ref BoundingBox, out BoundingBox) Constructs a BoundingBox that is as large as the total combined area of the two specified boxes. Declaration public static void Merge(ref BoundingBox value1, ref BoundingBox value2, out BoundingBox result) Parameters Type Name Description BoundingBox value1 The first box to merge. BoundingBox value2 The second box to merge. BoundingBox result When the method completes, contains the newly constructed bounding box. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Equality(BoundingBox, BoundingBox) Tests for equality between two objects. Declaration public static bool operator ==(BoundingBox left, BoundingBox right) Parameters Type Name Description BoundingBox left The first value to compare. BoundingBox right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(BoundingBox, BoundingBox) Tests for inequality between two objects. Declaration public static bool operator !=(BoundingBox left, BoundingBox right) Parameters Type Name Description BoundingBox left The first value to compare. BoundingBox right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.BoundingFrustum.html": {
    "href": "api/Fluint.Layer.Mathematics.BoundingFrustum.html",
    "title": "Struct BoundingFrustum | Fluint",
    "keywords": "Struct BoundingFrustum Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, (matrix, frustum, camera) interchange, and many kind of intersection testing. Implements IEquatable < BoundingFrustum > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct BoundingFrustum : IEquatable<BoundingFrustum> Constructors | Improve this Doc View Source BoundingFrustum(Matrix) Creates a new instance of BoundingFrustum. Declaration public BoundingFrustum(Matrix matrix) Parameters Type Name Description Matrix matrix Combined matrix that usually takes view × projection matrix. Properties | Improve this Doc View Source Bottom Gets the bottom plane of the BoundingFrustum. Declaration public Plane Bottom { get; } Property Value Type Description Plane | Improve this Doc View Source Far Gets the far plane of the BoundingFrustum. Declaration public Plane Far { get; } Property Value Type Description Plane | Improve this Doc View Source IsOrthographic Indicate whether the current BoundingFrustrum is Orthographic. Declaration public bool IsOrthographic { get; } Property Value Type Description System.Boolean true if the current BoundingFrustrum is Orthographic; otherwise, false . | Improve this Doc View Source Left Gets the left plane of the BoundingFrustum. Declaration public Plane Left { get; } Property Value Type Description Plane | Improve this Doc View Source Matrix Gets or sets the Matrix that describes this bounding frustum. Declaration public Matrix Matrix { get; set; } Property Value Type Description Matrix | Improve this Doc View Source Near Gets the near plane of the BoundingFrustum. Declaration public Plane Near { get; } Property Value Type Description Plane | Improve this Doc View Source Right Gets the right plane of the BoundingFrustum. Declaration public Plane Right { get; } Property Value Type Description Plane | Improve this Doc View Source Top Gets the top plane of the BoundingFrustum. Declaration public Plane Top { get; } Property Value Type Description Plane Methods | Improve this Doc View Source Contains(BoundingBox) Determines the intersection relationship between the frustum and a bounding box. Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(ref BoundingBox) Determines the intersection relationship between the frustum and a bounding box. Declaration public ContainmentType Contains(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(ref BoundingBox, out ContainmentType) Determines the intersection relationship between the frustum and a bounding box. Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box The box. ContainmentType result Stage of the containment. | Improve this Doc View Source Contains(BoundingFrustum) Determines the intersection relationship between the frustum and another bounding frustum. Declaration public bool Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description System.Boolean Stage of the containment | Improve this Doc View Source Contains(ref BoundingFrustum) Determines the intersection relationship between the frustum and another bounding frustum. Declaration public bool Contains(ref BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum. Returns Type Description System.Boolean Stage of the containment | Improve this Doc View Source Contains(ref BoundingFrustum, out Boolean) Determines the intersection relationship between the frustum and another bounding frustum. Declaration public void Contains(ref BoundingFrustum frustum, out bool result) Parameters Type Name Description BoundingFrustum frustum The frustum. System.Boolean result Stage of the containment. | Improve this Doc View Source Contains(BoundingSphere) Determines the intersection relationship between the frustum and a bounding sphere. Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(ref BoundingSphere) Determines the intersection relationship between the frustum and a bounding sphere. Declaration public ContainmentType Contains(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(ref BoundingSphere, out ContainmentType) Determines the intersection relationship between the frustum and a bounding sphere. Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere The sphere. ContainmentType result Stage of the containment. | Improve this Doc View Source Contains(Vector3) Checks whether a point lay inside, intersects or lay outside the frustum. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(ref Vector3) Checks whether a point lay inside, intersects or lay outside the frustum. Declaration public ContainmentType Contains(ref Vector3 point) Parameters Type Name Description Vector3 point The point. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(Vector3[]) Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint). Declaration public ContainmentType Contains(Vector3[] points) Parameters Type Name Description Vector3 [] points The points. Returns Type Description ContainmentType Stage of the containment | Improve this Doc View Source Contains(Vector3[], out ContainmentType) Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint). Declaration public void Contains(Vector3[] points, out ContainmentType result) Parameters Type Name Description Vector3 [] points The points. ContainmentType result Stage of the containment. | Improve this Doc View Source Equals(BoundingFrustum) Determines whether the specified BoundingFrustum is equal to this instance. Declaration public bool Equals(BoundingFrustum other) Parameters Type Name Description BoundingFrustum other The BoundingFrustum to compare with this instance. Returns Type Description System.Boolean true if the specified BoundingFrustum is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref BoundingFrustum) Determines whether the specified BoundingFrustum is equal to this instance. Declaration public bool Equals(ref BoundingFrustum other) Parameters Type Name Description BoundingFrustum other The BoundingFrustum to compare with this instance. Returns Type Description System.Boolean true if the specified BoundingFrustum is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source FromCamera(FrustumCameraParams) Creates a new frustum relaying on perspective camera parameters Declaration public static BoundingFrustum FromCamera(FrustumCameraParams cameraParams) Parameters Type Name Description FrustumCameraParams cameraParams The camera params. Returns Type Description BoundingFrustum The bounding frustum from camera params | Improve this Doc View Source FromCamera(Vector3, Vector3, Vector3, Single, Single, Single, Single) Creates a new frustum relaying on perspective camera parameters Declaration public static BoundingFrustum FromCamera(Vector3 cameraPos, Vector3 lookDir, Vector3 upDir, float fov, float znear, float zfar, float aspect) Parameters Type Name Description Vector3 cameraPos The camera pos. Vector3 lookDir The look dir. Vector3 upDir Up dir. System.Single fov The fov. System.Single znear The znear. System.Single zfar The zfar. System.Single aspect The aspect. Returns Type Description BoundingFrustum The bounding frustum calculated from perspective camera | Improve this Doc View Source GetCameraParams() Extracts perspective camera parameters from the frustum, doesn't work with orthographic frustums. Declaration public FrustumCameraParams GetCameraParams() Returns Type Description FrustumCameraParams Perspective camera parameters from the frustum | Improve this Doc View Source GetCorners() Returns the 8 corners of the frustum, element0 is Near1 (near right down corner) , element1 is Near2 (near right top corner) , element2 is Near3 (near Left top corner) , element3 is Near4 (near Left down corner) , element4 is Far1 (far right down corner) , element5 is Far2 (far right top corner) , element6 is Far3 (far left top corner) , element7 is Far4 (far left down corner) Declaration public Vector3[] GetCorners() Returns Type Description Vector3 [] The 8 corners of the frustum | Improve this Doc View Source GetCorners(Vector3[]) Returns the 8 corners of the frustum, element0 is Near1 (near right down corner) , element1 is Near2 (near right top corner) , element2 is Near3 (near Left top corner) , element3 is Near4 (near Left down corner) , element4 is Far1 (far right down corner) , element5 is Far2 (far right top corner) , element6 is Far3 (far left top corner) , element7 is Far4 (far left down corner) Declaration public void GetCorners(Vector3[] corners) Parameters Type Name Description Vector3 [] corners | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetHeightAtDepth(Single) Get the height of the frustum at specified depth. Declaration public float GetHeightAtDepth(float depth) Parameters Type Name Description System.Single depth the depth at which to calculate frustum height. Returns Type Description System.Single Height of the frustum at the specified depth | Improve this Doc View Source GetPlane(Int32) Returns one of the 6 planes related to this frustum. Declaration public Plane GetPlane(int index) Parameters Type Name Description System.Int32 index Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far Returns Type Description Plane | Improve this Doc View Source GetWidthAtDepth(Single) Get the width of the frustum at specified depth. Declaration public float GetWidthAtDepth(float depth) Parameters Type Name Description System.Single depth the depth at which to calculate frustum width. Returns Type Description System.Single With of the frustum at the specified depth | Improve this Doc View Source GetZoomToExtentsShiftDistance(ref BoundingBox) Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation, so all the passed points will fit in the current view. if the returned value is positive, the camera will move toward the lookat direction (ZoomIn). if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut). Declaration public float GetZoomToExtentsShiftDistance(ref BoundingBox boundingBox) Parameters Type Name Description BoundingBox boundingBox The bounding box. Returns Type Description System.Single The zoom to fit distance | Improve this Doc View Source GetZoomToExtentsShiftDistance(Vector3[]) Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation, so all the passed points will fit in the current view. if the returned value is positive, the camera will move toward the lookat direction (ZoomIn). if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut). Declaration public float GetZoomToExtentsShiftDistance(Vector3[] points) Parameters Type Name Description Vector3 [] points The points. Returns Type Description System.Single The zoom to fit distance | Improve this Doc View Source GetZoomToExtentsShiftVector(ref BoundingBox) Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation, so all the passed points will fit in the current view. Declaration public Vector3 GetZoomToExtentsShiftVector(ref BoundingBox boundingBox) Parameters Type Name Description BoundingBox boundingBox The bounding box. Returns Type Description Vector3 The zoom to fit vector | Improve this Doc View Source GetZoomToExtentsShiftVector(Vector3[]) Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation, so all the passed points will fit in the current view. Declaration public Vector3 GetZoomToExtentsShiftVector(Vector3[] points) Parameters Type Name Description Vector3 [] points The points. Returns Type Description Vector3 The zoom to fit vector | Improve this Doc View Source Intersects(ref BoundingBox) Checks whether the current BoundingFrustum intersects a BoundingBox. Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box. Returns Type Description System.Boolean true if the current BoundingFrustum intersects a BoundingSphere. | Improve this Doc View Source Intersects(ref BoundingBox, out Boolean) Checks whether the current BoundingFrustum intersects a BoundingBox. Declaration public void Intersects(ref BoundingBox box, out bool result) Parameters Type Name Description BoundingBox box The box. System.Boolean result true if the current BoundingFrustum intersects a BoundingSphere. | Improve this Doc View Source Intersects(ref BoundingSphere) Checks whether the current BoundingFrustum intersects a BoundingSphere. Declaration public bool Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere. Returns Type Description System.Boolean Stage of the containment | Improve this Doc View Source Intersects(ref BoundingSphere, out Boolean) Checks whether the current BoundingFrustum intersects a BoundingSphere. Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere The sphere. System.Boolean result Set to true if the current BoundingFrustum intersects a BoundingSphere. | Improve this Doc View Source Intersects(ref Plane) Checks whether the current BoundingFrustum intersects the specified Plane. Declaration public PlaneIntersectionType Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane. Returns Type Description PlaneIntersectionType Plane intersection type. | Improve this Doc View Source Intersects(ref Plane, out PlaneIntersectionType) Checks whether the current BoundingFrustum intersects the specified Plane. Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane The plane. PlaneIntersectionType result Plane intersection type. | Improve this Doc View Source Intersects(ref Ray) Checks whether the current BoundingFrustum intersects the specified Ray. Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray. Returns Type Description System.Boolean true if the current BoundingFrustum intersects the specified Ray. | Improve this Doc View Source Intersects(ref Ray, out Nullable<Single>, out Nullable<Single>) Checks whether the current BoundingFrustum intersects the specified Ray. Declaration public bool Intersects(ref Ray ray, out float? inDistance, out float? outDistance) Parameters Type Name Description Ray ray The Ray to check for intersection with. System.Nullable < System.Single > inDistance The distance at which the ray enters the frustum if there is an intersection and the ray starts outside the frustum. System.Nullable < System.Single > outDistance The distance at which the ray exits the frustum if there is an intersection. Returns Type Description System.Boolean true if the current BoundingFrustum intersects the specified Ray. Operators | Improve this Doc View Source Equality(BoundingFrustum, BoundingFrustum) Implements the operator ==. Declaration public static bool operator ==(BoundingFrustum left, BoundingFrustum right) Parameters Type Name Description BoundingFrustum left The left. BoundingFrustum right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(BoundingFrustum, BoundingFrustum) Implements the operator !=. Declaration public static bool operator !=(BoundingFrustum left, BoundingFrustum right) Parameters Type Name Description BoundingFrustum left The left. BoundingFrustum right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.BoundingSphere.html": {
    "href": "api/Fluint.Layer.Mathematics.BoundingSphere.html",
    "title": "Struct BoundingSphere | Fluint",
    "keywords": "Struct BoundingSphere Represents a bounding sphere in three dimensional space. Implements IEquatable < BoundingSphere > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct BoundingSphere : IEquatable<BoundingSphere>, IFormattable Constructors | Improve this Doc View Source BoundingSphere(Vector3, Single) Initializes a new instance of the BoundingSphere struct. Declaration public BoundingSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center The center of the sphere in three dimensional space. System.Single radius The radius of the sphere. Fields | Improve this Doc View Source Center The center of the sphere in three dimensional space. Declaration public Vector3 Center Field Value Type Description Vector3 | Improve this Doc View Source Radius The radius of the sphere. Declaration public float Radius Field Value Type Description System.Single Methods | Improve this Doc View Source Contains(ref BoundingBox) Determines whether the current objects contains a BoundingBox . Declaration public ContainmentType Contains(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref BoundingSphere) Determines whether the current objects contains a BoundingSphere . Declaration public ContainmentType Contains(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref Vector3) Determines whether the current objects contains a point. Declaration public ContainmentType Contains(ref Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref Vector3, ref Vector3, ref Vector3) Determines whether the current objects contains a triangle. Declaration public ContainmentType Contains(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Equals(BoundingSphere) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(BoundingSphere value) Parameters Type Name Description BoundingSphere value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref BoundingSphere) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref BoundingSphere value) Parameters Type Name Description BoundingSphere value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source FromBox(BoundingBox) Constructs a BoundingSphere from a given box. Declaration public static BoundingSphere FromBox(BoundingBox box) Parameters Type Name Description BoundingBox box The box that will designate the extents of the sphere. Returns Type Description BoundingSphere The newly constructed bounding sphere. | Improve this Doc View Source FromBox(ref BoundingBox, out BoundingSphere) Constructs a BoundingSphere from a given box. Declaration public static void FromBox(ref BoundingBox box, out BoundingSphere result) Parameters Type Name Description BoundingBox box The box that will designate the extents of the sphere. BoundingSphere result When the method completes, the newly constructed bounding sphere. | Improve this Doc View Source FromPoints(Vector3[]) Constructs a BoundingSphere that fully contains the given points. Declaration public static BoundingSphere FromPoints(Vector3[] points) Parameters Type Name Description Vector3 [] points The points that will be contained by the sphere. Returns Type Description BoundingSphere The newly constructed bounding sphere. | Improve this Doc View Source FromPoints(Vector3[], out BoundingSphere) Constructs a BoundingSphere that fully contains the given points. Declaration public static void FromPoints(Vector3[] points, out BoundingSphere result) Parameters Type Name Description Vector3 [] points The points that will be contained by the sphere. BoundingSphere result When the method completes, contains the newly constructed bounding sphere. | Improve this Doc View Source FromPoints(Vector3[], Int32, Int32, out BoundingSphere) Constructs a BoundingSphere that fully contains the given points. Declaration public static void FromPoints(Vector3[] points, int start, int count, out BoundingSphere result) Parameters Type Name Description Vector3 [] points The points that will be contained by the sphere. System.Int32 start The start index from points array to start compute the bounding sphere. System.Int32 count The count of points to process to compute the bounding sphere. BoundingSphere result When the method completes, contains the newly constructed bounding sphere. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Intersects(BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane) Determines if there is an intersection between the current object and a Plane . Declaration public PlaneIntersectionType Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Vector3) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Single) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out float distance) Parameters Type Name Description Ray ray The ray to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3, ref Vector3, ref Vector3) Determines if there is an intersection between the current object and a triangle. Declaration public bool Intersects(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Merge(BoundingSphere, BoundingSphere) Constructs a BoundingSphere that is the as large as the total combined area of the two specified spheres. Declaration public static BoundingSphere Merge(BoundingSphere value1, BoundingSphere value2) Parameters Type Name Description BoundingSphere value1 The first sphere to merge. BoundingSphere value2 The second sphere to merge. Returns Type Description BoundingSphere The newly constructed bounding sphere. | Improve this Doc View Source Merge(ref BoundingSphere, ref BoundingSphere, out BoundingSphere) Constructs a BoundingSphere that is the as large as the total combined area of the two specified spheres. Declaration public static void Merge(ref BoundingSphere value1, ref BoundingSphere value2, out BoundingSphere result) Parameters Type Name Description BoundingSphere value1 The first sphere to merge. BoundingSphere value2 The second sphere to merge. BoundingSphere result When the method completes, contains the newly constructed bounding sphere. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Equality(BoundingSphere, BoundingSphere) Tests for equality between two objects. Declaration public static bool operator ==(BoundingSphere left, BoundingSphere right) Parameters Type Name Description BoundingSphere left The first value to compare. BoundingSphere right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(BoundingSphere, BoundingSphere) Tests for inequality between two objects. Declaration public static bool operator !=(BoundingSphere left, BoundingSphere right) Parameters Type Name Description BoundingSphere left The first value to compare. BoundingSphere right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Collision.html": {
    "href": "api/Fluint.Layer.Mathematics.Collision.html",
    "title": "Class Collision | Fluint",
    "keywords": "Class Collision Contains static methods to help in determining intersections, containment, etc. Inheritance System.Object Collision Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public static class Collision : object Methods | Improve this Doc View Source BoxContainsBox(ref BoundingBox, ref BoundingBox) Determines whether a BoundingBox contains a BoundingBox . Declaration public static ContainmentType BoxContainsBox(ref BoundingBox box1, ref BoundingBox box2) Parameters Type Name Description BoundingBox box1 The first box to test. BoundingBox box2 The second box to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source BoxContainsPoint(ref BoundingBox, ref Vector3) Determines whether a BoundingBox contains a point. Declaration public static ContainmentType BoxContainsPoint(ref BoundingBox box, ref Vector3 point) Parameters Type Name Description BoundingBox box The box to test. Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source BoxContainsSphere(ref BoundingBox, ref BoundingSphere) Determines whether a BoundingBox contains a BoundingSphere . Declaration public static ContainmentType BoxContainsSphere(ref BoundingBox box, ref BoundingSphere sphere) Parameters Type Name Description BoundingBox box The box to test. BoundingSphere sphere The sphere to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source BoxIntersectsBox(ref BoundingBox, ref BoundingBox) Determines whether there is an intersection between a BoundingBox and a BoundingBox . Declaration public static bool BoxIntersectsBox(ref BoundingBox box1, ref BoundingBox box2) Parameters Type Name Description BoundingBox box1 The first box to test. BoundingBox box2 The second box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source BoxIntersectsSphere(ref BoundingBox, ref BoundingSphere) Determines whether there is an intersection between a BoundingBox and a BoundingSphere . Declaration public static bool BoxIntersectsSphere(ref BoundingBox box, ref BoundingSphere sphere) Parameters Type Name Description BoundingBox box The box to test. BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source ClosestPointBoxPoint(ref BoundingBox, ref Vector3, out Vector3) Determines the closest point between a BoundingBox and a point. Declaration public static void ClosestPointBoxPoint(ref BoundingBox box, ref Vector3 point, out Vector3 result) Parameters Type Name Description BoundingBox box The box to test. Vector3 point The point to test. Vector3 result When the method completes, contains the closest point between the two objects. | Improve this Doc View Source ClosestPointPlanePoint(ref Plane, ref Vector3, out Vector3) Determines the closest point between a Plane and a point. Declaration public static void ClosestPointPlanePoint(ref Plane plane, ref Vector3 point, out Vector3 result) Parameters Type Name Description Plane plane The plane to test. Vector3 point The point to test. Vector3 result When the method completes, contains the closest point between the two objects. | Improve this Doc View Source ClosestPointPointTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Vector3) Determines the closest point between a point and a triangle. Declaration public static void ClosestPointPointTriangle(ref Vector3 point, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3, out Vector3 result) Parameters Type Name Description Vector3 point The point to test. Vector3 vertex1 The first vertex to test. Vector3 vertex2 The second vertex to test. Vector3 vertex3 The third vertex to test. Vector3 result When the method completes, contains the closest point between the two objects. | Improve this Doc View Source ClosestPointSpherePoint(ref BoundingSphere, ref Vector3, out Vector3) Determines the closest point between a BoundingSphere and a point. Declaration public static void ClosestPointSpherePoint(ref BoundingSphere sphere, ref Vector3 point, out Vector3 result) Parameters Type Name Description BoundingSphere sphere Vector3 point The point to test. Vector3 result When the method completes, contains the closest point between the two objects; or, if the point is directly in the center of the sphere, contains Zero . | Improve this Doc View Source ClosestPointSphereSphere(ref BoundingSphere, ref BoundingSphere, out Vector3) Determines the closest point between a BoundingSphere and a BoundingSphere . Declaration public static void ClosestPointSphereSphere(ref BoundingSphere sphere1, ref BoundingSphere sphere2, out Vector3 result) Parameters Type Name Description BoundingSphere sphere1 The first sphere to test. BoundingSphere sphere2 The second sphere to test. Vector3 result When the method completes, contains the closest point between the two objects; or, if the point is directly in the center of the sphere, contains Zero . Remarks If the two spheres are overlapping, but not directly on top of each other, the closest point is the 'closest' point of intersection. This can also be considered is the deepest point of intersection. | Improve this Doc View Source DistanceBoxBox(ref BoundingBox, ref BoundingBox) Determines the distance between a BoundingBox and a BoundingBox . Declaration public static float DistanceBoxBox(ref BoundingBox box1, ref BoundingBox box2) Parameters Type Name Description BoundingBox box1 The first box to test. BoundingBox box2 The second box to test. Returns Type Description System.Single The distance between the two objects. | Improve this Doc View Source DistanceBoxPoint(ref BoundingBox, ref Vector3) Determines the distance between a BoundingBox and a point. Declaration public static float DistanceBoxPoint(ref BoundingBox box, ref Vector3 point) Parameters Type Name Description BoundingBox box The box to test. Vector3 point The point to test. Returns Type Description System.Single The distance between the two objects. | Improve this Doc View Source DistancePlanePoint(ref Plane, ref Vector3) Determines the distance between a Plane and a point. Declaration public static float DistancePlanePoint(ref Plane plane, ref Vector3 point) Parameters Type Name Description Plane plane The plane to test. Vector3 point The point to test. Returns Type Description System.Single The distance between the two objects. | Improve this Doc View Source DistanceSpherePoint(ref BoundingSphere, ref Vector3) Determines the distance between a BoundingSphere and a point. Declaration public static float DistanceSpherePoint(ref BoundingSphere sphere, ref Vector3 point) Parameters Type Name Description BoundingSphere sphere The sphere to test. Vector3 point The point to test. Returns Type Description System.Single The distance between the two objects. | Improve this Doc View Source DistanceSphereSphere(ref BoundingSphere, ref BoundingSphere) Determines the distance between a BoundingSphere and a BoundingSphere . Declaration public static float DistanceSphereSphere(ref BoundingSphere sphere1, ref BoundingSphere sphere2) Parameters Type Name Description BoundingSphere sphere1 The first sphere to test. BoundingSphere sphere2 The second sphere to test. Returns Type Description System.Single The distance between the two objects. | Improve this Doc View Source PlaneIntersectsBox(ref Plane, ref BoundingBox) Determines whether there is an intersection between a Plane and a BoundingBox . Declaration public static PlaneIntersectionType PlaneIntersectsBox(ref Plane plane, ref BoundingBox box) Parameters Type Name Description Plane plane The plane to test. BoundingBox box The box to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source PlaneIntersectsPlane(ref Plane, ref Plane) Determines whether there is an intersection between a Plane and a Plane . Declaration public static bool PlaneIntersectsPlane(ref Plane plane1, ref Plane plane2) Parameters Type Name Description Plane plane1 The first plane to test. Plane plane2 The second plane to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source PlaneIntersectsPlane(ref Plane, ref Plane, out Ray) Determines whether there is an intersection between a Plane and a Plane . Declaration public static bool PlaneIntersectsPlane(ref Plane plane1, ref Plane plane2, out Ray line) Parameters Type Name Description Plane plane1 The first plane to test. Plane plane2 The second plane to test. Ray line When the method completes, contains the line of intersection as a Ray , or a zero ray if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. Remarks Although a ray is set to have an origin, the ray returned by this method is really a line in three dimensions which has no real origin. The ray is considered valid when both the positive direction is used and when the negative direction is used. | Improve this Doc View Source PlaneIntersectsPoint(ref Plane, ref Vector3) Determines whether there is an intersection between a Plane and a point. Declaration public static PlaneIntersectionType PlaneIntersectsPoint(ref Plane plane, ref Vector3 point) Parameters Type Name Description Plane plane The plane to test. Vector3 point The point to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source PlaneIntersectsSphere(ref Plane, ref BoundingSphere) Determines whether there is an intersection between a Plane and a BoundingSphere . Declaration public static PlaneIntersectionType PlaneIntersectsSphere(ref Plane plane, ref BoundingSphere sphere) Parameters Type Name Description Plane plane The plane to test. BoundingSphere sphere The sphere to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source PlaneIntersectsTriangle(ref Plane, ref Vector3, ref Vector3, ref Vector3) Determines whether there is an intersection between a Plane and a triangle. Declaration public static PlaneIntersectionType PlaneIntersectsTriangle(ref Plane plane, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description Plane plane The plane to test. Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source RayIntersectsBox(ref Ray, ref BoundingBox, out Vector3) Determines whether there is an intersection between a Ray and a Plane . Declaration public static bool RayIntersectsBox(ref Ray ray, ref BoundingBox box, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. BoundingBox box The box to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsBox(ref Ray, ref BoundingBox, out Single) Determines whether there is an intersection between a Ray and a BoundingBox . Declaration public static bool RayIntersectsBox(ref Ray ray, ref BoundingBox box, out float distance) Parameters Type Name Description Ray ray The ray to test. BoundingBox box The box to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsPlane(ref Ray, ref Plane, out Vector3) Determines whether there is an intersection between a Ray and a Plane . Declaration public static bool RayIntersectsPlane(ref Ray ray, ref Plane plane, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Plane plane The plane to test Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsPlane(ref Ray, ref Plane, out Single) Determines whether there is an intersection between a Ray and a Plane . Declaration public static bool RayIntersectsPlane(ref Ray ray, ref Plane plane, out float distance) Parameters Type Name Description Ray ray The ray to test. Plane plane The plane to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersect. | Improve this Doc View Source RayIntersectsPoint(ref Ray, ref Vector3) Determines whether there is an intersection between a Ray and a point. Declaration public static bool RayIntersectsPoint(ref Ray ray, ref Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point The point to test. Returns Type Description System.Boolean Whether the two objects intersect. | Improve this Doc View Source RayIntersectsRay(ref Ray, ref Ray, out Vector3) Determines whether there is an intersection between a Ray and a Ray . Declaration public static bool RayIntersectsRay(ref Ray ray1, ref Ray ray2, out Vector3 point) Parameters Type Name Description Ray ray1 The first ray to test. Ray ray2 The second ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersect. Remarks This method performs a ray vs ray intersection test based on the following formula from Goldman. s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2 t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2 Where o_1 is the position of the first ray, o_2 is the position of the second ray, d_1 is the normalized direction of the first ray, d_2 is the normalized direction of the second ray, det denotes the determinant of a matrix, x denotes the cross product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector. | Improve this Doc View Source RayIntersectsSphere(ref Ray, ref BoundingSphere, out Vector3) Determines whether there is an intersection between a Ray and a BoundingSphere . Declaration public static bool RayIntersectsSphere(ref Ray ray, ref BoundingSphere sphere, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. BoundingSphere sphere The sphere to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsSphere(ref Ray, ref BoundingSphere, out Single) Determines whether there is an intersection between a Ray and a BoundingSphere . Declaration public static bool RayIntersectsSphere(ref Ray ray, ref BoundingSphere sphere, out float distance) Parameters Type Name Description Ray ray The ray to test. BoundingSphere sphere The sphere to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsTriangle(ref Ray, ref Vector3, ref Vector3, ref Vector3, out Vector3) Determines whether there is an intersection between a Ray and a triangle. Declaration public static bool RayIntersectsTriangle(ref Ray ray, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source RayIntersectsTriangle(ref Ray, ref Vector3, ref Vector3, ref Vector3, out Single) Determines whether there is an intersection between a Ray and a triangle. Declaration public static bool RayIntersectsTriangle(ref Ray ray, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3, out float distance) Parameters Type Name Description Ray ray The ray to test. Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. Remarks This method tests if the ray intersects either the front or back of the triangle. If the ray is parallel to the triangle's plane, no intersection is assumed to have happened. If the intersection of the ray and the triangle is behind the origin of the ray, no intersection is assumed to have happened. In both cases of assumptions, this method returns false. | Improve this Doc View Source SphereContainsBox(ref BoundingSphere, ref BoundingBox) Determines whether a BoundingSphere contains a BoundingBox . Declaration public static ContainmentType SphereContainsBox(ref BoundingSphere sphere, ref BoundingBox box) Parameters Type Name Description BoundingSphere sphere The sphere to test. BoundingBox box The box to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source SphereContainsPoint(ref BoundingSphere, ref Vector3) Determines whether a BoundingSphere contains a point. Declaration public static ContainmentType SphereContainsPoint(ref BoundingSphere sphere, ref Vector3 point) Parameters Type Name Description BoundingSphere sphere The sphere to test. Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source SphereContainsSphere(ref BoundingSphere, ref BoundingSphere) Determines whether a BoundingSphere contains a BoundingSphere . Declaration public static ContainmentType SphereContainsSphere(ref BoundingSphere sphere1, ref BoundingSphere sphere2) Parameters Type Name Description BoundingSphere sphere1 The first sphere to test. BoundingSphere sphere2 The second sphere to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source SphereContainsTriangle(ref BoundingSphere, ref Vector3, ref Vector3, ref Vector3) Determines whether a BoundingSphere contains a triangle. Declaration public static ContainmentType SphereContainsTriangle(ref BoundingSphere sphere, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description BoundingSphere sphere The sphere to test. Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source SphereIntersectsSphere(ref BoundingSphere, ref BoundingSphere) Determines whether there is an intersection between a BoundingSphere and a BoundingSphere . Declaration public static bool SphereIntersectsSphere(ref BoundingSphere sphere1, ref BoundingSphere sphere2) Parameters Type Name Description BoundingSphere sphere1 First sphere to test. BoundingSphere sphere2 Second sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source SphereIntersectsTriangle(ref BoundingSphere, ref Vector3, ref Vector3, ref Vector3) Determines whether there is an intersection between a BoundingSphere and a triangle. Declaration public static bool SphereIntersectsTriangle(ref BoundingSphere sphere, ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description BoundingSphere sphere The sphere to test. Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description System.Boolean Whether the two objects intersected."
  },
  "api/Fluint.Layer.Mathematics.Color.html": {
    "href": "api/Fluint.Layer.Mathematics.Color.html",
    "title": "Struct Color | Fluint",
    "keywords": "Struct Color Represents a 32-bit color (4 bytes) in the form of RGBA (in byte order: R, G, B, A). Implements IEquatable < Color > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Color : IEquatable<Color>, IFormattable Constructors | Improve this Doc View Source Color(Vector3) Initializes a new instance of the Color struct. Alpha is set to 255. Declaration public Color(Vector3 value) Parameters Type Name Description Vector3 value The red, green, and blue components of the color. | Improve this Doc View Source Color(Vector3, Single) Initializes a new instance of the Color struct. Declaration public Color(Vector3 value, float alpha) Parameters Type Name Description Vector3 value The red, green, and blue components of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source Color(Vector4) Initializes a new instance of the Color struct. Declaration public Color(Vector4 value) Parameters Type Name Description Vector4 value The red, green, blue, and alpha components of the color. | Improve this Doc View Source Color(Byte) Initializes a new instance of the Color struct. Declaration public Color(byte value) Parameters Type Name Description System.Byte value The value that will be assigned to all components. | Improve this Doc View Source Color(Byte, Byte, Byte) Initializes a new instance of the Color struct. Alpha is set to 255. Declaration public Color(byte red, byte green, byte blue) Parameters Type Name Description System.Byte red The red component of the color. System.Byte green The green component of the color. System.Byte blue The blue component of the color. | Improve this Doc View Source Color(Byte, Byte, Byte, Byte) Initializes a new instance of the Color struct. Declaration public Color(byte red, byte green, byte blue, byte alpha) Parameters Type Name Description System.Byte red The red component of the color. System.Byte green The green component of the color. System.Byte blue The blue component of the color. System.Byte alpha The alpha component of the color. | Improve this Doc View Source Color(Byte[]) Initializes a new instance of the Color struct. Declaration public Color(byte[] values) Parameters Type Name Description System.Byte [] values The values to assign to the alpha, red, green, and blue components of the color. This must be an array with four elements. | Improve this Doc View Source Color(Int32) Initializes a new instance of the Color struct. Declaration public Color(int rgba) Parameters Type Name Description System.Int32 rgba A packed integer containing all four color components in RGBA order. | Improve this Doc View Source Color(Int32, Int32, Int32) Initializes a new instance of the Color struct. Alpha is set to 255. Passed values are clamped within byte range. Declaration public Color(int red, int green, int blue) Parameters Type Name Description System.Int32 red The red component of the color. System.Int32 green The green component of the color. System.Int32 blue The blue component of the color. | Improve this Doc View Source Color(Int32, Int32, Int32, Int32) Initializes a new instance of the Color struct. Passed values are clamped within byte range. Declaration public Color(int red, int green, int blue, int alpha) Parameters Type Name Description System.Int32 red The red component of the color. System.Int32 green The green component of the color. System.Int32 blue The blue component of the color. System.Int32 alpha The alpha component of the color | Improve this Doc View Source Color(Single) Initializes a new instance of the Color struct. Declaration public Color(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Color(Single, Single, Single) Initializes a new instance of the Color struct. Alpha is set to 255. Declaration public Color(float red, float green, float blue) Parameters Type Name Description System.Single red The red component of the color. System.Single green The green component of the color. System.Single blue The blue component of the color. | Improve this Doc View Source Color(Single, Single, Single, Single) Initializes a new instance of the Color struct. Declaration public Color(float red, float green, float blue, float alpha) Parameters Type Name Description System.Single red The red component of the color. System.Single green The green component of the color. System.Single blue The blue component of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source Color(Single[]) Initializes a new instance of the Color struct. Declaration public Color(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements. | Improve this Doc View Source Color(UInt32) Initializes a new instance of the Color struct. Declaration public Color(uint rgba) Parameters Type Name Description System.UInt32 rgba A packed integer containing all four color components in RGBA order. Fields | Improve this Doc View Source A The alpha component of the color. Declaration public byte A Field Value Type Description System.Byte | Improve this Doc View Source AliceBlue AliceBlue color. Declaration public static readonly Color AliceBlue Field Value Type Description Color | Improve this Doc View Source AntiqueWhite AntiqueWhite color. Declaration public static readonly Color AntiqueWhite Field Value Type Description Color | Improve this Doc View Source Aqua Aqua color. Declaration public static readonly Color Aqua Field Value Type Description Color | Improve this Doc View Source Aquamarine Aquamarine color. Declaration public static readonly Color Aquamarine Field Value Type Description Color | Improve this Doc View Source Azure Azure color. Declaration public static readonly Color Azure Field Value Type Description Color | Improve this Doc View Source B The blue component of the color. Declaration public byte B Field Value Type Description System.Byte | Improve this Doc View Source Beige Beige color. Declaration public static readonly Color Beige Field Value Type Description Color | Improve this Doc View Source Bisque Bisque color. Declaration public static readonly Color Bisque Field Value Type Description Color | Improve this Doc View Source Black Black color. Declaration public static readonly Color Black Field Value Type Description Color | Improve this Doc View Source BlanchedAlmond BlanchedAlmond color. Declaration public static readonly Color BlanchedAlmond Field Value Type Description Color | Improve this Doc View Source Blue Blue color. Declaration public static readonly Color Blue Field Value Type Description Color | Improve this Doc View Source BlueViolet BlueViolet color. Declaration public static readonly Color BlueViolet Field Value Type Description Color | Improve this Doc View Source Brown Brown color. Declaration public static readonly Color Brown Field Value Type Description Color | Improve this Doc View Source BurlyWood BurlyWood color. Declaration public static readonly Color BurlyWood Field Value Type Description Color | Improve this Doc View Source CadetBlue CadetBlue color. Declaration public static readonly Color CadetBlue Field Value Type Description Color | Improve this Doc View Source Chartreuse Chartreuse color. Declaration public static readonly Color Chartreuse Field Value Type Description Color | Improve this Doc View Source Chocolate Chocolate color. Declaration public static readonly Color Chocolate Field Value Type Description Color | Improve this Doc View Source Coral Coral color. Declaration public static readonly Color Coral Field Value Type Description Color | Improve this Doc View Source CornflowerBlue CornflowerBlue color. Declaration public static readonly Color CornflowerBlue Field Value Type Description Color | Improve this Doc View Source Cornsilk Cornsilk color. Declaration public static readonly Color Cornsilk Field Value Type Description Color | Improve this Doc View Source Crimson Crimson color. Declaration public static readonly Color Crimson Field Value Type Description Color | Improve this Doc View Source Cyan Cyan color. Declaration public static readonly Color Cyan Field Value Type Description Color | Improve this Doc View Source DarkBlue DarkBlue color. Declaration public static readonly Color DarkBlue Field Value Type Description Color | Improve this Doc View Source DarkCyan DarkCyan color. Declaration public static readonly Color DarkCyan Field Value Type Description Color | Improve this Doc View Source DarkGoldenrod DarkGoldenrod color. Declaration public static readonly Color DarkGoldenrod Field Value Type Description Color | Improve this Doc View Source DarkGray DarkGray color. Declaration public static readonly Color DarkGray Field Value Type Description Color | Improve this Doc View Source DarkGreen DarkGreen color. Declaration public static readonly Color DarkGreen Field Value Type Description Color | Improve this Doc View Source DarkKhaki DarkKhaki color. Declaration public static readonly Color DarkKhaki Field Value Type Description Color | Improve this Doc View Source DarkMagenta DarkMagenta color. Declaration public static readonly Color DarkMagenta Field Value Type Description Color | Improve this Doc View Source DarkOliveGreen DarkOliveGreen color. Declaration public static readonly Color DarkOliveGreen Field Value Type Description Color | Improve this Doc View Source DarkOrange DarkOrange color. Declaration public static readonly Color DarkOrange Field Value Type Description Color | Improve this Doc View Source DarkOrchid DarkOrchid color. Declaration public static readonly Color DarkOrchid Field Value Type Description Color | Improve this Doc View Source DarkRed DarkRed color. Declaration public static readonly Color DarkRed Field Value Type Description Color | Improve this Doc View Source DarkSalmon DarkSalmon color. Declaration public static readonly Color DarkSalmon Field Value Type Description Color | Improve this Doc View Source DarkSeaGreen DarkSeaGreen color. Declaration public static readonly Color DarkSeaGreen Field Value Type Description Color | Improve this Doc View Source DarkSlateBlue DarkSlateBlue color. Declaration public static readonly Color DarkSlateBlue Field Value Type Description Color | Improve this Doc View Source DarkSlateGray DarkSlateGray color. Declaration public static readonly Color DarkSlateGray Field Value Type Description Color | Improve this Doc View Source DarkTurquoise DarkTurquoise color. Declaration public static readonly Color DarkTurquoise Field Value Type Description Color | Improve this Doc View Source DarkViolet DarkViolet color. Declaration public static readonly Color DarkViolet Field Value Type Description Color | Improve this Doc View Source DeepPink DeepPink color. Declaration public static readonly Color DeepPink Field Value Type Description Color | Improve this Doc View Source DeepSkyBlue DeepSkyBlue color. Declaration public static readonly Color DeepSkyBlue Field Value Type Description Color | Improve this Doc View Source DimGray DimGray color. Declaration public static readonly Color DimGray Field Value Type Description Color | Improve this Doc View Source DodgerBlue DodgerBlue color. Declaration public static readonly Color DodgerBlue Field Value Type Description Color | Improve this Doc View Source Firebrick Firebrick color. Declaration public static readonly Color Firebrick Field Value Type Description Color | Improve this Doc View Source FloralWhite FloralWhite color. Declaration public static readonly Color FloralWhite Field Value Type Description Color | Improve this Doc View Source ForestGreen ForestGreen color. Declaration public static readonly Color ForestGreen Field Value Type Description Color | Improve this Doc View Source Fuchsia Fuchsia color. Declaration public static readonly Color Fuchsia Field Value Type Description Color | Improve this Doc View Source G The green component of the color. Declaration public byte G Field Value Type Description System.Byte | Improve this Doc View Source Gainsboro Gainsboro color. Declaration public static readonly Color Gainsboro Field Value Type Description Color | Improve this Doc View Source GhostWhite GhostWhite color. Declaration public static readonly Color GhostWhite Field Value Type Description Color | Improve this Doc View Source Gold Gold color. Declaration public static readonly Color Gold Field Value Type Description Color | Improve this Doc View Source Goldenrod Goldenrod color. Declaration public static readonly Color Goldenrod Field Value Type Description Color | Improve this Doc View Source Gray Gray color. Declaration public static readonly Color Gray Field Value Type Description Color | Improve this Doc View Source Green Green color. Declaration public static readonly Color Green Field Value Type Description Color | Improve this Doc View Source GreenYellow GreenYellow color. Declaration public static readonly Color GreenYellow Field Value Type Description Color | Improve this Doc View Source Honeydew Honeydew color. Declaration public static readonly Color Honeydew Field Value Type Description Color | Improve this Doc View Source HotPink HotPink color. Declaration public static readonly Color HotPink Field Value Type Description Color | Improve this Doc View Source IndianRed IndianRed color. Declaration public static readonly Color IndianRed Field Value Type Description Color | Improve this Doc View Source Indigo Indigo color. Declaration public static readonly Color Indigo Field Value Type Description Color | Improve this Doc View Source Ivory Ivory color. Declaration public static readonly Color Ivory Field Value Type Description Color | Improve this Doc View Source Khaki Khaki color. Declaration public static readonly Color Khaki Field Value Type Description Color | Improve this Doc View Source Lavender Lavender color. Declaration public static readonly Color Lavender Field Value Type Description Color | Improve this Doc View Source LavenderBlush LavenderBlush color. Declaration public static readonly Color LavenderBlush Field Value Type Description Color | Improve this Doc View Source LawnGreen LawnGreen color. Declaration public static readonly Color LawnGreen Field Value Type Description Color | Improve this Doc View Source LemonChiffon LemonChiffon color. Declaration public static readonly Color LemonChiffon Field Value Type Description Color | Improve this Doc View Source LightBlue LightBlue color. Declaration public static readonly Color LightBlue Field Value Type Description Color | Improve this Doc View Source LightCoral LightCoral color. Declaration public static readonly Color LightCoral Field Value Type Description Color | Improve this Doc View Source LightCyan LightCyan color. Declaration public static readonly Color LightCyan Field Value Type Description Color | Improve this Doc View Source LightGoldenrodYellow LightGoldenrodYellow color. Declaration public static readonly Color LightGoldenrodYellow Field Value Type Description Color | Improve this Doc View Source LightGray LightGray color. Declaration public static readonly Color LightGray Field Value Type Description Color | Improve this Doc View Source LightGreen LightGreen color. Declaration public static readonly Color LightGreen Field Value Type Description Color | Improve this Doc View Source LightPink LightPink color. Declaration public static readonly Color LightPink Field Value Type Description Color | Improve this Doc View Source LightSalmon LightSalmon color. Declaration public static readonly Color LightSalmon Field Value Type Description Color | Improve this Doc View Source LightSeaGreen LightSeaGreen color. Declaration public static readonly Color LightSeaGreen Field Value Type Description Color | Improve this Doc View Source LightSkyBlue LightSkyBlue color. Declaration public static readonly Color LightSkyBlue Field Value Type Description Color | Improve this Doc View Source LightSlateGray LightSlateGray color. Declaration public static readonly Color LightSlateGray Field Value Type Description Color | Improve this Doc View Source LightSteelBlue LightSteelBlue color. Declaration public static readonly Color LightSteelBlue Field Value Type Description Color | Improve this Doc View Source LightYellow LightYellow color. Declaration public static readonly Color LightYellow Field Value Type Description Color | Improve this Doc View Source Lime Lime color. Declaration public static readonly Color Lime Field Value Type Description Color | Improve this Doc View Source LimeGreen LimeGreen color. Declaration public static readonly Color LimeGreen Field Value Type Description Color | Improve this Doc View Source Linen Linen color. Declaration public static readonly Color Linen Field Value Type Description Color | Improve this Doc View Source Magenta Magenta color. Declaration public static readonly Color Magenta Field Value Type Description Color | Improve this Doc View Source Maroon Maroon color. Declaration public static readonly Color Maroon Field Value Type Description Color | Improve this Doc View Source MediumAquamarine MediumAquamarine color. Declaration public static readonly Color MediumAquamarine Field Value Type Description Color | Improve this Doc View Source MediumBlue MediumBlue color. Declaration public static readonly Color MediumBlue Field Value Type Description Color | Improve this Doc View Source MediumOrchid MediumOrchid color. Declaration public static readonly Color MediumOrchid Field Value Type Description Color | Improve this Doc View Source MediumPurple MediumPurple color. Declaration public static readonly Color MediumPurple Field Value Type Description Color | Improve this Doc View Source MediumSeaGreen MediumSeaGreen color. Declaration public static readonly Color MediumSeaGreen Field Value Type Description Color | Improve this Doc View Source MediumSlateBlue MediumSlateBlue color. Declaration public static readonly Color MediumSlateBlue Field Value Type Description Color | Improve this Doc View Source MediumSpringGreen MediumSpringGreen color. Declaration public static readonly Color MediumSpringGreen Field Value Type Description Color | Improve this Doc View Source MediumTurquoise MediumTurquoise color. Declaration public static readonly Color MediumTurquoise Field Value Type Description Color | Improve this Doc View Source MediumVioletRed MediumVioletRed color. Declaration public static readonly Color MediumVioletRed Field Value Type Description Color | Improve this Doc View Source MidnightBlue MidnightBlue color. Declaration public static readonly Color MidnightBlue Field Value Type Description Color | Improve this Doc View Source MintCream MintCream color. Declaration public static readonly Color MintCream Field Value Type Description Color | Improve this Doc View Source MistyRose MistyRose color. Declaration public static readonly Color MistyRose Field Value Type Description Color | Improve this Doc View Source Moccasin Moccasin color. Declaration public static readonly Color Moccasin Field Value Type Description Color | Improve this Doc View Source NavajoWhite NavajoWhite color. Declaration public static readonly Color NavajoWhite Field Value Type Description Color | Improve this Doc View Source Navy Navy color. Declaration public static readonly Color Navy Field Value Type Description Color | Improve this Doc View Source OldLace OldLace color. Declaration public static readonly Color OldLace Field Value Type Description Color | Improve this Doc View Source Olive Olive color. Declaration public static readonly Color Olive Field Value Type Description Color | Improve this Doc View Source OliveDrab OliveDrab color. Declaration public static readonly Color OliveDrab Field Value Type Description Color | Improve this Doc View Source Orange Orange color. Declaration public static readonly Color Orange Field Value Type Description Color | Improve this Doc View Source OrangeRed OrangeRed color. Declaration public static readonly Color OrangeRed Field Value Type Description Color | Improve this Doc View Source Orchid Orchid color. Declaration public static readonly Color Orchid Field Value Type Description Color | Improve this Doc View Source PaleGoldenrod PaleGoldenrod color. Declaration public static readonly Color PaleGoldenrod Field Value Type Description Color | Improve this Doc View Source PaleGreen PaleGreen color. Declaration public static readonly Color PaleGreen Field Value Type Description Color | Improve this Doc View Source PaleTurquoise PaleTurquoise color. Declaration public static readonly Color PaleTurquoise Field Value Type Description Color | Improve this Doc View Source PaleVioletRed PaleVioletRed color. Declaration public static readonly Color PaleVioletRed Field Value Type Description Color | Improve this Doc View Source PapayaWhip PapayaWhip color. Declaration public static readonly Color PapayaWhip Field Value Type Description Color | Improve this Doc View Source PeachPuff PeachPuff color. Declaration public static readonly Color PeachPuff Field Value Type Description Color | Improve this Doc View Source Peru Peru color. Declaration public static readonly Color Peru Field Value Type Description Color | Improve this Doc View Source Pink Pink color. Declaration public static readonly Color Pink Field Value Type Description Color | Improve this Doc View Source Plum Plum color. Declaration public static readonly Color Plum Field Value Type Description Color | Improve this Doc View Source PowderBlue PowderBlue color. Declaration public static readonly Color PowderBlue Field Value Type Description Color | Improve this Doc View Source Purple Purple color. Declaration public static readonly Color Purple Field Value Type Description Color | Improve this Doc View Source R The red component of the color. Declaration public byte R Field Value Type Description System.Byte | Improve this Doc View Source Red Red color. Declaration public static readonly Color Red Field Value Type Description Color | Improve this Doc View Source RosyBrown RosyBrown color. Declaration public static readonly Color RosyBrown Field Value Type Description Color | Improve this Doc View Source RoyalBlue RoyalBlue color. Declaration public static readonly Color RoyalBlue Field Value Type Description Color | Improve this Doc View Source SaddleBrown SaddleBrown color. Declaration public static readonly Color SaddleBrown Field Value Type Description Color | Improve this Doc View Source Salmon Salmon color. Declaration public static readonly Color Salmon Field Value Type Description Color | Improve this Doc View Source SandyBrown SandyBrown color. Declaration public static readonly Color SandyBrown Field Value Type Description Color | Improve this Doc View Source SeaGreen SeaGreen color. Declaration public static readonly Color SeaGreen Field Value Type Description Color | Improve this Doc View Source SeaShell SeaShell color. Declaration public static readonly Color SeaShell Field Value Type Description Color | Improve this Doc View Source Sienna Sienna color. Declaration public static readonly Color Sienna Field Value Type Description Color | Improve this Doc View Source Silver Silver color. Declaration public static readonly Color Silver Field Value Type Description Color | Improve this Doc View Source SkyBlue SkyBlue color. Declaration public static readonly Color SkyBlue Field Value Type Description Color | Improve this Doc View Source SlateBlue SlateBlue color. Declaration public static readonly Color SlateBlue Field Value Type Description Color | Improve this Doc View Source SlateGray SlateGray color. Declaration public static readonly Color SlateGray Field Value Type Description Color | Improve this Doc View Source Snow Snow color. Declaration public static readonly Color Snow Field Value Type Description Color | Improve this Doc View Source SpringGreen SpringGreen color. Declaration public static readonly Color SpringGreen Field Value Type Description Color | Improve this Doc View Source SteelBlue SteelBlue color. Declaration public static readonly Color SteelBlue Field Value Type Description Color | Improve this Doc View Source Tan Tan color. Declaration public static readonly Color Tan Field Value Type Description Color | Improve this Doc View Source Teal Teal color. Declaration public static readonly Color Teal Field Value Type Description Color | Improve this Doc View Source Thistle Thistle color. Declaration public static readonly Color Thistle Field Value Type Description Color | Improve this Doc View Source Tomato Tomato color. Declaration public static readonly Color Tomato Field Value Type Description Color | Improve this Doc View Source Transparent Transparent color. Declaration public static readonly Color Transparent Field Value Type Description Color | Improve this Doc View Source Turquoise Turquoise color. Declaration public static readonly Color Turquoise Field Value Type Description Color | Improve this Doc View Source Violet Violet color. Declaration public static readonly Color Violet Field Value Type Description Color | Improve this Doc View Source Wheat Wheat color. Declaration public static readonly Color Wheat Field Value Type Description Color | Improve this Doc View Source White White color. Declaration public static readonly Color White Field Value Type Description Color | Improve this Doc View Source WhiteSmoke WhiteSmoke color. Declaration public static readonly Color WhiteSmoke Field Value Type Description Color | Improve this Doc View Source Yellow Yellow color. Declaration public static readonly Color Yellow Field Value Type Description Color | Improve this Doc View Source YellowGreen YellowGreen color. Declaration public static readonly Color YellowGreen Field Value Type Description Color | Improve this Doc View Source Zero Zero color. Declaration public static readonly Color Zero Field Value Type Description Color Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component. Property Value Type Description System.Byte The value of the alpha, red, green, or blue component, depending on the index. Methods | Improve this Doc View Source Add(Color, Color) Adds two colors. Declaration public static Color Add(Color left, Color right) Parameters Type Name Description Color left The first color to add. Color right The second color to add. Returns Type Description Color The sum of the two colors. | Improve this Doc View Source Add(ref Color, ref Color, out Color) Adds two colors. Declaration public static void Add(ref Color left, ref Color right, out Color result) Parameters Type Name Description Color left The first color to add. Color right The second color to add. Color result When the method completes, completes the sum of the two colors. | Improve this Doc View Source AdjustContrast(Color, Single) Adjusts the contrast of a color. Declaration public static Color AdjustContrast(Color value, float contrast) Parameters Type Name Description Color value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Returns Type Description Color The adjusted color. | Improve this Doc View Source AdjustContrast(ref Color, Single, out Color) Adjusts the contrast of a color. Declaration public static void AdjustContrast(ref Color value, float contrast, out Color result) Parameters Type Name Description Color value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Color result When the method completes, contains the adjusted color. | Improve this Doc View Source AdjustSaturation(Color, Single) Adjusts the saturation of a color. Declaration public static Color AdjustSaturation(Color value, float saturation) Parameters Type Name Description Color value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Returns Type Description Color The adjusted color. | Improve this Doc View Source AdjustSaturation(ref Color, Single, out Color) Adjusts the saturation of a color. Declaration public static void AdjustSaturation(ref Color value, float saturation, out Color result) Parameters Type Name Description Color value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Color result When the method completes, contains the adjusted color. | Improve this Doc View Source Clamp(Color, Color, Color) Restricts a value to be within a specified range. Declaration public static Color Clamp(Color value, Color min, Color max) Parameters Type Name Description Color value The value to clamp. Color min The minimum value. Color max The maximum value. Returns Type Description Color The clamped value. | Improve this Doc View Source Clamp(ref Color, ref Color, ref Color, out Color) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Color value, ref Color min, ref Color max, out Color result) Parameters Type Name Description Color value The value to clamp. Color min The minimum value. Color max The maximum value. Color result When the method completes, contains the clamped value. | Improve this Doc View Source Equals(Color) Determines whether the specified Color is equal to this instance. Declaration public bool Equals(Color other) Parameters Type Name Description Color other The Color to compare with this instance. Returns Type Description System.Boolean true if the specified Color is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Color) Determines whether the specified Color is equal to this instance. Declaration public bool Equals(ref Color other) Parameters Type Name Description Color other The Color to compare with this instance. Returns Type Description System.Boolean true if the specified Color is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source FromAbgr(Int32) Converts the color from a packed ABGR integer. Declaration public static Color FromAbgr(int color) Parameters Type Name Description System.Int32 color A packed integer containing all four color components in ABGR order Returns Type Description Color A color. | Improve this Doc View Source FromAbgr(UInt32) Converts the color from a packed ABGR integer. Declaration public static Color FromAbgr(uint color) Parameters Type Name Description System.UInt32 color A packed integer containing all four color components in ABGR order Returns Type Description Color A color. | Improve this Doc View Source FromBgra(Int32) Converts the color from a packed BGRA integer. Declaration public static Color FromBgra(int color) Parameters Type Name Description System.Int32 color A packed integer containing all four color components in BGRA order Returns Type Description Color A color. | Improve this Doc View Source FromBgra(UInt32) Converts the color from a packed BGRA integer. Declaration public static Color FromBgra(uint color) Parameters Type Name Description System.UInt32 color A packed integer containing all four color components in BGRA order Returns Type Description Color A color. | Improve this Doc View Source FromRgba(Int32) Converts the color from a packed BGRA integer. Declaration public static Color FromRgba(int color) Parameters Type Name Description System.Int32 color A packed integer containing all four color components in RGBA order Returns Type Description Color A color. | Improve this Doc View Source FromRgba(UInt32) Converts the color from a packed BGRA integer. Declaration public static Color FromRgba(uint color) Parameters Type Name Description System.UInt32 color A packed integer containing all four color components in RGBA order Returns Type Description Color A color. | Improve this Doc View Source GetBrightness() Gets the brightness. Declaration public float GetBrightness() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) brightness for this Color | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source GetHue() Gets the hue. Declaration public float GetHue() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) hue for this Color | Improve this Doc View Source GetSaturation() Gets the saturation. Declaration public float GetSaturation() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) saturation for this Color | Improve this Doc View Source Lerp(Color, Color, Single) Performs a linear interpolation between two colors. Declaration public static Color Lerp(Color start, Color end, float amount) Parameters Type Name Description Color start Start color. Color end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color The linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Color, ref Color, Single, out Color) Performs a linear interpolation between two colors. Declaration public static void Lerp(ref Color start, ref Color end, float amount, out Color result) Parameters Type Name Description Color start Start color. Color end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color result When the method completes, contains the linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Color, Color) Returns a color containing the largest components of the specified colorss. Declaration public static Color Max(Color left, Color right) Parameters Type Name Description Color left The first source color. Color right The second source color. Returns Type Description Color A color containing the largest components of the source colors. | Improve this Doc View Source Max(ref Color, ref Color, out Color) Returns a color containing the smallest components of the specified colors. Declaration public static void Max(ref Color left, ref Color right, out Color result) Parameters Type Name Description Color left The first source color. Color right The second source color. Color result When the method completes, contains an new color composed of the largest components of the source colors. | Improve this Doc View Source Min(Color, Color) Returns a color containing the smallest components of the specified colors. Declaration public static Color Min(Color left, Color right) Parameters Type Name Description Color left The first source color. Color right The second source color. Returns Type Description Color A color containing the smallest components of the source colors. | Improve this Doc View Source Min(ref Color, ref Color, out Color) Returns a color containing the smallest components of the specified colors. Declaration public static void Min(ref Color left, ref Color right, out Color result) Parameters Type Name Description Color left The first source color. Color right The second source color. Color result When the method completes, contains an new color composed of the smallest components of the source colors. | Improve this Doc View Source Modulate(Color, Color) Modulates two colors. Declaration public static Color Modulate(Color left, Color right) Parameters Type Name Description Color left The first color to modulate. Color right The second color to modulate. Returns Type Description Color The modulated color. | Improve this Doc View Source Modulate(ref Color, ref Color, out Color) Modulates two colors. Declaration public static void Modulate(ref Color left, ref Color right, out Color result) Parameters Type Name Description Color left The first color to modulate. Color right The second color to modulate. Color result When the method completes, contains the modulated color. | Improve this Doc View Source Negate(Color) Negates a color. Declaration public static Color Negate(Color value) Parameters Type Name Description Color value The color to negate. Returns Type Description Color The negated color. | Improve this Doc View Source Negate(ref Color, out Color) Negates a color. Declaration public static void Negate(ref Color value, out Color result) Parameters Type Name Description Color value The color to negate. Color result When the method completes, contains the negated color. | Improve this Doc View Source Premultiply(Color) Computes the premultiplied value of the provided color. Declaration public static Color Premultiply(Color value) Parameters Type Name Description Color value The non-premultiplied value. Returns Type Description Color The premultiplied result. | Improve this Doc View Source Premultiply(ref Color, out Color) Computes the premultiplied value of the provided color. Declaration public static void Premultiply(ref Color value, out Color result) Parameters Type Name Description Color value The non-premultiplied value. Color result The premultiplied result. | Improve this Doc View Source Scale(Color, Single) Scales a color. Declaration public static Color Scale(Color value, float scale) Parameters Type Name Description Color value The color to scale. System.Single scale The amount by which to scale. Returns Type Description Color The scaled color. | Improve this Doc View Source Scale(ref Color, Single, out Color) Scales a color. Declaration public static void Scale(ref Color value, float scale, out Color result) Parameters Type Name Description Color value The color to scale. System.Single scale The amount by which to scale. Color result When the method completes, contains the scaled color. | Improve this Doc View Source SmoothStep(Color, Color, Single) Performs a cubic interpolation between two colors. Declaration public static Color SmoothStep(Color start, Color end, float amount) Parameters Type Name Description Color start Start color. Color end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color The cubic interpolation of the two colors. | Improve this Doc View Source SmoothStep(ref Color, ref Color, Single, out Color) Performs a cubic interpolation between two colors. Declaration public static void SmoothStep(ref Color start, ref Color end, float amount, out Color result) Parameters Type Name Description Color start Start color. Color end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color result When the method completes, contains the cubic interpolation of the two colors. | Improve this Doc View Source Subtract(Color, Color) Subtracts two colors. Declaration public static Color Subtract(Color left, Color right) Parameters Type Name Description Color left The first color to subtract. Color right The second color to subtract Returns Type Description Color The difference of the two colors. | Improve this Doc View Source Subtract(ref Color, ref Color, out Color) Subtracts two colors. Declaration public static void Subtract(ref Color left, ref Color right, out Color result) Parameters Type Name Description Color left The first color to subtract. Color right The second color to subtract. Color result WHen the method completes, contains the difference of the two colors. | Improve this Doc View Source ToAbgr() Converts the color into a packed integer. Declaration public int ToAbgr() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToArray() Creates an array containing the elements of the color. Declaration public byte[] ToArray() Returns Type Description System.Byte [] A four-element array containing the components of the color in RGBA order. | Improve this Doc View Source ToBgra() Converts the color into a packed integer. Declaration public int ToBgra() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToByte(Int32) Declaration public static byte ToByte(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Byte | Improve this Doc View Source ToColor3() Converts the color into a three component color. Declaration public Color3 ToColor3() Returns Type Description Color3 A three component color containing the red, green, and blue components of the color. | Improve this Doc View Source ToColor4() Convert this instance to a Color4 Declaration public Color4 ToColor4() Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source ToRgba() Converts the color into a packed integer. Declaration public int ToRgba() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format to apply to each channel element (byte). Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format to apply to each channel element (byte). IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToVector3() Converts the color into a three component vector. Declaration public Vector3 ToVector3() Returns Type Description Vector3 A three component vector containing the red, green, and blue components of the color. | Improve this Doc View Source ToVector4() Converts the color into a four component vector. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A four component vector containing all four color components. Operators | Improve this Doc View Source Addition(Color, Color) Adds two colors. Declaration public static Color operator +(Color left, Color right) Parameters Type Name Description Color left The first color to add. Color right The second color to add. Returns Type Description Color The sum of the two colors. | Improve this Doc View Source Equality(Color, Color) Tests for equality between two objects. Declaration public static bool operator ==(Color left, Color right) Parameters Type Name Description Color left The first value to compare. Color right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Color to Color3) Performs an explicit conversion from Color to Color3 . Declaration public static explicit operator Color3(Color value) Parameters Type Name Description Color value The value. Returns Type Description Color3 The result of the conversion. | Improve this Doc View Source Explicit(Color to Vector3) Performs an explicit conversion from Color to Vector3 . Declaration public static explicit operator Vector3(Color value) Parameters Type Name Description Color value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(Color to Vector4) Performs an explicit conversion from Color to Vector4 . Declaration public static explicit operator Vector4(Color value) Parameters Type Name Description Color value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Explicit(Color to Int32) Performs an explicit conversion from to Color . Declaration public static explicit operator int (Color value) Parameters Type Name Description Color value The value. Returns Type Description System.Int32 The result of the conversion. | Improve this Doc View Source Explicit(Color3 to Color) Performs an explicit conversion from Color3 to Color . Declaration public static explicit operator Color(Color3 value) Parameters Type Name Description Color3 value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Explicit(Color4 to Color) Performs an explicit conversion from Color4 to Color . Declaration public static explicit operator Color(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Explicit(Vector3 to Color) Performs an explicit conversion from Vector3 to Color . Declaration public static explicit operator Color(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Explicit(Vector4 to Color) Performs an explicit conversion from Vector4 to Color . Declaration public static explicit operator Color(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Explicit(Int32 to Color) Performs an explicit conversion from to Color . Declaration public static explicit operator Color(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Implicit(Color to Color4) Performs an implicit conversion from Color to Color4 . Declaration public static implicit operator Color4(Color value) Parameters Type Name Description Color value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Inequality(Color, Color) Tests for inequality between two objects. Declaration public static bool operator !=(Color left, Color right) Parameters Type Name Description Color left The first value to compare. Color right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Color, Color) Modulates two colors. Declaration public static Color operator *(Color left, Color right) Parameters Type Name Description Color left The first color to modulate. Color right The second color to modulate. Returns Type Description Color The modulated color. | Improve this Doc View Source Multiply(Color, Single) Scales a color. Declaration public static Color operator *(Color value, float scale) Parameters Type Name Description Color value The factor by which to scale the color. System.Single scale The color to scale. Returns Type Description Color The scaled color. | Improve this Doc View Source Multiply(Single, Color) Scales a color. Declaration public static Color operator *(float scale, Color value) Parameters Type Name Description System.Single scale The factor by which to scale the color. Color value The color to scale. Returns Type Description Color The scaled color. | Improve this Doc View Source Subtraction(Color, Color) Subtracts two colors. Declaration public static Color operator -(Color left, Color right) Parameters Type Name Description Color left The first color to subtract. Color right The second color to subtract. Returns Type Description Color The difference of the two colors. | Improve this Doc View Source UnaryNegation(Color) Negates a color. Declaration public static Color operator -(Color value) Parameters Type Name Description Color value The color to negate. Returns Type Description Color A negated color. | Improve this Doc View Source UnaryPlus(Color) Assert a color (return it unchanged). Declaration public static Color operator +(Color value) Parameters Type Name Description Color value The color to assert (unchanged). Returns Type Description Color The asserted (unchanged) color. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Color3.html": {
    "href": "api/Fluint.Layer.Mathematics.Color3.html",
    "title": "Struct Color3 | Fluint",
    "keywords": "Struct Color3 Represents a color in the form of rgb. Implements IEquatable < Color3 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Color3 : IEquatable<Color3>, IFormattable Constructors | Improve this Doc View Source Color3(Vector3) Initializes a new instance of the Color3 struct. Declaration public Color3(Vector3 value) Parameters Type Name Description Vector3 value The red, green, and blue components of the color. | Improve this Doc View Source Color3(Int32) Initializes a new instance of the Color3 struct. Declaration public Color3(int rgb) Parameters Type Name Description System.Int32 rgb A packed integer containing all three color components in RGB order. The alpha component is ignored. | Improve this Doc View Source Color3(Single) Initializes a new instance of the Color3 struct. Declaration public Color3(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Color3(Single, Single, Single) Initializes a new instance of the Color3 struct. Declaration public Color3(float red, float green, float blue) Parameters Type Name Description System.Single red The red component of the color. System.Single green The green component of the color. System.Single blue The blue component of the color. | Improve this Doc View Source Color3(Single[]) Initializes a new instance of the Color3 struct. Declaration public Color3(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the red, green, and blue components of the color. This must be an array with three elements. Fields | Improve this Doc View Source Black The Black color (0, 0, 0). Declaration public static readonly Color3 Black Field Value Type Description Color3 | Improve this Doc View Source Blue The blue component of the color. Declaration public float Blue Field Value Type Description System.Single | Improve this Doc View Source Green The green component of the color. Declaration public float Green Field Value Type Description System.Single | Improve this Doc View Source Red The red component of the color. Declaration public float Red Field Value Type Description System.Single | Improve this Doc View Source White The White color (1, 1, 1, 1). Declaration public static readonly Color3 White Field Value Type Description Color3 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component. Property Value Type Description System.Single The value of the red, green, or blue component, depending on the index. Methods | Improve this Doc View Source Add(Color3, Color3) Adds two colors. Declaration public static Color3 Add(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to add. Color3 right The second color to add. Returns Type Description Color3 The sum of the two colors. | Improve this Doc View Source Add(ref Color3, ref Color3, out Color3) Adds two colors. Declaration public static void Add(ref Color3 left, ref Color3 right, out Color3 result) Parameters Type Name Description Color3 left The first color to add. Color3 right The second color to add. Color3 result When the method completes, completes the sum of the two colors. | Improve this Doc View Source AdjustContrast(Color3, Single) Adjusts the contrast of a color. Declaration public static Color3 AdjustContrast(Color3 value, float contrast) Parameters Type Name Description Color3 value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Returns Type Description Color3 The adjusted color. | Improve this Doc View Source AdjustContrast(ref Color3, Single, out Color3) Adjusts the contrast of a color. Declaration public static void AdjustContrast(ref Color3 value, float contrast, out Color3 result) Parameters Type Name Description Color3 value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Color3 result When the method completes, contains the adjusted color. | Improve this Doc View Source AdjustSaturation(Color3, Single) Adjusts the saturation of a color. Declaration public static Color3 AdjustSaturation(Color3 value, float saturation) Parameters Type Name Description Color3 value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Returns Type Description Color3 The adjusted color. | Improve this Doc View Source AdjustSaturation(ref Color3, Single, out Color3) Adjusts the saturation of a color. Declaration public static void AdjustSaturation(ref Color3 value, float saturation, out Color3 result) Parameters Type Name Description Color3 value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Color3 result When the method completes, contains the adjusted color. | Improve this Doc View Source Clamp(Color3, Color3, Color3) Restricts a value to be within a specified range. Declaration public static Color3 Clamp(Color3 value, Color3 min, Color3 max) Parameters Type Name Description Color3 value The value to clamp. Color3 min The minimum value. Color3 max The maximum value. Returns Type Description Color3 The clamped value. | Improve this Doc View Source Clamp(ref Color3, ref Color3, ref Color3, out Color3) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Color3 value, ref Color3 min, ref Color3 max, out Color3 result) Parameters Type Name Description Color3 value The value to clamp. Color3 min The minimum value. Color3 max The maximum value. Color3 result When the method completes, contains the clamped value. | Improve this Doc View Source Equals(Color3) Determines whether the specified Color3 is equal to this instance. Declaration public bool Equals(Color3 other) Parameters Type Name Description Color3 other The Color3 to compare with this instance. Returns Type Description System.Boolean true if the specified Color3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Color3) Determines whether the specified Color3 is equal to this instance. Declaration public bool Equals(ref Color3 other) Parameters Type Name Description Color3 other The Color3 to compare with this instance. Returns Type Description System.Boolean true if the specified Color3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Lerp(Color3, Color3, Single) Performs a linear interpolation between two colors. Declaration public static Color3 Lerp(Color3 start, Color3 end, float amount) Parameters Type Name Description Color3 start Start color. Color3 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color3 The linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Color3, ref Color3, Single, out Color3) Performs a linear interpolation between two colors. Declaration public static void Lerp(ref Color3 start, ref Color3 end, float amount, out Color3 result) Parameters Type Name Description Color3 start Start color. Color3 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color3 result When the method completes, contains the linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Color3, Color3) Returns a color containing the largest components of the specified colors. Declaration public static Color3 Max(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first source color. Color3 right The second source color. Returns Type Description Color3 A color containing the largest components of the source colors. | Improve this Doc View Source Max(ref Color3, ref Color3, out Color3) Returns a color containing the smallest components of the specified colors. Declaration public static void Max(ref Color3 left, ref Color3 right, out Color3 result) Parameters Type Name Description Color3 left The first source color. Color3 right The second source color. Color3 result When the method completes, contains an new color composed of the largest components of the source colors. | Improve this Doc View Source Min(Color3, Color3) Returns a color containing the smallest components of the specified colors. Declaration public static Color3 Min(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first source color. Color3 right The second source color. Returns Type Description Color3 A color containing the smallest components of the source colors. | Improve this Doc View Source Min(ref Color3, ref Color3, out Color3) Returns a color containing the smallest components of the specified colors. Declaration public static void Min(ref Color3 left, ref Color3 right, out Color3 result) Parameters Type Name Description Color3 left The first source color. Color3 right The second source color. Color3 result When the method completes, contains an new color composed of the smallest components of the source colors. | Improve this Doc View Source Modulate(Color3, Color3) Modulates two colors. Declaration public static Color3 Modulate(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to modulate. Color3 right The second color to modulate. Returns Type Description Color3 The modulated color. | Improve this Doc View Source Modulate(ref Color3, ref Color3, out Color3) Modulates two colors. Declaration public static void Modulate(ref Color3 left, ref Color3 right, out Color3 result) Parameters Type Name Description Color3 left The first color to modulate. Color3 right The second color to modulate. Color3 result When the method completes, contains the modulated color. | Improve this Doc View Source Negate(Color3) Negates a color. Declaration public static Color3 Negate(Color3 value) Parameters Type Name Description Color3 value The color to negate. Returns Type Description Color3 The negated color. | Improve this Doc View Source Negate(ref Color3, out Color3) Negates a color. Declaration public static void Negate(ref Color3 value, out Color3 result) Parameters Type Name Description Color3 value The color to negate. Color3 result When the method completes, contains the negated color. | Improve this Doc View Source Premultiply(Color3, Single) Computes the premultiplied value of the provided color. Declaration public static Color3 Premultiply(Color3 value, float alpha) Parameters Type Name Description Color3 value The non-premultiplied value. System.Single alpha The color alpha. Returns Type Description Color3 The premultiplied color. | Improve this Doc View Source Premultiply(ref Color3, Single, out Color3) Computes the premultiplied value of the provided color. Declaration public static void Premultiply(ref Color3 value, float alpha, out Color3 result) Parameters Type Name Description Color3 value The non-premultiplied value. System.Single alpha The color alpha. Color3 result The premultiplied result. | Improve this Doc View Source Scale(Color3, Single) Scales a color. Declaration public static Color3 Scale(Color3 value, float scale) Parameters Type Name Description Color3 value The color to scale. System.Single scale The amount by which to scale. Returns Type Description Color3 The scaled color. | Improve this Doc View Source Scale(ref Color3, Single, out Color3) Scales a color. Declaration public static void Scale(ref Color3 value, float scale, out Color3 result) Parameters Type Name Description Color3 value The color to scale. System.Single scale The amount by which to scale. Color3 result When the method completes, contains the scaled color. | Improve this Doc View Source SmoothStep(Color3, Color3, Single) Performs a cubic interpolation between two colors. Declaration public static Color3 SmoothStep(Color3 start, Color3 end, float amount) Parameters Type Name Description Color3 start Start color. Color3 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color3 The cubic interpolation of the two colors. | Improve this Doc View Source SmoothStep(ref Color3, ref Color3, Single, out Color3) Performs a cubic interpolation between two colors. Declaration public static void SmoothStep(ref Color3 start, ref Color3 end, float amount, out Color3 result) Parameters Type Name Description Color3 start Start color. Color3 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color3 result When the method completes, contains the cubic interpolation of the two colors. | Improve this Doc View Source Subtract(Color3, Color3) Subtracts two colors. Declaration public static Color3 Subtract(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to subtract. Color3 right The second color to subtract Returns Type Description Color3 The difference of the two colors. | Improve this Doc View Source Subtract(ref Color3, ref Color3, out Color3) Subtracts two colors. Declaration public static void Subtract(ref Color3 left, ref Color3 right, out Color3 result) Parameters Type Name Description Color3 left The first color to subtract. Color3 right The second color to subtract. Color3 result WHen the method completes, contains the difference of the two colors. | Improve this Doc View Source ToArray() Creates an array containing the elements of the color. Declaration public float[] ToArray() Returns Type Description System.Single [] A three-element array containing the components of the color. | Improve this Doc View Source ToBgra() Converts the color into a packed integer. Declaration public int ToBgra() Returns Type Description System.Int32 A packed integer containing all three color components. The alpha channel is set to 255. | Improve this Doc View Source ToRgba() Converts the color into a packed integer. Declaration public int ToRgba() Returns Type Description System.Int32 A packed integer containing all three color components. The alpha channel is set to 255. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format to apply to each channel element (float) Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format to apply to each channel element (float). IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToVector3() Converts the color into a three component vector. Declaration public Vector3 ToVector3() Returns Type Description Vector3 A three component vector containing the red, green, and blue components of the color. Operators | Improve this Doc View Source Addition(Color3, Color3) Adds two colors. Declaration public static Color3 operator +(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to add. Color3 right The second color to add. Returns Type Description Color3 The sum of the two colors. | Improve this Doc View Source Equality(Color3, Color3) Tests for equality between two objects. Declaration public static bool operator ==(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first value to compare. Color3 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Color3 to Color4) Performs an explicit conversion from Color3 to Color4 . Declaration public static explicit operator Color4(Color3 value) Parameters Type Name Description Color3 value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Explicit(Int32 to Color3) Performs an explicit conversion from to Color3 . Declaration public static explicit operator Color3(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description Color3 The result of the conversion. | Improve this Doc View Source Implicit(Color3 to Vector3) Performs an implicit conversion from Color3 to Vector3 . Declaration public static implicit operator Vector3(Color3 value) Parameters Type Name Description Color3 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Implicit(Vector3 to Color3) Performs an implicit conversion from Vector3 to Color3 . Declaration public static implicit operator Color3(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Color3 The result of the conversion. | Improve this Doc View Source Inequality(Color3, Color3) Tests for inequality between two objects. Declaration public static bool operator !=(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first value to compare. Color3 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Color3, Color3) Modulates two colors. Declaration public static Color3 operator *(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to modulate. Color3 right The second color to modulate. Returns Type Description Color3 The modulated color. | Improve this Doc View Source Multiply(Color3, Single) Scales a color. Declaration public static Color3 operator *(Color3 value, float scale) Parameters Type Name Description Color3 value The factor by which to scale the color. System.Single scale The color to scale. Returns Type Description Color3 The scaled color. | Improve this Doc View Source Multiply(Single, Color3) Scales a color. Declaration public static Color3 operator *(float scale, Color3 value) Parameters Type Name Description System.Single scale The factor by which to scale the color. Color3 value The color to scale. Returns Type Description Color3 The scaled color. | Improve this Doc View Source Subtraction(Color3, Color3) Subtracts two colors. Declaration public static Color3 operator -(Color3 left, Color3 right) Parameters Type Name Description Color3 left The first color to subtract. Color3 right The second color to subtract. Returns Type Description Color3 The difference of the two colors. | Improve this Doc View Source UnaryNegation(Color3) Negates a color. Declaration public static Color3 operator -(Color3 value) Parameters Type Name Description Color3 value The color to negate. Returns Type Description Color3 A negated color. | Improve this Doc View Source UnaryPlus(Color3) Assert a color (return it unchanged). Declaration public static Color3 operator +(Color3 value) Parameters Type Name Description Color3 value The color to assert (unchanged). Returns Type Description Color3 The asserted (unchanged) color. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Color4.html": {
    "href": "api/Fluint.Layer.Mathematics.Color4.html",
    "title": "Struct Color4 | Fluint",
    "keywords": "Struct Color4 Represents a color in the form of rgba. Implements IEquatable < Color4 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Color4 : IEquatable<Color4>, IFormattable Constructors | Improve this Doc View Source Color4(Color3) Initializes a new instance of the Color4 struct. Declaration public Color4(Color3 color) Parameters Type Name Description Color3 color Color3 used to initialize the color. | Improve this Doc View Source Color4(Color3, Single) Initializes a new instance of the Color4 struct. Declaration public Color4(Color3 color, float alpha) Parameters Type Name Description Color3 color Color3 used to initialize the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source Color4(Vector3, Single) Initializes a new instance of the Color4 struct. Declaration public Color4(Vector3 value, float alpha) Parameters Type Name Description Vector3 value The red, green, and blue components of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source Color4(Vector4) Initializes a new instance of the Color4 struct. Declaration public Color4(Vector4 value) Parameters Type Name Description Vector4 value The red, green, blue, and alpha components of the color. | Improve this Doc View Source Color4(Int32) Initializes a new instance of the Color4 struct. Declaration public Color4(int rgba) Parameters Type Name Description System.Int32 rgba A packed integer containing all four color components in RGBA order. | Improve this Doc View Source Color4(Single) Initializes a new instance of the Color4 struct. Declaration public Color4(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Color4(Single, Single, Single, Single) Initializes a new instance of the Color4 struct. Declaration public Color4(float red, float green, float blue, float alpha) Parameters Type Name Description System.Single red The red component of the color. System.Single green The green component of the color. System.Single blue The blue component of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source Color4(Single[]) Initializes a new instance of the Color4 struct. Declaration public Color4(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements. | Improve this Doc View Source Color4(UInt32) Initializes a new instance of the Color4 struct. Declaration public Color4(uint rgba) Parameters Type Name Description System.UInt32 rgba A packed integer containing all four color components in RGBA order. Fields | Improve this Doc View Source Alpha The alpha component of the color. Declaration public float Alpha Field Value Type Description System.Single | Improve this Doc View Source Black The Black color (0, 0, 0, 1). Declaration public static readonly Color4 Black Field Value Type Description Color4 | Improve this Doc View Source Blue The blue component of the color. Declaration public float Blue Field Value Type Description System.Single | Improve this Doc View Source Green The green component of the color. Declaration public float Green Field Value Type Description System.Single | Improve this Doc View Source Red The red component of the color. Declaration public float Red Field Value Type Description System.Single | Improve this Doc View Source White The White color (1, 1, 1, 1). Declaration public static readonly Color4 White Field Value Type Description Color4 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component. Property Value Type Description System.Single The value of the red, green, blue, and alpha components, depending on the index. Methods | Improve this Doc View Source Add(Color4, Color4) Adds two colors. Declaration public static Color4 Add(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to add. Color4 right The second color to add. Returns Type Description Color4 The sum of the two colors. | Improve this Doc View Source Add(ref Color4, ref Color4, out Color4) Adds two colors. Declaration public static void Add(ref Color4 left, ref Color4 right, out Color4 result) Parameters Type Name Description Color4 left The first color to add. Color4 right The second color to add. Color4 result When the method completes, completes the sum of the two colors. | Improve this Doc View Source AdjustContrast(Color4, Single) Adjusts the contrast of a color. Declaration public static Color4 AdjustContrast(Color4 value, float contrast) Parameters Type Name Description Color4 value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Returns Type Description Color4 The adjusted color. | Improve this Doc View Source AdjustContrast(ref Color4, Single, out Color4) Adjusts the contrast of a color. Declaration public static void AdjustContrast(ref Color4 value, float contrast, out Color4 result) Parameters Type Name Description Color4 value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Color4 result When the method completes, contains the adjusted color. | Improve this Doc View Source AdjustSaturation(Color4, Single) Adjusts the saturation of a color. Declaration public static Color4 AdjustSaturation(Color4 value, float saturation) Parameters Type Name Description Color4 value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Returns Type Description Color4 The adjusted color. | Improve this Doc View Source AdjustSaturation(ref Color4, Single, out Color4) Adjusts the saturation of a color. Declaration public static void AdjustSaturation(ref Color4 value, float saturation, out Color4 result) Parameters Type Name Description Color4 value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Color4 result When the method completes, contains the adjusted color. | Improve this Doc View Source Clamp(Color4, Color4, Color4) Restricts a value to be within a specified range. Declaration public static Color4 Clamp(Color4 value, Color4 min, Color4 max) Parameters Type Name Description Color4 value The value to clamp. Color4 min The minimum value. Color4 max The maximum value. Returns Type Description Color4 The clamped value. | Improve this Doc View Source Clamp(ref Color4, ref Color4, ref Color4, out Color4) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Color4 value, ref Color4 min, ref Color4 max, out Color4 result) Parameters Type Name Description Color4 value The value to clamp. Color4 min The minimum value. Color4 max The maximum value. Color4 result When the method completes, contains the clamped value. | Improve this Doc View Source Equals(Color4) Determines whether the specified Color4 is equal to this instance. Declaration public bool Equals(Color4 other) Parameters Type Name Description Color4 other The Color4 to compare with this instance. Returns Type Description System.Boolean true if the specified Color4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Color4) Determines whether the specified Color4 is equal to this instance. Declaration public bool Equals(ref Color4 other) Parameters Type Name Description Color4 other The Color4 to compare with this instance. Returns Type Description System.Boolean true if the specified Color4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Lerp(Color4, Color4, Single) Performs a linear interpolation between two colors. Declaration public static Color4 Lerp(Color4 start, Color4 end, float amount) Parameters Type Name Description Color4 start Start color. Color4 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color4 The linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Color4, ref Color4, Single, out Color4) Performs a linear interpolation between two colors. Declaration public static void Lerp(ref Color4 start, ref Color4 end, float amount, out Color4 result) Parameters Type Name Description Color4 start Start color. Color4 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color4 result When the method completes, contains the linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Color4, Color4) Returns a color containing the largest components of the specified colors. Declaration public static Color4 Max(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first source color. Color4 right The second source color. Returns Type Description Color4 A color containing the largest components of the source colors. | Improve this Doc View Source Max(ref Color4, ref Color4, out Color4) Returns a color containing the smallest components of the specified colors. Declaration public static void Max(ref Color4 left, ref Color4 right, out Color4 result) Parameters Type Name Description Color4 left The first source color. Color4 right The second source color. Color4 result When the method completes, contains an new color composed of the largest components of the source colors. | Improve this Doc View Source Min(Color4, Color4) Returns a color containing the smallest components of the specified colors. Declaration public static Color4 Min(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first source color. Color4 right The second source color. Returns Type Description Color4 A color containing the smallest components of the source colors. | Improve this Doc View Source Min(ref Color4, ref Color4, out Color4) Returns a color containing the smallest components of the specified colors. Declaration public static void Min(ref Color4 left, ref Color4 right, out Color4 result) Parameters Type Name Description Color4 left The first source color. Color4 right The second source color. Color4 result When the method completes, contains an new color composed of the smallest components of the source colors. | Improve this Doc View Source Modulate(Color4, Color4) Modulates two colors. Declaration public static Color4 Modulate(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to modulate. Color4 right The second color to modulate. Returns Type Description Color4 The modulated color. | Improve this Doc View Source Modulate(ref Color4, ref Color4, out Color4) Modulates two colors. Declaration public static void Modulate(ref Color4 left, ref Color4 right, out Color4 result) Parameters Type Name Description Color4 left The first color to modulate. Color4 right The second color to modulate. Color4 result When the method completes, contains the modulated color. | Improve this Doc View Source Negate(Color4) Negates a color. Declaration public static Color4 Negate(Color4 value) Parameters Type Name Description Color4 value The color to negate. Returns Type Description Color4 The negated color. | Improve this Doc View Source Negate(ref Color4, out Color4) Negates a color. Declaration public static void Negate(ref Color4 value, out Color4 result) Parameters Type Name Description Color4 value The color to negate. Color4 result When the method completes, contains the negated color. | Improve this Doc View Source Premultiply(Color4) Computes the premultiplied value of the provided color. Declaration public static Color4 Premultiply(Color4 value) Parameters Type Name Description Color4 value The non-premultiplied value. Returns Type Description Color4 The premultiplied result. | Improve this Doc View Source Premultiply(ref Color4, out Color4) Computes the premultiplied value of the provided color. Declaration public static void Premultiply(ref Color4 value, out Color4 result) Parameters Type Name Description Color4 value The non-premultiplied value. Color4 result The premultiplied result. | Improve this Doc View Source Scale(Color4, Single) Scales a color. Declaration public static Color4 Scale(Color4 value, float scale) Parameters Type Name Description Color4 value The color to scale. System.Single scale The amount by which to scale. Returns Type Description Color4 The scaled color. | Improve this Doc View Source Scale(ref Color4, Single, out Color4) Scales a color. Declaration public static void Scale(ref Color4 value, float scale, out Color4 result) Parameters Type Name Description Color4 value The color to scale. System.Single scale The amount by which to scale. Color4 result When the method completes, contains the scaled color. | Improve this Doc View Source SmoothStep(Color4, Color4, Single) Performs a cubic interpolation between two colors. Declaration public static Color4 SmoothStep(Color4 start, Color4 end, float amount) Parameters Type Name Description Color4 start Start color. Color4 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Color4 The cubic interpolation of the two colors. | Improve this Doc View Source SmoothStep(ref Color4, ref Color4, Single, out Color4) Performs a cubic interpolation between two colors. Declaration public static void SmoothStep(ref Color4 start, ref Color4 end, float amount, out Color4 result) Parameters Type Name Description Color4 start Start color. Color4 end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Color4 result When the method completes, contains the cubic interpolation of the two colors. | Improve this Doc View Source Subtract(Color4, Color4) Subtracts two colors. Declaration public static Color4 Subtract(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to subtract. Color4 right The second color to subtract Returns Type Description Color4 The difference of the two colors. | Improve this Doc View Source Subtract(ref Color4, ref Color4, out Color4) Subtracts two colors. Declaration public static void Subtract(ref Color4 left, ref Color4 right, out Color4 result) Parameters Type Name Description Color4 left The first color to subtract. Color4 right The second color to subtract. Color4 result WHen the method completes, contains the difference of the two colors. | Improve this Doc View Source ToArray() Creates an array containing the elements of the color. Declaration public float[] ToArray() Returns Type Description System.Single [] A four-element array containing the components of the color. | Improve this Doc View Source ToBgra() Converts the color into a packed integer. Declaration public int ToBgra() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToBgra(out Byte, out Byte, out Byte, out Byte) Converts the color into a packed integer. Declaration public void ToBgra(out byte r, out byte g, out byte b, out byte a) Parameters Type Name Description System.Byte r System.Byte g System.Byte b System.Byte a | Improve this Doc View Source ToRgba() Converts the color into a packed integer. Declaration public int ToRgba() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format to apply to each channel (float). Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format to apply to each channel (float). IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToVector3() Converts the color into a three component vector. Declaration public Vector3 ToVector3() Returns Type Description Vector3 A three component vector containing the red, green, and blue components of the color. | Improve this Doc View Source ToVector4() Converts the color into a four component vector. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A four component vector containing all four color components. Operators | Improve this Doc View Source Addition(Color4, Color4) Adds two colors. Declaration public static Color4 operator +(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to add. Color4 right The second color to add. Returns Type Description Color4 The sum of the two colors. | Improve this Doc View Source Equality(Color4, Color4) Tests for equality between two objects. Declaration public static bool operator ==(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first value to compare. Color4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Color4 to Color3) Performs an explicit conversion from Color4 to Color3 . Declaration public static explicit operator Color3(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description Color3 The result of the conversion. | Improve this Doc View Source Explicit(Color4 to ColorBGRA) Performs an explicit conversion from Vector4 to Color4 . Declaration public static explicit operator ColorBGRA(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Explicit(Color4 to Vector3) Performs an explicit conversion from Color4 to Vector3 . Declaration public static explicit operator Vector3(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(Color4 to Int32) Performs an explicit conversion from Color4 to . Declaration public static explicit operator int (Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description System.Int32 The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Color4) Performs an explicit conversion from Vector3 to Color4 . Declaration public static explicit operator Color4(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Explicit(Vector3 to Color4) Performs an explicit conversion from Vector3 to Color4 . Declaration public static explicit operator Color4(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Explicit(Vector4 to Color4) Performs an explicit conversion from Vector4 to Color4 . Declaration public static explicit operator Color4(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Explicit(Int32 to Color4) Performs an explicit conversion from to Color4 . Declaration public static explicit operator Color4(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Implicit(Color4 to Vector4) Performs an implicit conversion from Color4 to Vector4 . Declaration public static implicit operator Vector4(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Inequality(Color4, Color4) Tests for inequality between two objects. Declaration public static bool operator !=(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first value to compare. Color4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Color4, Color4) Modulates two colors. Declaration public static Color4 operator *(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to modulate. Color4 right The second color to modulate. Returns Type Description Color4 The modulated color. | Improve this Doc View Source Multiply(Color4, Single) Scales a color. Declaration public static Color4 operator *(Color4 value, float scale) Parameters Type Name Description Color4 value The factor by which to scale the color. System.Single scale The color to scale. Returns Type Description Color4 The scaled color. | Improve this Doc View Source Multiply(Single, Color4) Scales a color. Declaration public static Color4 operator *(float scale, Color4 value) Parameters Type Name Description System.Single scale The factor by which to scale the color. Color4 value The color to scale. Returns Type Description Color4 The scaled color. | Improve this Doc View Source Subtraction(Color4, Color4) Subtracts two colors. Declaration public static Color4 operator -(Color4 left, Color4 right) Parameters Type Name Description Color4 left The first color to subtract. Color4 right The second color to subtract. Returns Type Description Color4 The difference of the two colors. | Improve this Doc View Source UnaryNegation(Color4) Negates a color. Declaration public static Color4 operator -(Color4 value) Parameters Type Name Description Color4 value The color to negate. Returns Type Description Color4 A negated color. | Improve this Doc View Source UnaryPlus(Color4) Assert a color (return it unchanged). Declaration public static Color4 operator +(Color4 value) Parameters Type Name Description Color4 value The color to assert (unchanged). Returns Type Description Color4 The asserted (unchanged) color. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.ColorBGRA.html": {
    "href": "api/Fluint.Layer.Mathematics.ColorBGRA.html",
    "title": "Struct ColorBGRA | Fluint",
    "keywords": "Struct ColorBGRA Represents a 32-bit color (4 bytes) in the form of BGRA (in byte order: B, G, B, A). Implements IEquatable < ColorBGRA > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct ColorBGRA : IEquatable<ColorBGRA>, IFormattable Constructors | Improve this Doc View Source ColorBGRA(Vector3, Single) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(Vector3 value, float alpha) Parameters Type Name Description Vector3 value The red, green, and blue components of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source ColorBGRA(Vector4) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(Vector4 value) Parameters Type Name Description Vector4 value The red, green, blue, and alpha components of the color. | Improve this Doc View Source ColorBGRA(Byte) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(byte value) Parameters Type Name Description System.Byte value The value that will be assigned to all components. | Improve this Doc View Source ColorBGRA(Byte, Byte, Byte, Byte) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(byte red, byte green, byte blue, byte alpha) Parameters Type Name Description System.Byte red The red component of the color. System.Byte green The green component of the color. System.Byte blue The blue component of the color. System.Byte alpha The alpha component of the color. | Improve this Doc View Source ColorBGRA(Byte[]) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(byte[] values) Parameters Type Name Description System.Byte [] values The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements. | Improve this Doc View Source ColorBGRA(Int32) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(int bgra) Parameters Type Name Description System.Int32 bgra A packed integer containing all four color components in BGRA. | Improve this Doc View Source ColorBGRA(Single) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source ColorBGRA(Single, Single, Single, Single) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(float red, float green, float blue, float alpha) Parameters Type Name Description System.Single red The red component of the color. System.Single green The green component of the color. System.Single blue The blue component of the color. System.Single alpha The alpha component of the color. | Improve this Doc View Source ColorBGRA(Single[]) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements. | Improve this Doc View Source ColorBGRA(UInt32) Initializes a new instance of the ColorBGRA struct. Declaration public ColorBGRA(uint bgra) Parameters Type Name Description System.UInt32 bgra A packed integer containing all four color components in BGRA order. Fields | Improve this Doc View Source A The alpha component of the color. Declaration public byte A Field Value Type Description System.Byte | Improve this Doc View Source B The blue component of the color. Declaration public byte B Field Value Type Description System.Byte | Improve this Doc View Source G The green component of the color. Declaration public byte G Field Value Type Description System.Byte | Improve this Doc View Source R The red component of the color. Declaration public byte R Field Value Type Description System.Byte Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component. Property Value Type Description System.Byte The value of the alpha, red, green, or blue component, depending on the index. Methods | Improve this Doc View Source Add(ColorBGRA, ColorBGRA) Adds two colors. Declaration public static ColorBGRA Add(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to add. ColorBGRA right The second color to add. Returns Type Description ColorBGRA The sum of the two colors. | Improve this Doc View Source Add(ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Adds two colors. Declaration public static void Add(ref ColorBGRA left, ref ColorBGRA right, out ColorBGRA result) Parameters Type Name Description ColorBGRA left The first color to add. ColorBGRA right The second color to add. ColorBGRA result When the method completes, completes the sum of the two colors. | Improve this Doc View Source AdjustContrast(ColorBGRA, Single) Adjusts the contrast of a color. Declaration public static ColorBGRA AdjustContrast(ColorBGRA value, float contrast) Parameters Type Name Description ColorBGRA value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. Returns Type Description ColorBGRA The adjusted color. | Improve this Doc View Source AdjustContrast(ref ColorBGRA, Single, out ColorBGRA) Adjusts the contrast of a color. Declaration public static void AdjustContrast(ref ColorBGRA value, float contrast, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The color whose contrast is to be adjusted. System.Single contrast The amount by which to adjust the contrast. ColorBGRA result When the method completes, contains the adjusted color. | Improve this Doc View Source AdjustSaturation(ColorBGRA, Single) Adjusts the saturation of a color. Declaration public static ColorBGRA AdjustSaturation(ColorBGRA value, float saturation) Parameters Type Name Description ColorBGRA value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. Returns Type Description ColorBGRA The adjusted color. | Improve this Doc View Source AdjustSaturation(ref ColorBGRA, Single, out ColorBGRA) Adjusts the saturation of a color. Declaration public static void AdjustSaturation(ref ColorBGRA value, float saturation, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The color whose saturation is to be adjusted. System.Single saturation The amount by which to adjust the saturation. ColorBGRA result When the method completes, contains the adjusted color. | Improve this Doc View Source Clamp(ColorBGRA, ColorBGRA, ColorBGRA) Restricts a value to be within a specified range. Declaration public static ColorBGRA Clamp(ColorBGRA value, ColorBGRA min, ColorBGRA max) Parameters Type Name Description ColorBGRA value The value to clamp. ColorBGRA min The minimum value. ColorBGRA max The maximum value. Returns Type Description ColorBGRA The clamped value. | Improve this Doc View Source Clamp(ref ColorBGRA, ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Restricts a value to be within a specified range. Declaration public static void Clamp(ref ColorBGRA value, ref ColorBGRA min, ref ColorBGRA max, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The value to clamp. ColorBGRA min The minimum value. ColorBGRA max The maximum value. ColorBGRA result When the method completes, contains the clamped value. | Improve this Doc View Source Equals(ColorBGRA) Determines whether the specified ColorBGRA is equal to this instance. Declaration public bool Equals(ColorBGRA other) Parameters Type Name Description ColorBGRA other The ColorBGRA to compare with this instance. Returns Type Description System.Boolean true if the specified ColorBGRA is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref ColorBGRA) Determines whether the specified ColorBGRA is equal to this instance. Declaration public bool Equals(ref ColorBGRA other) Parameters Type Name Description ColorBGRA other The ColorBGRA to compare with this instance. Returns Type Description System.Boolean true if the specified ColorBGRA is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source FromBgra(Int32) Converts the color from a packed BGRA integer. Declaration public static ColorBGRA FromBgra(int color) Parameters Type Name Description System.Int32 color A packed integer containing all four color components in BGRA order Returns Type Description ColorBGRA A color. | Improve this Doc View Source FromBgra(UInt32) Converts the color from a packed BGRA integer. Declaration public static ColorBGRA FromBgra(uint color) Parameters Type Name Description System.UInt32 color A packed integer containing all four color components in BGRA order Returns Type Description ColorBGRA A color. | Improve this Doc View Source FromRgba(Int32) Converts the color from a packed RGBA integer. Declaration public static ColorBGRA FromRgba(int color) Parameters Type Name Description System.Int32 color A packed integer containing all four color components in RGBA order Returns Type Description ColorBGRA A color. | Improve this Doc View Source FromRgba(UInt32) Converts the color from a packed RGBA integer. Declaration public static ColorBGRA FromRgba(uint color) Parameters Type Name Description System.UInt32 color A packed integer containing all four color components in RGBA order Returns Type Description ColorBGRA A color. | Improve this Doc View Source GetBrightness() Gets the brightness. Declaration public float GetBrightness() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) saturation for this | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source GetHue() Gets the hue. Declaration public float GetHue() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) saturation for this | Improve this Doc View Source GetSaturation() Gets the saturation. Declaration public float GetSaturation() Returns Type Description System.Single The Hue-Saturation-Brightness (HSB) saturation for this | Improve this Doc View Source Lerp(ColorBGRA, ColorBGRA, Single) Performs a linear interpolation between two colors. Declaration public static ColorBGRA Lerp(ColorBGRA start, ColorBGRA end, float amount) Parameters Type Name Description ColorBGRA start Start color. ColorBGRA end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description ColorBGRA The linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref ColorBGRA, ref ColorBGRA, Single, out ColorBGRA) Performs a linear interpolation between two colors. Declaration public static void Lerp(ref ColorBGRA start, ref ColorBGRA end, float amount, out ColorBGRA result) Parameters Type Name Description ColorBGRA start Start color. ColorBGRA end End color. System.Single amount Value between 0 and 1 indicating the weight of end . ColorBGRA result When the method completes, contains the linear interpolation of the two colors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(ColorBGRA, ColorBGRA) Returns a color containing the largest components of the specified colorss. Declaration public static ColorBGRA Max(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first source color. ColorBGRA right The second source color. Returns Type Description ColorBGRA A color containing the largest components of the source colors. | Improve this Doc View Source Max(ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Returns a color containing the smallest components of the specified colorss. Declaration public static void Max(ref ColorBGRA left, ref ColorBGRA right, out ColorBGRA result) Parameters Type Name Description ColorBGRA left The first source color. ColorBGRA right The second source color. ColorBGRA result When the method completes, contains an new color composed of the largest components of the source colorss. | Improve this Doc View Source Min(ColorBGRA, ColorBGRA) Returns a color containing the smallest components of the specified colors. Declaration public static ColorBGRA Min(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first source color. ColorBGRA right The second source color. Returns Type Description ColorBGRA A color containing the smallest components of the source colors. | Improve this Doc View Source Min(ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Returns a color containing the smallest components of the specified colors. Declaration public static void Min(ref ColorBGRA left, ref ColorBGRA right, out ColorBGRA result) Parameters Type Name Description ColorBGRA left The first source color. ColorBGRA right The second source color. ColorBGRA result When the method completes, contains an new color composed of the smallest components of the source colors. | Improve this Doc View Source Modulate(ColorBGRA, ColorBGRA) Modulates two colors. Declaration public static ColorBGRA Modulate(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to modulate. ColorBGRA right The second color to modulate. Returns Type Description ColorBGRA The modulated color. | Improve this Doc View Source Modulate(ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Modulates two colors. Declaration public static void Modulate(ref ColorBGRA left, ref ColorBGRA right, out ColorBGRA result) Parameters Type Name Description ColorBGRA left The first color to modulate. ColorBGRA right The second color to modulate. ColorBGRA result When the method completes, contains the modulated color. | Improve this Doc View Source Negate(ColorBGRA) Negates a color. Declaration public static ColorBGRA Negate(ColorBGRA value) Parameters Type Name Description ColorBGRA value The color to negate. Returns Type Description ColorBGRA The negated color. | Improve this Doc View Source Negate(ref ColorBGRA, out ColorBGRA) Negates a color. Declaration public static void Negate(ref ColorBGRA value, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The color to negate. ColorBGRA result When the method completes, contains the negated color. | Improve this Doc View Source Premultiply(ColorBGRA) Computes the premultiplied value of the provided color. Declaration public static ColorBGRA Premultiply(ColorBGRA value) Parameters Type Name Description ColorBGRA value The non-premultiplied value. Returns Type Description ColorBGRA The premultiplied result. | Improve this Doc View Source Premultiply(ref ColorBGRA, out ColorBGRA) Computes the premultiplied value of the provided color. Declaration public static void Premultiply(ref ColorBGRA value, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The non-premultiplied value. ColorBGRA result The premultiplied result. | Improve this Doc View Source Scale(ColorBGRA, Single) Scales a color. Declaration public static ColorBGRA Scale(ColorBGRA value, float scale) Parameters Type Name Description ColorBGRA value The color to scale. System.Single scale The amount by which to scale. Returns Type Description ColorBGRA The scaled color. | Improve this Doc View Source Scale(ref ColorBGRA, Single, out ColorBGRA) Scales a color. Declaration public static void Scale(ref ColorBGRA value, float scale, out ColorBGRA result) Parameters Type Name Description ColorBGRA value The color to scale. System.Single scale The amount by which to scale. ColorBGRA result When the method completes, contains the scaled color. | Improve this Doc View Source SmoothStep(ColorBGRA, ColorBGRA, Single) Performs a cubic interpolation between two colors. Declaration public static ColorBGRA SmoothStep(ColorBGRA start, ColorBGRA end, float amount) Parameters Type Name Description ColorBGRA start Start color. ColorBGRA end End color. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description ColorBGRA The cubic interpolation of the two colors. | Improve this Doc View Source SmoothStep(ref ColorBGRA, ref ColorBGRA, Single, out ColorBGRA) Performs a cubic interpolation between two colors. Declaration public static void SmoothStep(ref ColorBGRA start, ref ColorBGRA end, float amount, out ColorBGRA result) Parameters Type Name Description ColorBGRA start Start color. ColorBGRA end End color. System.Single amount Value between 0 and 1 indicating the weight of end . ColorBGRA result When the method completes, contains the cubic interpolation of the two colors. | Improve this Doc View Source Subtract(ColorBGRA, ColorBGRA) Subtracts two colors. Declaration public static ColorBGRA Subtract(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to subtract. ColorBGRA right The second color to subtract Returns Type Description ColorBGRA The difference of the two colors. | Improve this Doc View Source Subtract(ref ColorBGRA, ref ColorBGRA, out ColorBGRA) Subtracts two colors. Declaration public static void Subtract(ref ColorBGRA left, ref ColorBGRA right, out ColorBGRA result) Parameters Type Name Description ColorBGRA left The first color to subtract. ColorBGRA right The second color to subtract. ColorBGRA result WHen the method completes, contains the difference of the two colors. | Improve this Doc View Source ToArray() Creates an array containing the elements of the color. Declaration public byte[] ToArray() Returns Type Description System.Byte [] A four-element array containing the components of the color in BGRA order. | Improve this Doc View Source ToBgra() Converts the color into a packed integer. Declaration public int ToBgra() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToColor3() Converts the color into a three component color. Declaration public Color3 ToColor3() Returns Type Description Color3 A three component color containing the red, green, and blue components of the color. | Improve this Doc View Source ToRgba() Converts the color into a packed integer. Declaration public int ToRgba() Returns Type Description System.Int32 A packed integer containing all four color components. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format to apply to each channel (byte). Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format to apply to each channel (byte). IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToVector3() Converts the color into a three component vector. Declaration public Vector3 ToVector3() Returns Type Description Vector3 A three component vector containing the red, green, and blue components of the color. | Improve this Doc View Source ToVector4() Converts the color into a four component vector. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A four component vector containing all four color components. Operators | Improve this Doc View Source Addition(ColorBGRA, ColorBGRA) Adds two colors. Declaration public static ColorBGRA operator +(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to add. ColorBGRA right The second color to add. Returns Type Description ColorBGRA The sum of the two colors. | Improve this Doc View Source Equality(ColorBGRA, ColorBGRA) Tests for equality between two objects. Declaration public static bool operator ==(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first value to compare. ColorBGRA right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Color3 to ColorBGRA) Performs an explicit conversion from Color3 to ColorBGRA . Declaration public static explicit operator ColorBGRA(Color3 value) Parameters Type Name Description Color3 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Explicit(Color4 to ColorBGRA) Performs an explicit conversion from Color4 to ColorBGRA . Declaration public static explicit operator ColorBGRA(Color4 value) Parameters Type Name Description Color4 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Color3) Performs an explicit conversion from ColorBGRA to Color3 . Declaration public static explicit operator Color3(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Color3 The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Color4) Performs an explicit conversion from ColorBGRA to Color4 . Declaration public static explicit operator Color4(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Color4 The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Vector3) Performs an explicit conversion from ColorBGRA to Vector3 . Declaration public static explicit operator Vector3(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Vector4) Performs an explicit conversion from ColorBGRA to Vector4 . Declaration public static explicit operator Vector4(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Explicit(ColorBGRA to Int32) Performs an explicit conversion from ColorBGRA to . Declaration public static explicit operator int (ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description System.Int32 The result of the conversion. | Improve this Doc View Source Explicit(Vector3 to ColorBGRA) Performs an explicit conversion from Vector3 to ColorBGRA . Declaration public static explicit operator ColorBGRA(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Explicit(Vector4 to ColorBGRA) Performs an explicit conversion from Vector4 to ColorBGRA . Declaration public static explicit operator ColorBGRA(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Explicit(Int32 to ColorBGRA) Performs an explicit conversion from to ColorBGRA . Declaration public static explicit operator ColorBGRA(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Implicit(Color to ColorBGRA) Performs an implicit conversion from to ColorBGRA . Declaration public static implicit operator ColorBGRA(Color value) Parameters Type Name Description Color value The value. Returns Type Description ColorBGRA The result of the conversion. | Improve this Doc View Source Implicit(ColorBGRA to Color) Performs an implicit conversion from ColorBGRA to . Declaration public static implicit operator Color(ColorBGRA value) Parameters Type Name Description ColorBGRA value The value. Returns Type Description Color The result of the conversion. | Improve this Doc View Source Inequality(ColorBGRA, ColorBGRA) Tests for inequality between two objects. Declaration public static bool operator !=(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first value to compare. ColorBGRA right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(ColorBGRA, ColorBGRA) Modulates two colors. Declaration public static ColorBGRA operator *(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to modulate. ColorBGRA right The second color to modulate. Returns Type Description ColorBGRA The modulated color. | Improve this Doc View Source Multiply(ColorBGRA, Single) Scales a color. Declaration public static ColorBGRA operator *(ColorBGRA value, float scale) Parameters Type Name Description ColorBGRA value The factor by which to scale the color. System.Single scale The color to scale. Returns Type Description ColorBGRA The scaled color. | Improve this Doc View Source Multiply(Single, ColorBGRA) Scales a color. Declaration public static ColorBGRA operator *(float scale, ColorBGRA value) Parameters Type Name Description System.Single scale The factor by which to scale the color. ColorBGRA value The color to scale. Returns Type Description ColorBGRA The scaled color. | Improve this Doc View Source Subtraction(ColorBGRA, ColorBGRA) Subtracts two colors. Declaration public static ColorBGRA operator -(ColorBGRA left, ColorBGRA right) Parameters Type Name Description ColorBGRA left The first color to subtract. ColorBGRA right The second color to subtract. Returns Type Description ColorBGRA The difference of the two colors. | Improve this Doc View Source UnaryNegation(ColorBGRA) Negates a color. Declaration public static ColorBGRA operator -(ColorBGRA value) Parameters Type Name Description ColorBGRA value The color to negate. Returns Type Description ColorBGRA A negated color. | Improve this Doc View Source UnaryPlus(ColorBGRA) Assert a color (return it unchanged). Declaration public static ColorBGRA operator +(ColorBGRA value) Parameters Type Name Description ColorBGRA value The color to assert (unchange). Returns Type Description ColorBGRA The asserted (unchanged) color. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.ContainmentType.html": {
    "href": "api/Fluint.Layer.Mathematics.ContainmentType.html",
    "title": "Enum ContainmentType | Fluint",
    "keywords": "Enum ContainmentType Describes how one bounding volume contains another. Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public enum ContainmentType : int Fields Name Description Contains One bounding volume completely contains another. Disjoint The two bounding volumes don't intersect at all. Intersects The two bounding volumes overlap."
  },
  "api/Fluint.Layer.Mathematics.FrustumCameraParams.html": {
    "href": "api/Fluint.Layer.Mathematics.FrustumCameraParams.html",
    "title": "Struct FrustumCameraParams | Fluint",
    "keywords": "Struct FrustumCameraParams Frustum camera parameters. Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct FrustumCameraParams Fields | Improve this Doc View Source AspectRatio Aspect ratio. Declaration public float AspectRatio Field Value Type Description System.Single | Improve this Doc View Source FOV Field of view. Declaration public float FOV Field Value Type Description System.Single | Improve this Doc View Source LookAtDir Looking at direction of the camera. Declaration public Vector3 LookAtDir Field Value Type Description Vector3 | Improve this Doc View Source Position Position of the camera. Declaration public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source UpDir Up direction. Declaration public Vector3 UpDir Field Value Type Description Vector3 | Improve this Doc View Source ZFar Z far distance. Declaration public float ZFar Field Value Type Description System.Single | Improve this Doc View Source ZNear Z near distance. Declaration public float ZNear Field Value Type Description System.Single"
  },
  "api/Fluint.Layer.Mathematics.Half.html": {
    "href": "api/Fluint.Layer.Mathematics.Half.html",
    "title": "Struct Half | Fluint",
    "keywords": "Struct Half A half precision (16 bit) floating point value. Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Half Constructors | Improve this Doc View Source Half(Single) Initializes a new instance of the DXPlayground.Mathematics.Half structure. Declaration public Half(float value) Parameters Type Name Description System.Single value The floating point value that should be stored in 16 bit format. | Improve this Doc View Source Half(UInt16) Initializes a new instance of the DXPlayground.Mathematics.Half structure. Declaration public Half(ushort rawvalue) Parameters Type Name Description System.UInt16 rawvalue The floating point value that should be stored in 16 bit format. Fields | Improve this Doc View Source AdditionRounding Additional rounding. Declaration public const int AdditionRounding = null Field Value Type Description System.Int32 | Improve this Doc View Source Epsilon Smallest such that 1.0 + epsilon != 1.0 Declaration public static readonly float Epsilon Field Value Type Description System.Single | Improve this Doc View Source ExponentRadix Exponent radix. Declaration public const int ExponentRadix = null Field Value Type Description System.Int32 | Improve this Doc View Source MantissaBits Number of bits in the mantissa. Declaration public const int MantissaBits = null Field Value Type Description System.Int32 | Improve this Doc View Source MaximumBinaryExponent Maximum binary exponent. Declaration public const int MaximumBinaryExponent = null Field Value Type Description System.Int32 | Improve this Doc View Source MaximumDecimalExponent Maximum decimal exponent. Declaration public const int MaximumDecimalExponent = null Field Value Type Description System.Int32 | Improve this Doc View Source MaxValue Maximum value of the number. Declaration public static readonly float MaxValue Field Value Type Description System.Single | Improve this Doc View Source MinimumBinaryExponent Minimum binary exponent. Declaration public const int MinimumBinaryExponent = null Field Value Type Description System.Int32 | Improve this Doc View Source MinimumDecimalExponent Minimum decimal exponent. Declaration public const int MinimumDecimalExponent = null Field Value Type Description System.Int32 | Improve this Doc View Source MinValue Minimum value of the number. Declaration public static readonly float MinValue Field Value Type Description System.Single | Improve this Doc View Source PrecisionDigits Number of decimal digits of precision. Declaration public const int PrecisionDigits = null Field Value Type Description System.Int32 Properties | Improve this Doc View Source RawValue Gets or sets the raw 16 bit value used to back this half-float. Declaration public ushort RawValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source ConvertToFloat(Half[]) Converts an array of half precision values into full precision values. Declaration public static float[] ConvertToFloat(Half[] values) Parameters Type Name Description Half [] values The values to be converted. Returns Type Description System.Single [] An array of converted values. | Improve this Doc View Source ConvertToHalf(Single[]) Converts an array of full precision values into half precision values. Declaration public static Half[] ConvertToHalf(float[] values) Parameters Type Name Description System.Single [] values The values to be converted. Returns Type Description Half [] An array of converted values. | Improve this Doc View Source Equals(Half) Returns a value that indicates whether the current instance is equal to the specified object. Declaration public bool Equals(Half other) Parameters Type Name Description Half other Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(ref Half, ref Half) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(ref Half value1, ref Half value2) Parameters Type Name Description Half value1 Half value2 Returns Type Description System.Boolean true if value1 is the same instance as value2 or if both are null references or if value1.Equals(value2) returns true ; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. | Improve this Doc View Source ToString() Converts the value of the object to its equivalent string representation. Declaration public override string ToString() Returns Type Description System.String The string representation of the value of this instance. Operators | Improve this Doc View Source Equality(Half, Half) Tests for equality between two objects. Declaration public static bool operator ==(Half left, Half right) Parameters Type Name Description Half left The first value to compare. Half right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Implicit(Half to Single) Performs an implicit conversion from DXPlayground.Mathematics.Half to System.Single . Declaration public static implicit operator float (Half value) Parameters Type Name Description Half value The value to be converted. Returns Type Description System.Single The converted value. | Improve this Doc View Source Implicit(Single to Half) Performs an explicit conversion from System.Single to DXPlayground.Mathematics.Half . Declaration public static implicit operator Half(float value) Parameters Type Name Description System.Single value The value to be converted. Returns Type Description Half The converted value. | Improve this Doc View Source Inequality(Half, Half) Tests for inequality between two objects. Declaration public static bool operator !=(Half left, Half right) Parameters Type Name Description Half left The first value to compare. Half right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false ."
  },
  "api/Fluint.Layer.Mathematics.Half2.html": {
    "href": "api/Fluint.Layer.Mathematics.Half2.html",
    "title": "Struct Half2 | Fluint",
    "keywords": "Struct Half2 Defines a two component vector, using half precision floating point coordinates. Implements IEquatable < Half2 > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Half2 : IEquatable<Half2> Constructors | Improve this Doc View Source Half2(Half) Initializes a new instance of the DXPlayground.Mathematics.Half2 structure. Declaration public Half2(Half value) Parameters Type Name Description Half value The value to set for both the X and Y components. | Improve this Doc View Source Half2(Half, Half) Initializes a new instance of the DXPlayground.Mathematics.Half2 structure. Declaration public Half2(Half x, Half y) Parameters Type Name Description Half x The X component. Half y The Y component. | Improve this Doc View Source Half2(Single) Initializes a new instance of the DXPlayground.Mathematics.Half2 structure. Declaration public Half2(float value) Parameters Type Name Description System.Single value Value to initialize X and Y components with. | Improve this Doc View Source Half2(Single, Single) Initializes a new instance of the DXPlayground.Mathematics.Half2 structure. Declaration public Half2(float x, float y) Parameters Type Name Description System.Single x The X component. System.Single y The Y component. | Improve this Doc View Source Half2(UInt16, UInt16) Initializes a new instance of the DXPlayground.Mathematics.Half2 structure. Declaration public Half2(ushort x, ushort y) Parameters Type Name Description System.UInt16 x The X component. System.UInt16 y The Y component. Fields | Improve this Doc View Source X Gets or sets the X component of the vector. Declaration public Half X Field Value Type Description Half The X component of the vector. | Improve this Doc View Source Y Gets or sets the Y component of the vector. Declaration public Half Y Field Value Type Description Half The Y component of the vector. Methods | Improve this Doc View Source Equals(Half2) Returns a value that indicates whether the current instance is equal to the specified object. Declaration public bool Equals(Half2 other) Parameters Type Name Description Half2 other Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(ref Half2, ref Half2) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(ref Half2 value1, ref Half2 value2) Parameters Type Name Description Half2 value1 Half2 value2 Returns Type Description System.Boolean true if value1 is the same instance as value2 or if both are null references or if value1.Equals(value2) returns true ; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Operators | Improve this Doc View Source Equality(Half2, Half2) Tests for equality between two objects. Declaration public static bool operator ==(Half2 left, Half2 right) Parameters Type Name Description Half2 left The first value to compare. Half2 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Implicit(Half2 to Vector2) Performs an explicit conversion from Half2 to Vector2 . Declaration public static implicit operator Vector2(Half2 value) Parameters Type Name Description Half2 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Implicit(Vector2 to Half2) Performs an explicit conversion from Vector2 to Half2 . Declaration public static implicit operator Half2(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Half2 The result of the conversion. | Improve this Doc View Source Inequality(Half2, Half2) Tests for inequality between two objects. Declaration public static bool operator !=(Half2 left, Half2 right) Parameters Type Name Description Half2 left The first value to compare. Half2 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.Half3.html": {
    "href": "api/Fluint.Layer.Mathematics.Half3.html",
    "title": "Struct Half3 | Fluint",
    "keywords": "Struct Half3 Defines a three component vector, using half precision floating point coordinates. Implements IEquatable < Half3 > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Half3 : IEquatable<Half3> Constructors | Improve this Doc View Source Half3(Half) Initializes a new instance of the DXPlayground.Mathematics.Half3 structure. Declaration public Half3(Half value) Parameters Type Name Description Half value The value to set for the X, Y, and Z components. | Improve this Doc View Source Half3(Half, Half, Half) Initializes a new instance of the DXPlayground.Mathematics.Half3 structure. Declaration public Half3(Half x, Half y, Half z) Parameters Type Name Description Half x The X component. Half y The Y component. Half z The Z component. | Improve this Doc View Source Half3(Single, Single, Single) Initializes a new instance of the DXPlayground.Mathematics.Half3 structure. Declaration public Half3(float x, float y, float z) Parameters Type Name Description System.Single x The X component. System.Single y The Y component. System.Single z The Z component. | Improve this Doc View Source Half3(UInt16, UInt16, UInt16) Initializes a new instance of the DXPlayground.Mathematics.Half3 structure. Declaration public Half3(ushort x, ushort y, ushort z) Parameters Type Name Description System.UInt16 x The X component. System.UInt16 y The Y component. System.UInt16 z The Z component. Fields | Improve this Doc View Source X Gets or sets the X component of the vector. Declaration public Half X Field Value Type Description Half The X component of the vector. | Improve this Doc View Source Y Gets or sets the Y component of the vector. Declaration public Half Y Field Value Type Description Half The Y component of the vector. | Improve this Doc View Source Z Gets or sets the Z component of the vector. Declaration public Half Z Field Value Type Description Half The Z component of the vector. Methods | Improve this Doc View Source Equals(Half3) Returns a value that indicates whether the current instance is equal to the specified object. Declaration public bool Equals(Half3 other) Parameters Type Name Description Half3 other Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(ref Half3, ref Half3) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(ref Half3 value1, ref Half3 value2) Parameters Type Name Description Half3 value1 Half3 value2 Returns Type Description System.Boolean true if value1 is the same instance as value2 or if both are null references or if value1.Equals(value2) returns true ; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Operators | Improve this Doc View Source Equality(Half3, Half3) Tests for equality between two objects. Declaration public static bool operator ==(Half3 left, Half3 right) Parameters Type Name Description Half3 left The first value to compare. Half3 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Half3 to Vector2) Performs an explicit conversion from Half3 to Vector2 . Declaration public static explicit operator Vector2(Half3 value) Parameters Type Name Description Half3 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Vector2 to Half3) Performs an explicit conversion from Vector2 to Half3 . Declaration public static explicit operator Half3(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Half3 The result of the conversion. | Improve this Doc View Source Implicit(Half3 to Vector3) Performs an implicit conversion from Half3 to Vector3 . Declaration public static implicit operator Vector3(Half3 value) Parameters Type Name Description Half3 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Implicit(Vector3 to Half3) Performs an implicit conversion from Vector3 to Half3 . Declaration public static implicit operator Half3(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Half3 The result of the conversion. | Improve this Doc View Source Inequality(Half3, Half3) Tests for inequality between two objects. Declaration public static bool operator !=(Half3 left, Half3 right) Parameters Type Name Description Half3 left The first value to compare. Half3 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.Half4.html": {
    "href": "api/Fluint.Layer.Mathematics.Half4.html",
    "title": "Struct Half4 | Fluint",
    "keywords": "Struct Half4 Defines a four component vector, using half precision floating point coordinates. Implements IEquatable < Half4 > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Half4 : IEquatable<Half4> Constructors | Improve this Doc View Source Half4(Half) Initializes a new instance of the DXPlayground.Mathematics.Half4 structure. Declaration public Half4(Half value) Parameters Type Name Description Half value The value to set for the X, Y, Z, and W components. | Improve this Doc View Source Half4(Half, Half, Half, Half) Initializes a new instance of the DXPlayground.Mathematics.Half4 structure. Declaration public Half4(Half x, Half y, Half z, Half w) Parameters Type Name Description Half x The X component. Half y The Y component. Half z The Z component. Half w The W component. | Improve this Doc View Source Half4(Single, Single, Single, Single) Initializes a new instance of the DXPlayground.Mathematics.Half4 structure. Declaration public Half4(float x, float y, float z, float w) Parameters Type Name Description System.Single x The X component. System.Single y The Y component. System.Single z The Z component. System.Single w The W component. | Improve this Doc View Source Half4(UInt16, UInt16, UInt16, UInt16) Initializes a new instance of the DXPlayground.Mathematics.Half4 structure. Declaration public Half4(ushort x, ushort y, ushort z, ushort w) Parameters Type Name Description System.UInt16 x The X component. System.UInt16 y The Y component. System.UInt16 z The Z component. System.UInt16 w The W component. Fields | Improve this Doc View Source W Gets or sets the W component of the vector. Declaration public Half W Field Value Type Description Half The W component of the vector. | Improve this Doc View Source X Gets or sets the X component of the vector. Declaration public Half X Field Value Type Description Half The X component of the vector. | Improve this Doc View Source Y Gets or sets the Y component of the vector. Declaration public Half Y Field Value Type Description Half The Y component of the vector. | Improve this Doc View Source Z Gets or sets the Z component of the vector. Declaration public Half Z Field Value Type Description Half The Z component of the vector. Methods | Improve this Doc View Source Equals(Half4) Returns a value that indicates whether the current instance is equal to the specified object. Declaration public bool Equals(Half4 other) Parameters Type Name Description Half4 other Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(ref Half4, ref Half4) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(ref Half4 value1, ref Half4 value2) Parameters Type Name Description Half4 value1 Half4 value2 Returns Type Description System.Boolean true if value1 is the same instance as value2 or if both are null references or if value1.Equals(value2) returns true ; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to make the comparison with. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer hash code. Operators | Improve this Doc View Source Equality(Half4, Half4) Tests for equality between two objects. Declaration public static bool operator ==(Half4 left, Half4 right) Parameters Type Name Description Half4 left The first value to compare. Half4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Half4 to Vector2) Performs an explicit conversion from Half4 to Vector2 . Declaration public static explicit operator Vector2(Half4 value) Parameters Type Name Description Half4 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Half4 to Vector3) Performs an explicit conversion from Half4 to Vector3 . Declaration public static explicit operator Vector3(Half4 value) Parameters Type Name Description Half4 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(Vector2 to Half4) Performs an explicit conversion from Vector2 to Half4 . Declaration public static explicit operator Half4(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Half4 The result of the conversion. | Improve this Doc View Source Explicit(Vector3 to Half4) Performs an explicit conversion from Vector3 to Half4 . Declaration public static explicit operator Half4(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Half4 The result of the conversion. | Improve this Doc View Source Implicit(Half4 to Vector4) Performs an implicit conversion from Half4 to Vector4 . Declaration public static implicit operator Vector4(Half4 value) Parameters Type Name Description Half4 value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Implicit(Vector4 to Half4) Performs an implicit conversion from Vector4 to Half4 . Declaration public static implicit operator Half4(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description Half4 The result of the conversion. | Improve this Doc View Source Inequality(Half4, Half4) Tests for inequality between two objects. Declaration public static bool operator !=(Half4 left, Half4 right) Parameters Type Name Description Half4 left The first value to compare. Half4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.html": {
    "href": "api/Fluint.Layer.Mathematics.html",
    "title": "Namespace Fluint.Layer.Mathematics | Fluint",
    "keywords": "Namespace Fluint.Layer.Mathematics Classes Collision Contains static methods to help in determining intersections, containment, etc. MathUtil RandomUtil Random functions on commun types. Transform Structs AngleSingle Represents a unit independent angle using a single-precision floating-point internal representation. Bool4 Represents a four dimensional mathematical vector of bool (32 bits per bool value). BoundingBox Represents an axis-aligned bounding box in three dimensional space. BoundingFrustum Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, (matrix, frustum, camera) interchange, and many kind of intersection testing. BoundingSphere Represents a bounding sphere in three dimensional space. Color Represents a 32-bit color (4 bytes) in the form of RGBA (in byte order: R, G, B, A). Color3 Represents a color in the form of rgb. Color4 Represents a color in the form of rgba. ColorBGRA Represents a 32-bit color (4 bytes) in the form of BGRA (in byte order: B, G, B, A). FrustumCameraParams Frustum camera parameters. Half A half precision (16 bit) floating point value. Half2 Defines a two component vector, using half precision floating point coordinates. Half3 Defines a three component vector, using half precision floating point coordinates. Half4 Defines a four component vector, using half precision floating point coordinates. Int3 Represents a three dimensional mathematical int vector. Int4 Represents a four dimensional mathematical vector. Matrix Represents a 4x4 mathematical matrix. Matrix3x2 Direct2D Matrix3x2. Supports implicit cast from Matrix . Matrix3x3 Represents a 3x3 Matrix ( contains only Scale and Rotation ). Matrix5x4 Represents a 4x4 mathematical Matrix5x4. OrientedBoundingBox OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation. Plane Represents a plane in three dimensional space. Point Structure using the same layout than . Quaternion Represents a four dimensional mathematical quaternion. Ray Represents a three dimensional line based on a point in space and a direction. Rectangle Define a Rectangle. This structure is slightly different from System.Drawing.Rectangle as it is internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height. RectangleF Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as it is internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height. Vector2 Represents a two dimensional mathematical vector. Vector2i Vector3 Represents a three dimensional mathematical vector. Vector4 Represents a four dimensional mathematical vector. Viewport Defines the viewport dimensions. ViewportF Defines the viewport dimensions using float coordinates for (X,Y,Width,Height). Enums AngleType Describes the type of angle. ContainmentType Describes how one bounding volume contains another. PlaneIntersectionType Describes the result of an intersection with a plane in three dimensions."
  },
  "api/Fluint.Layer.Mathematics.Int3.html": {
    "href": "api/Fluint.Layer.Mathematics.Int3.html",
    "title": "Struct Int3 | Fluint",
    "keywords": "Struct Int3 Represents a three dimensional mathematical int vector. Implements IEquatable < Int3 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Int3 : IEquatable<Int3>, IFormattable Constructors | Improve this Doc View Source Int3(Int32) Initializes a new instance of the Int3 struct. Declaration public Int3(int value) Parameters Type Name Description System.Int32 value The value that will be assigned to all components. | Improve this Doc View Source Int3(Int32, Int32, Int32) Initializes a new instance of the Int3 struct. Declaration public Int3(int x, int y, int z) Parameters Type Name Description System.Int32 x Initial value for the X component of the vector. System.Int32 y Initial value for the Y component of the vector. System.Int32 z Initial value for the Z component of the vector. | Improve this Doc View Source Int3(Int32[]) Initializes a new instance of the Int3 struct. Declaration public Int3(int[] values) Parameters Type Name Description System.Int32 [] values The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements. Fields | Improve this Doc View Source One A Int3 with all of its components set to one. Declaration public static readonly Int3 One Field Value Type Description Int3 | Improve this Doc View Source SizeInBytes The size of the Int3 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitX The X unit Int3 (1, 0, 0). Declaration public static readonly Int3 UnitX Field Value Type Description Int3 | Improve this Doc View Source UnitY The Y unit Int3 (0, 1, 0). Declaration public static readonly Int3 UnitY Field Value Type Description Int3 | Improve this Doc View Source UnitZ The Z unit Int3 (0, 0, 1). Declaration public static readonly Int3 UnitZ Field Value Type Description Int3 | Improve this Doc View Source X The X component of the vector. Declaration public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y The Y component of the vector. Declaration public int Y Field Value Type Description System.Int32 | Improve this Doc View Source Z The Z component of the vector. Declaration public int Z Field Value Type Description System.Int32 | Improve this Doc View Source Zero A Int3 with all of its components set to zero. Declaration public static readonly Int3 Zero Field Value Type Description Int3 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public int this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description System.Int32 The value of the X, Y, Z, or W component, depending on the index. Methods | Improve this Doc View Source Add(Int3, Int3) Adds two vectors. Declaration public static Int3 Add(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first vector to add. Int3 right The second vector to add. Returns Type Description Int3 The sum of the two vectors. | Improve this Doc View Source Add(ref Int3, ref Int3, out Int3) Adds two vectors. Declaration public static void Add(ref Int3 left, ref Int3 right, out Int3 result) Parameters Type Name Description Int3 left The first vector to add. Int3 right The second vector to add. Int3 result When the method completes, contains the sum of the two vectors. | Improve this Doc View Source Clamp(Int3, Int3, Int3) Restricts a value to be within a specified range. Declaration public static Int3 Clamp(Int3 value, Int3 min, Int3 max) Parameters Type Name Description Int3 value The value to clamp. Int3 min The minimum value. Int3 max The maximum value. Returns Type Description Int3 The clamped value. | Improve this Doc View Source Clamp(ref Int3, ref Int3, ref Int3, out Int3) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Int3 value, ref Int3 min, ref Int3 max, out Int3 result) Parameters Type Name Description Int3 value The value to clamp. Int3 min The minimum value. Int3 max The maximum value. Int3 result When the method completes, contains the clamped value. | Improve this Doc View Source Divide(Int3, Int32) Scales a vector by the given value. Declaration public static Int3 Divide(Int3 value, int scale) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int3 The scaled vector. | Improve this Doc View Source Divide(ref Int3, Int32, out Int3) Scales a vector by the given value. Declaration public static void Divide(ref Int3 value, int scale, out Int3 result) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Int3 result When the method completes, contains the scaled vector. | Improve this Doc View Source Equals(Int3) Determines whether the specified Int3 is equal to this instance. Declaration public bool Equals(Int3 other) Parameters Type Name Description Int3 other The Int3 to compare with this instance. Returns Type Description System.Boolean true if the specified Int3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Int3) Determines whether the specified Int3 is equal to this instance. Declaration public bool Equals(ref Int3 other) Parameters Type Name Description Int3 other The Int3 to compare with this instance. Returns Type Description System.Boolean true if the specified Int3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Max(Int3, Int3) Returns a vector containing the largest components of the specified vectors. Declaration public static Int3 Max(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first source vector. Int3 right The second source vector. Returns Type Description Int3 A vector containing the largest components of the source vectors. | Improve this Doc View Source Max(ref Int3, ref Int3, out Int3) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Max(ref Int3 left, ref Int3 right, out Int3 result) Parameters Type Name Description Int3 left The first source vector. Int3 right The second source vector. Int3 result When the method completes, contains an new vector composed of the largest components of the source vectors. | Improve this Doc View Source Min(Int3, Int3) Returns a vector containing the smallest components of the specified vectors. Declaration public static Int3 Min(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first source vector. Int3 right The second source vector. Returns Type Description Int3 A vector containing the smallest components of the source vectors. | Improve this Doc View Source Min(ref Int3, ref Int3, out Int3) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Min(ref Int3 left, ref Int3 right, out Int3 result) Parameters Type Name Description Int3 left The first source vector. Int3 right The second source vector. Int3 result When the method completes, contains an new vector composed of the smallest components of the source vectors. | Improve this Doc View Source Modulate(Int3, Int3) Modulates a vector with another by performing component-wise multiplication. Declaration public static Int3 Modulate(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first vector to modulate. Int3 right The second vector to modulate. Returns Type Description Int3 The modulated vector. | Improve this Doc View Source Modulate(ref Int3, ref Int3, out Int3) Modulates a vector with another by performing component-wise multiplication. Declaration public static void Modulate(ref Int3 left, ref Int3 right, out Int3 result) Parameters Type Name Description Int3 left The first vector to modulate. Int3 right The second vector to modulate. Int3 result When the method completes, contains the modulated vector. | Improve this Doc View Source Multiply(Int3, Int32) Scales a vector by the given value. Declaration public static Int3 Multiply(Int3 value, int scale) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int3 The scaled vector. | Improve this Doc View Source Multiply(ref Int3, Int32, out Int3) Scales a vector by the given value. Declaration public static void Multiply(ref Int3 value, int scale, out Int3 result) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Int3 result When the method completes, contains the scaled vector. | Improve this Doc View Source Negate(Int3) Reverses the direction of a given vector. Declaration public static Int3 Negate(Int3 value) Parameters Type Name Description Int3 value The vector to negate. Returns Type Description Int3 A vector facing in the opposite direction. | Improve this Doc View Source Negate(ref Int3, out Int3) Reverses the direction of a given vector. Declaration public static void Negate(ref Int3 value, out Int3 result) Parameters Type Name Description Int3 value The vector to negate. Int3 result When the method completes, contains a vector facing in the opposite direction. | Improve this Doc View Source Subtract(Int3, Int3) Subtracts two vectors. Declaration public static Int3 Subtract(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first vector to subtract. Int3 right The second vector to subtract. Returns Type Description Int3 The difference of the two vectors. | Improve this Doc View Source Subtract(ref Int3, ref Int3, out Int3) Subtracts two vectors. Declaration public static void Subtract(ref Int3 left, ref Int3 right, out Int3 result) Parameters Type Name Description Int3 left The first vector to subtract. Int3 right The second vector to subtract. Int3 result When the method completes, contains the difference of the two vectors. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public int[] ToArray() Returns Type Description System.Int32 [] A four-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Addition(Int3, Int3) Adds two vectors. Declaration public static Int3 operator +(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first vector to add. Int3 right The second vector to add. Returns Type Description Int3 The sum of the two vectors. | Improve this Doc View Source Division(Int3, Int32) Scales a vector by the given value. Declaration public static Int3 operator /(Int3 value, int scale) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int3 The scaled vector. | Improve this Doc View Source Equality(Int3, Int3) Tests for equality between two objects. Declaration public static bool operator ==(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first value to compare. Int3 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Int3 to Vector2) Performs an explicit conversion from Int3 to Vector2 . Declaration public static explicit operator Vector2(Int3 value) Parameters Type Name Description Int3 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Int3 to Vector3) Performs an explicit conversion from Int3 to Vector3 . Declaration public static explicit operator Vector3(Int3 value) Parameters Type Name Description Int3 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Implicit(Int3 to Int32[]) Performs an implicit conversion from Int3 to array. Declaration public static implicit operator int[](Int3 input) Parameters Type Name Description Int3 input The input. Returns Type Description System.Int32 [] The result of the conversion. | Improve this Doc View Source Implicit(Int32[] to Int3) Performs an implicit conversion from array to Int3 . Declaration public static implicit operator Int3(int[] input) Parameters Type Name Description System.Int32 [] input The input. Returns Type Description Int3 The result of the conversion. | Improve this Doc View Source Inequality(Int3, Int3) Tests for inequality between two objects. Declaration public static bool operator !=(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first value to compare. Int3 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Int3, Int32) Scales a vector by the given value. Declaration public static Int3 operator *(Int3 value, int scale) Parameters Type Name Description Int3 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int3 The scaled vector. | Improve this Doc View Source Multiply(Int32, Int3) Scales a vector by the given value. Declaration public static Int3 operator *(int scale, Int3 value) Parameters Type Name Description System.Int32 scale The amount by which to scale the vector. Int3 value The vector to scale. Returns Type Description Int3 The scaled vector. | Improve this Doc View Source Subtraction(Int3, Int3) Subtracts two vectors. Declaration public static Int3 operator -(Int3 left, Int3 right) Parameters Type Name Description Int3 left The first vector to subtract. Int3 right The second vector to subtract. Returns Type Description Int3 The difference of the two vectors. | Improve this Doc View Source UnaryNegation(Int3) Reverses the direction of a given vector. Declaration public static Int3 operator -(Int3 value) Parameters Type Name Description Int3 value The vector to negate. Returns Type Description Int3 A vector facing in the opposite direction. | Improve this Doc View Source UnaryPlus(Int3) Assert a vector (return it unchanged). Declaration public static Int3 operator +(Int3 value) Parameters Type Name Description Int3 value The vector to assert (unchanged). Returns Type Description Int3 The asserted (unchanged) vector. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Int4.html": {
    "href": "api/Fluint.Layer.Mathematics.Int4.html",
    "title": "Struct Int4 | Fluint",
    "keywords": "Struct Int4 Represents a four dimensional mathematical vector. Implements IEquatable < Int4 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Int4 : IEquatable<Int4>, IFormattable Constructors | Improve this Doc View Source Int4(Int32) Initializes a new instance of the Int4 struct. Declaration public Int4(int value) Parameters Type Name Description System.Int32 value The value that will be assigned to all components. | Improve this Doc View Source Int4(Int32, Int32, Int32, Int32) Initializes a new instance of the Int4 struct. Declaration public Int4(int x, int y, int z, int w) Parameters Type Name Description System.Int32 x Initial value for the X component of the vector. System.Int32 y Initial value for the Y component of the vector. System.Int32 z Initial value for the Z component of the vector. System.Int32 w Initial value for the W component of the vector. | Improve this Doc View Source Int4(Int32[]) Initializes a new instance of the Int4 struct. Declaration public Int4(int[] values) Parameters Type Name Description System.Int32 [] values The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements. Fields | Improve this Doc View Source One A Int4 with all of its components set to one. Declaration public static readonly Int4 One Field Value Type Description Int4 | Improve this Doc View Source SizeInBytes The size of the Int4 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitW The W unit Int4 (0, 0, 0, 1). Declaration public static readonly Int4 UnitW Field Value Type Description Int4 | Improve this Doc View Source UnitX The X unit Int4 (1, 0, 0, 0). Declaration public static readonly Int4 UnitX Field Value Type Description Int4 | Improve this Doc View Source UnitY The Y unit Int4 (0, 1, 0, 0). Declaration public static readonly Int4 UnitY Field Value Type Description Int4 | Improve this Doc View Source UnitZ The Z unit Int4 (0, 0, 1, 0). Declaration public static readonly Int4 UnitZ Field Value Type Description Int4 | Improve this Doc View Source W The W component of the vector. Declaration public int W Field Value Type Description System.Int32 | Improve this Doc View Source X The X component of the vector. Declaration public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y The Y component of the vector. Declaration public int Y Field Value Type Description System.Int32 | Improve this Doc View Source Z The Z component of the vector. Declaration public int Z Field Value Type Description System.Int32 | Improve this Doc View Source Zero A Int4 with all of its components set to zero. Declaration public static readonly Int4 Zero Field Value Type Description Int4 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public int this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description System.Int32 The value of the X, Y, Z, or W component, depending on the index. Methods | Improve this Doc View Source Add(Int4, Int4) Adds two vectors. Declaration public static Int4 Add(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first vector to add. Int4 right The second vector to add. Returns Type Description Int4 The sum of the two vectors. | Improve this Doc View Source Add(ref Int4, ref Int4, out Int4) Adds two vectors. Declaration public static void Add(ref Int4 left, ref Int4 right, out Int4 result) Parameters Type Name Description Int4 left The first vector to add. Int4 right The second vector to add. Int4 result When the method completes, contains the sum of the two vectors. | Improve this Doc View Source Clamp(Int4, Int4, Int4) Restricts a value to be within a specified range. Declaration public static Int4 Clamp(Int4 value, Int4 min, Int4 max) Parameters Type Name Description Int4 value The value to clamp. Int4 min The minimum value. Int4 max The maximum value. Returns Type Description Int4 The clamped value. | Improve this Doc View Source Clamp(ref Int4, ref Int4, ref Int4, out Int4) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Int4 value, ref Int4 min, ref Int4 max, out Int4 result) Parameters Type Name Description Int4 value The value to clamp. Int4 min The minimum value. Int4 max The maximum value. Int4 result When the method completes, contains the clamped value. | Improve this Doc View Source Divide(Int4, Int32) Scales a vector by the given value. Declaration public static Int4 Divide(Int4 value, int scale) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int4 The scaled vector. | Improve this Doc View Source Divide(ref Int4, Int32, out Int4) Scales a vector by the given value. Declaration public static void Divide(ref Int4 value, int scale, out Int4 result) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Int4 result When the method completes, contains the scaled vector. | Improve this Doc View Source Equals(Int4) Determines whether the specified Int4 is equal to this instance. Declaration public bool Equals(Int4 other) Parameters Type Name Description Int4 other The Int4 to compare with this instance. Returns Type Description System.Boolean true if the specified Int4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Int4) Determines whether the specified Int4 is equal to this instance. Declaration public bool Equals(ref Int4 other) Parameters Type Name Description Int4 other The Int4 to compare with this instance. Returns Type Description System.Boolean true if the specified Int4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Max(Int4, Int4) Returns a vector containing the largest components of the specified vectors. Declaration public static Int4 Max(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first source vector. Int4 right The second source vector. Returns Type Description Int4 A vector containing the largest components of the source vectors. | Improve this Doc View Source Max(ref Int4, ref Int4, out Int4) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Max(ref Int4 left, ref Int4 right, out Int4 result) Parameters Type Name Description Int4 left The first source vector. Int4 right The second source vector. Int4 result When the method completes, contains an new vector composed of the largest components of the source vectors. | Improve this Doc View Source Min(Int4, Int4) Returns a vector containing the smallest components of the specified vectors. Declaration public static Int4 Min(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first source vector. Int4 right The second source vector. Returns Type Description Int4 A vector containing the smallest components of the source vectors. | Improve this Doc View Source Min(ref Int4, ref Int4, out Int4) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Min(ref Int4 left, ref Int4 right, out Int4 result) Parameters Type Name Description Int4 left The first source vector. Int4 right The second source vector. Int4 result When the method completes, contains an new vector composed of the smallest components of the source vectors. | Improve this Doc View Source Modulate(Int4, Int4) Modulates a vector with another by performing component-wise multiplication. Declaration public static Int4 Modulate(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first vector to modulate. Int4 right The second vector to modulate. Returns Type Description Int4 The modulated vector. | Improve this Doc View Source Modulate(ref Int4, ref Int4, out Int4) Modulates a vector with another by performing component-wise multiplication. Declaration public static void Modulate(ref Int4 left, ref Int4 right, out Int4 result) Parameters Type Name Description Int4 left The first vector to modulate. Int4 right The second vector to modulate. Int4 result When the method completes, contains the modulated vector. | Improve this Doc View Source Multiply(Int4, Int32) Scales a vector by the given value. Declaration public static Int4 Multiply(Int4 value, int scale) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int4 The scaled vector. | Improve this Doc View Source Multiply(ref Int4, Int32, out Int4) Scales a vector by the given value. Declaration public static void Multiply(ref Int4 value, int scale, out Int4 result) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Int4 result When the method completes, contains the scaled vector. | Improve this Doc View Source Negate(Int4) Reverses the direction of a given vector. Declaration public static Int4 Negate(Int4 value) Parameters Type Name Description Int4 value The vector to negate. Returns Type Description Int4 A vector facing in the opposite direction. | Improve this Doc View Source Negate(ref Int4, out Int4) Reverses the direction of a given vector. Declaration public static void Negate(ref Int4 value, out Int4 result) Parameters Type Name Description Int4 value The vector to negate. Int4 result When the method completes, contains a vector facing in the opposite direction. | Improve this Doc View Source Subtract(Int4, Int4) Subtracts two vectors. Declaration public static Int4 Subtract(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first vector to subtract. Int4 right The second vector to subtract. Returns Type Description Int4 The difference of the two vectors. | Improve this Doc View Source Subtract(ref Int4, ref Int4, out Int4) Subtracts two vectors. Declaration public static void Subtract(ref Int4 left, ref Int4 right, out Int4 result) Parameters Type Name Description Int4 left The first vector to subtract. Int4 right The second vector to subtract. Int4 result When the method completes, contains the difference of the two vectors. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public int[] ToArray() Returns Type Description System.Int32 [] A four-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Addition(Int4, Int4) Adds two vectors. Declaration public static Int4 operator +(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first vector to add. Int4 right The second vector to add. Returns Type Description Int4 The sum of the two vectors. | Improve this Doc View Source Division(Int4, Int32) Scales a vector by the given value. Declaration public static Int4 operator /(Int4 value, int scale) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int4 The scaled vector. | Improve this Doc View Source Equality(Int4, Int4) Tests for equality between two objects. Declaration public static bool operator ==(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first value to compare. Int4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Int4 to Vector2) Performs an explicit conversion from Int4 to Vector2 . Declaration public static explicit operator Vector2(Int4 value) Parameters Type Name Description Int4 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Int4 to Vector3) Performs an explicit conversion from Int4 to Vector3 . Declaration public static explicit operator Vector3(Int4 value) Parameters Type Name Description Int4 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(Int4 to Vector4) Performs an explicit conversion from Int4 to Vector4 . Declaration public static explicit operator Vector4(Int4 value) Parameters Type Name Description Int4 value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Implicit(Int4 to Int32[]) Performs an implicit conversion from Int4 to array. Declaration public static implicit operator int[](Int4 input) Parameters Type Name Description Int4 input The input. Returns Type Description System.Int32 [] The result of the conversion. | Improve this Doc View Source Implicit(Int32[] to Int4) Performs an implicit conversion from array to Int4 . Declaration public static implicit operator Int4(int[] input) Parameters Type Name Description System.Int32 [] input The input. Returns Type Description Int4 The result of the conversion. | Improve this Doc View Source Inequality(Int4, Int4) Tests for inequality between two objects. Declaration public static bool operator !=(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first value to compare. Int4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Int4, Int32) Scales a vector by the given value. Declaration public static Int4 operator *(Int4 value, int scale) Parameters Type Name Description Int4 value The vector to scale. System.Int32 scale The amount by which to scale the vector. Returns Type Description Int4 The scaled vector. | Improve this Doc View Source Multiply(Int32, Int4) Scales a vector by the given value. Declaration public static Int4 operator *(int scale, Int4 value) Parameters Type Name Description System.Int32 scale The amount by which to scale the vector. Int4 value The vector to scale. Returns Type Description Int4 The scaled vector. | Improve this Doc View Source Subtraction(Int4, Int4) Subtracts two vectors. Declaration public static Int4 operator -(Int4 left, Int4 right) Parameters Type Name Description Int4 left The first vector to subtract. Int4 right The second vector to subtract. Returns Type Description Int4 The difference of the two vectors. | Improve this Doc View Source UnaryNegation(Int4) Reverses the direction of a given vector. Declaration public static Int4 operator -(Int4 value) Parameters Type Name Description Int4 value The vector to negate. Returns Type Description Int4 A vector facing in the opposite direction. | Improve this Doc View Source UnaryPlus(Int4) Assert a vector (return it unchanged). Declaration public static Int4 operator +(Int4 value) Parameters Type Name Description Int4 value The vector to assert (unchanged). Returns Type Description Int4 The asserted (unchanged) vector. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.MathUtil.html": {
    "href": "api/Fluint.Layer.Mathematics.MathUtil.html",
    "title": "Class MathUtil | Fluint",
    "keywords": "Class MathUtil Inheritance System.Object MathUtil Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public static class MathUtil : object Fields | Improve this Doc View Source Pi A value specifying the approximation of π which is 180 degrees. Declaration public const float Pi = null Field Value Type Description System.Single | Improve this Doc View Source PiOverFour A value specifying the approximation of π/4 which is 45 degrees. Declaration public const float PiOverFour = null Field Value Type Description System.Single | Improve this Doc View Source PiOverTwo A value specifying the approximation of π/2 which is 90 degrees. Declaration public const float PiOverTwo = null Field Value Type Description System.Single | Improve this Doc View Source TwoPi A value specifying the approximation of 2π which is 360 degrees. Declaration public const float TwoPi = null Field Value Type Description System.Single | Improve this Doc View Source ZeroTolerance The value for which all absolute numbers smaller than are considered equal to zero. Declaration public const float ZeroTolerance = null Field Value Type Description System.Single Methods | Improve this Doc View Source Clamp(Int32, Int32, Int32) Clamps the specified value. Declaration public static int Clamp(int value, int min, int max) Parameters Type Name Description System.Int32 value The value. System.Int32 min The min. System.Int32 max The max. Returns Type Description System.Int32 The result of clamping a value between min and max | Improve this Doc View Source Clamp(Single, Single, Single) Clamps the specified value. Declaration public static float Clamp(float value, float min, float max) Parameters Type Name Description System.Single value The value. System.Single min The min. System.Single max The max. Returns Type Description System.Single The result of clamping a value between min and max | Improve this Doc View Source DegreesToRadians(Single) Converts degrees to radians. Declaration public static float DegreesToRadians(float degree) Parameters Type Name Description System.Single degree The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source DegreesToRevolutions(Single) Converts degrees to revolutions. Declaration public static float DegreesToRevolutions(float degree) Parameters Type Name Description System.Single degree The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source Gauss(Double, Double, Double, Double, Double, Double, Double) Gauss function. http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function Declaration public static double Gauss(double amplitude, double x, double y, double centerX, double centerY, double sigmaX, double sigmaY) Parameters Type Name Description System.Double amplitude Curve amplitude. System.Double x Position X. System.Double y Position Y System.Double centerX Center X. System.Double centerY Center Y. System.Double sigmaX Curve sigma X. System.Double sigmaY Curve sigma Y. Returns Type Description System.Double The result of Gaussian function. | Improve this Doc View Source Gauss(Single, Single, Single, Single, Single, Single, Single) Gauss function. http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function Declaration public static float Gauss(float amplitude, float x, float y, float centerX, float centerY, float sigmaX, float sigmaY) Parameters Type Name Description System.Single amplitude Curve amplitude. System.Single x Position X. System.Single y Position Y System.Single centerX Center X. System.Single centerY Center Y. System.Single sigmaX Curve sigma X. System.Single sigmaY Curve sigma Y. Returns Type Description System.Single The result of Gaussian function. | Improve this Doc View Source GradiansToDegrees(Single) Converts gradians to degrees. Declaration public static float GradiansToDegrees(float gradian) Parameters Type Name Description System.Single gradian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source GradiansToRadians(Single) Converts gradians to radians. Declaration public static float GradiansToRadians(float gradian) Parameters Type Name Description System.Single gradian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source GradiansToRevolutions(Single) Converts gradians to revolutions. Declaration public static float GradiansToRevolutions(float gradian) Parameters Type Name Description System.Single gradian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source IsOne(Single) Determines whether the specified value is close to one (1.0f). Declaration public static bool IsOne(float a) Parameters Type Name Description System.Single a The floating value. Returns Type Description System.Boolean true if the specified value is close to one (1.0f); otherwise, false . | Improve this Doc View Source IsZero(Single) Determines whether the specified value is close to zero (0.0f). Declaration public static bool IsZero(float a) Parameters Type Name Description System.Single a The floating value. Returns Type Description System.Boolean true if the specified value is close to zero (0.0f); otherwise, false . | Improve this Doc View Source Lerp(Byte, Byte, Single) Interpolates between two values using a linear function by a given amount. Declaration public static byte Lerp(byte from, byte to, float amount) Parameters Type Name Description System.Byte from Value to interpolate from. System.Byte to Value to interpolate to. System.Single amount Interpolation amount. Returns Type Description System.Byte The result of linear interpolation of values based on the amount. Remarks See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/ | Improve this Doc View Source Lerp(Double, Double, Double) Interpolates between two values using a linear function by a given amount. Declaration public static double Lerp(double from, double to, double amount) Parameters Type Name Description System.Double from Value to interpolate from. System.Double to Value to interpolate to. System.Double amount Interpolation amount. Returns Type Description System.Double The result of linear interpolation of values based on the amount. Remarks See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/ | Improve this Doc View Source Lerp(Single, Single, Single) Interpolates between two values using a linear function by a given amount. Declaration public static float Lerp(float from, float to, float amount) Parameters Type Name Description System.Single from Value to interpolate from. System.Single to Value to interpolate to. System.Single amount Interpolation amount. Returns Type Description System.Single The result of linear interpolation of values based on the amount. Remarks See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/ | Improve this Doc View Source Mod(Single, Single) Calculates the modulo of the specified value. Declaration public static float Mod(float value, float modulo) Parameters Type Name Description System.Single value The value. System.Single modulo The modulo. Returns Type Description System.Single The result of the modulo applied to value | Improve this Doc View Source Mod2PI(Single) Calculates the modulo 2*PI of the specified value. Declaration public static float Mod2PI(float value) Parameters Type Name Description System.Single value The value. Returns Type Description System.Single The result of the modulo applied to value | Improve this Doc View Source NearEqual(Single, Single) Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike WithinEpsilon(Single, Single, Single) method). See Remarks. See remarks. Declaration public static bool NearEqual(float a, float b) Parameters Type Name Description System.Single a The left value to compare. System.Single b The right value to compare. Returns Type Description System.Boolean true if a almost equal to b, false otherwise Remarks The code is using the technique described by Bruce Dawson in Comparing Floating point numbers 2012 edition . | Improve this Doc View Source RadiansToDegrees(Single) Converts radians to degrees. Declaration public static float RadiansToDegrees(float radian) Parameters Type Name Description System.Single radian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source RadiansToGradians(Single) Converts radians to gradians. Declaration public static float RadiansToGradians(float radian) Parameters Type Name Description System.Single radian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source RadiansToRevolutions(Single) Converts radians to revolutions. Declaration public static float RadiansToRevolutions(float radian) Parameters Type Name Description System.Single radian The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source RevolutionsToDegrees(Single) Converts revolutions to degrees. Declaration public static float RevolutionsToDegrees(float revolution) Parameters Type Name Description System.Single revolution The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source RevolutionsToGradians(Single) Converts revolutions to gradians. Declaration public static float RevolutionsToGradians(float revolution) Parameters Type Name Description System.Single revolution The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source RevolutionsToRadians(Single) Converts revolutions to radians. Declaration public static float RevolutionsToRadians(float revolution) Parameters Type Name Description System.Single revolution The value to convert. Returns Type Description System.Single The converted value. | Improve this Doc View Source SmootherStep(Single) Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints. Declaration public static float SmootherStep(float amount) Parameters Type Name Description System.Single amount Value between 0 and 1 indicating interpolation amount. Returns Type Description System.Single Remarks See https://en.wikipedia.org/wiki/Smoothstep | Improve this Doc View Source SmoothStep(Single) Performs smooth (cubic Hermite) interpolation between 0 and 1. Declaration public static float SmoothStep(float amount) Parameters Type Name Description System.Single amount Value between 0 and 1 indicating interpolation amount. Returns Type Description System.Single Remarks See https://en.wikipedia.org/wiki/Smoothstep | Improve this Doc View Source WithinEpsilon(Single, Single, Single) Checks if a - b are almost equals within a float epsilon. Declaration public static bool WithinEpsilon(float a, float b, float epsilon) Parameters Type Name Description System.Single a The left value to compare. System.Single b The right value to compare. System.Single epsilon Epsilon value Returns Type Description System.Boolean true if a almost equal to b within a float epsilon, false otherwise | Improve this Doc View Source Wrap(Int32, Int32, Int32) Wraps the specified value into a range [min, max] Declaration public static int Wrap(int value, int min, int max) Parameters Type Name Description System.Int32 value The value to wrap. System.Int32 min The min. System.Int32 max The max. Returns Type Description System.Int32 Result of the wrapping. | Improve this Doc View Source Wrap(Single, Single, Single) Wraps the specified value into a range [min, max[ Declaration public static float Wrap(float value, float min, float max) Parameters Type Name Description System.Single value The value. System.Single min The min. System.Single max The max. Returns Type Description System.Single Result of the wrapping."
  },
  "api/Fluint.Layer.Mathematics.Matrix.html": {
    "href": "api/Fluint.Layer.Mathematics.Matrix.html",
    "title": "Struct Matrix | Fluint",
    "keywords": "Struct Matrix Represents a 4x4 mathematical matrix. Implements IEquatable < Matrix > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Matrix : IEquatable<Matrix>, IFormattable Constructors | Improve this Doc View Source Matrix(Single) Initializes a new instance of the Matrix struct. Declaration public Matrix(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Matrix(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the Matrix struct. Declaration public Matrix(float M11, float M12, float M13, float M14, float M21, float M22, float M23, float M24, float M31, float M32, float M33, float M34, float M41, float M42, float M43, float M44) Parameters Type Name Description System.Single M11 The value to assign at row 1 column 1 of the matrix. System.Single M12 The value to assign at row 1 column 2 of the matrix. System.Single M13 The value to assign at row 1 column 3 of the matrix. System.Single M14 The value to assign at row 1 column 4 of the matrix. System.Single M21 The value to assign at row 2 column 1 of the matrix. System.Single M22 The value to assign at row 2 column 2 of the matrix. System.Single M23 The value to assign at row 2 column 3 of the matrix. System.Single M24 The value to assign at row 2 column 4 of the matrix. System.Single M31 The value to assign at row 3 column 1 of the matrix. System.Single M32 The value to assign at row 3 column 2 of the matrix. System.Single M33 The value to assign at row 3 column 3 of the matrix. System.Single M34 The value to assign at row 3 column 4 of the matrix. System.Single M41 The value to assign at row 4 column 1 of the matrix. System.Single M42 The value to assign at row 4 column 2 of the matrix. System.Single M43 The value to assign at row 4 column 3 of the matrix. System.Single M44 The value to assign at row 4 column 4 of the matrix. | Improve this Doc View Source Matrix(Single[]) Initializes a new instance of the Matrix struct. Declaration public Matrix(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the components of the matrix. This must be an array with sixteen elements. Fields | Improve this Doc View Source Identity The identity Matrix . Declaration public static readonly Matrix Identity Field Value Type Description Matrix | Improve this Doc View Source M11 Value at row 1 column 1 of the matrix. Declaration public float M11 Field Value Type Description System.Single | Improve this Doc View Source M12 Value at row 1 column 2 of the matrix. Declaration public float M12 Field Value Type Description System.Single | Improve this Doc View Source M13 Value at row 1 column 3 of the matrix. Declaration public float M13 Field Value Type Description System.Single | Improve this Doc View Source M14 Value at row 1 column 4 of the matrix. Declaration public float M14 Field Value Type Description System.Single | Improve this Doc View Source M21 Value at row 2 column 1 of the matrix. Declaration public float M21 Field Value Type Description System.Single | Improve this Doc View Source M22 Value at row 2 column 2 of the matrix. Declaration public float M22 Field Value Type Description System.Single | Improve this Doc View Source M23 Value at row 2 column 3 of the matrix. Declaration public float M23 Field Value Type Description System.Single | Improve this Doc View Source M24 Value at row 2 column 4 of the matrix. Declaration public float M24 Field Value Type Description System.Single | Improve this Doc View Source M31 Value at row 3 column 1 of the matrix. Declaration public float M31 Field Value Type Description System.Single | Improve this Doc View Source M32 Value at row 3 column 2 of the matrix. Declaration public float M32 Field Value Type Description System.Single | Improve this Doc View Source M33 Value at row 3 column 3 of the matrix. Declaration public float M33 Field Value Type Description System.Single | Improve this Doc View Source M34 Value at row 3 column 4 of the matrix. Declaration public float M34 Field Value Type Description System.Single | Improve this Doc View Source M41 Value at row 4 column 1 of the matrix. Declaration public float M41 Field Value Type Description System.Single | Improve this Doc View Source M42 Value at row 4 column 2 of the matrix. Declaration public float M42 Field Value Type Description System.Single | Improve this Doc View Source M43 Value at row 4 column 3 of the matrix. Declaration public float M43 Field Value Type Description System.Single | Improve this Doc View Source M44 Value at row 4 column 4 of the matrix. Declaration public float M44 Field Value Type Description System.Single | Improve this Doc View Source SizeInBytes The size of the Matrix type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source Zero A Matrix with all of its components set to zero. Declaration public static readonly Matrix Zero Field Value Type Description Matrix Properties | Improve this Doc View Source Backward Gets or sets the backward Vector3 of the matrix; that is M31, M32, and M33. Declaration public Vector3 Backward { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Column1 Gets or sets the first column in the matrix; that is M11, M21, M31, and M41. Declaration public Vector4 Column1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column2 Gets or sets the second column in the matrix; that is M12, M22, M32, and M42. Declaration public Vector4 Column2 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column3 Gets or sets the third column in the matrix; that is M13, M23, M33, and M43. Declaration public Vector4 Column3 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column4 Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44. Declaration public Vector4 Column4 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Down Gets or sets the down Vector3 of the matrix; that is -M21, -M22, and -M23. Declaration public Vector3 Down { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Forward Gets or sets the forward Vector3 of the matrix; that is -M31, -M32, and -M33. Declaration public Vector3 Forward { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is an identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean true if this instance is an identity matrix; otherwise, false . | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the component to access. Property Value Type Description System.Single The value of the matrix component, depending on the index. | Improve this Doc View Source Item[Int32, Int32] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row of the matrix to access. System.Int32 column The column of the matrix to access. Property Value Type Description System.Single The value of the matrix component, depending on the index. | Improve this Doc View Source Left Gets or sets the left Vector3 of the matrix; that is -M11, -M12, and -M13. Declaration public Vector3 Left { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Right Gets or sets the right Vector3 of the matrix; that is M11, M12, and M13. Declaration public Vector3 Right { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row1 Gets or sets the first row in the matrix; that is M11, M12, M13, and M14. Declaration public Vector4 Row1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row2 Gets or sets the second row in the matrix; that is M21, M22, M23, and M24. Declaration public Vector4 Row2 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row3 Gets or sets the third row in the matrix; that is M31, M32, M33, and M34. Declaration public Vector4 Row3 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row4 Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44. Declaration public Vector4 Row4 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source ScaleVector Gets or sets the scale of the matrix; that is M11, M22, and M33. Declaration public Vector3 ScaleVector { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source TranslationVector Gets or sets the translation of the matrix; that is M41, M42, and M43. Declaration public Vector3 TranslationVector { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Up Gets or sets the up Vector3 of the matrix; that is M21, M22, and M23. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Add(Matrix, Matrix) Determines the sum of two matrices. Declaration public static Matrix Add(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to add. Matrix right The second matrix to add. Returns Type Description Matrix The sum of the two matrices. | Improve this Doc View Source Add(ref Matrix, ref Matrix, out Matrix) Determines the sum of two matrices. Declaration public static void Add(ref Matrix left, ref Matrix right, out Matrix result) Parameters Type Name Description Matrix left The first matrix to add. Matrix right The second matrix to add. Matrix result When the method completes, contains the sum of the two matrices. | Improve this Doc View Source AffineTransformation(Single, Quaternion, Vector3) Creates a 3D affine transformation matrix. Declaration public static Matrix AffineTransformation(float scaling, Quaternion rotation, Vector3 translation) Parameters Type Name Description System.Single scaling Scaling factor. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Returns Type Description Matrix The created affine transformation matrix. | Improve this Doc View Source AffineTransformation(Single, ref Quaternion, ref Vector3, out Matrix) Creates a 3D affine transformation matrix. Declaration public static void AffineTransformation(float scaling, ref Quaternion rotation, ref Vector3 translation, out Matrix result) Parameters Type Name Description System.Single scaling Scaling factor. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Matrix result When the method completes, contains the created affine transformation matrix. | Improve this Doc View Source AffineTransformation(Single, Vector3, Quaternion, Vector3) Creates a 3D affine transformation matrix. Declaration public static Matrix AffineTransformation(float scaling, Vector3 rotationCenter, Quaternion rotation, Vector3 translation) Parameters Type Name Description System.Single scaling Scaling factor. Vector3 rotationCenter The center of the rotation. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Returns Type Description Matrix The created affine transformation matrix. | Improve this Doc View Source AffineTransformation(Single, ref Vector3, ref Quaternion, ref Vector3, out Matrix) Creates a 3D affine transformation matrix. Declaration public static void AffineTransformation(float scaling, ref Vector3 rotationCenter, ref Quaternion rotation, ref Vector3 translation, out Matrix result) Parameters Type Name Description System.Single scaling Scaling factor. Vector3 rotationCenter The center of the rotation. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Matrix result When the method completes, contains the created affine transformation matrix. | Improve this Doc View Source AffineTransformation2D(Single, Vector2, Single, Vector2) Creates a 2D affine transformation matrix. Declaration public static Matrix AffineTransformation2D(float scaling, Vector2 rotationCenter, float rotation, Vector2 translation) Parameters Type Name Description System.Single scaling Scaling factor. Vector2 rotationCenter The center of the rotation. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Returns Type Description Matrix The created affine transformation matrix. | Improve this Doc View Source AffineTransformation2D(Single, ref Vector2, Single, ref Vector2, out Matrix) Creates a 2D affine transformation matrix. Declaration public static void AffineTransformation2D(float scaling, ref Vector2 rotationCenter, float rotation, ref Vector2 translation, out Matrix result) Parameters Type Name Description System.Single scaling Scaling factor. Vector2 rotationCenter The center of the rotation. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Matrix result When the method completes, contains the created affine transformation matrix. | Improve this Doc View Source AffineTransformation2D(Single, Single, Vector2) Creates a 2D affine transformation matrix. Declaration public static Matrix AffineTransformation2D(float scaling, float rotation, Vector2 translation) Parameters Type Name Description System.Single scaling Scaling factor. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Returns Type Description Matrix The created affine transformation matrix. | Improve this Doc View Source AffineTransformation2D(Single, Single, ref Vector2, out Matrix) Creates a 2D affine transformation matrix. Declaration public static void AffineTransformation2D(float scaling, float rotation, ref Vector2 translation, out Matrix result) Parameters Type Name Description System.Single scaling Scaling factor. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Matrix result When the method completes, contains the created affine transformation matrix. | Improve this Doc View Source BillboardLH(Vector3, Vector3, Vector3, Vector3) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static Matrix BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Matrix The created billboard matrix. | Improve this Doc View Source BillboardLH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardLH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Matrix result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Matrix result When the method completes, contains the created billboard matrix. | Improve this Doc View Source BillboardRH(Vector3, Vector3, Vector3, Vector3) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static Matrix BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Matrix The created billboard matrix. | Improve this Doc View Source BillboardRH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardRH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Matrix result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Matrix result When the method completes, contains the created billboard matrix. | Improve this Doc View Source Decompose(out Vector3, out Quaternion, out Vector3) Decomposes a matrix into a scale, rotation, and translation. Declaration public bool Decompose(out Vector3 scale, out Quaternion rotation, out Vector3 translation) Parameters Type Name Description Vector3 scale When the method completes, contains the scaling component of the decomposed matrix. Quaternion rotation When the method completes, contains the rotation component of the decomposed matrix. Vector3 translation When the method completes, contains the translation component of the decomposed matrix. Returns Type Description System.Boolean Remarks This method is designed to decompose an SRT transformation matrix only. also I bet this is fucky wucky slow :( | Improve this Doc View Source DecomposeLQ(out Matrix, out Matrix) Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q. Declaration public void DecomposeLQ(out Matrix L, out Matrix Q) Parameters Type Name Description Matrix L When the method completes, contains the lower triangular matrix of the decomposition. Matrix Q When the method completes, contains the orthonormalized matrix of the decomposition. | Improve this Doc View Source DecomposeQR(out Matrix, out Matrix) Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R. Declaration public void DecomposeQR(out Matrix Q, out Matrix R) Parameters Type Name Description Matrix Q When the method completes, contains the orthonormalized matrix of the decomposition. Matrix R When the method completes, contains the right triangular matrix of the decomposition. | Improve this Doc View Source DecomposeUniformScale(out Single, out Quaternion, out Vector3) Decomposes a uniform scale matrix into a scale, rotation, and translation. A uniform scale matrix has the same scale in every axis. Declaration public bool DecomposeUniformScale(out float scale, out Quaternion rotation, out Vector3 translation) Parameters Type Name Description System.Single scale When the method completes, contains the scaling component of the decomposed matrix. Quaternion rotation When the method completes, contains the rotation component of the decomposed matrix. Vector3 translation When the method completes, contains the translation component of the decomposed matrix. Returns Type Description System.Boolean Remarks This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis. | Improve this Doc View Source Determinant() Calculates the determinant of the matrix. Declaration public float Determinant() Returns Type Description System.Single The determinant of the matrix. | Improve this Doc View Source Divide(Matrix, Matrix) Determines the quotient of two matrices. Declaration public static Matrix Divide(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to divide. Matrix right The second matrix to divide. Returns Type Description Matrix The quotient of the two matrices. | Improve this Doc View Source Divide(Matrix, Single) Scales a matrix by the given value. Declaration public static Matrix Divide(Matrix left, float right) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix The scaled matrix. | Improve this Doc View Source Divide(ref Matrix, ref Matrix, out Matrix) Determines the quotient of two matrices. Declaration public static void Divide(ref Matrix left, ref Matrix right, out Matrix result) Parameters Type Name Description Matrix left The first matrix to divide. Matrix right The second matrix to divide. Matrix result When the method completes, contains the quotient of the two matrices. | Improve this Doc View Source Divide(ref Matrix, Single, out Matrix) Scales a matrix by the given value. Declaration public static void Divide(ref Matrix left, float right, out Matrix result) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Matrix result When the method completes, contains the scaled matrix. | Improve this Doc View Source Equals(Matrix) Determines whether the specified Matrix is equal to this instance. Declaration public bool Equals(Matrix other) Parameters Type Name Description Matrix other The Matrix to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Matrix) Determines whether the specified Matrix is equal to this instance. Declaration public bool Equals(ref Matrix other) Parameters Type Name Description Matrix other The Matrix to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source ExchangeColumns(Int32, Int32) Exchanges two columns in the matrix. Declaration public void ExchangeColumns(int firstColumn, int secondColumn) Parameters Type Name Description System.Int32 firstColumn The first column to exchange. This is an index of the column starting at zero. System.Int32 secondColumn The second column to exchange. This is an index of the column starting at zero. | Improve this Doc View Source ExchangeRows(Int32, Int32) Exchanges two rows in the matrix. Declaration public void ExchangeRows(int firstRow, int secondRow) Parameters Type Name Description System.Int32 firstRow The first row to exchange. This is an index of the row starting at zero. System.Int32 secondRow The second row to exchange. This is an index of the row starting at zero. | Improve this Doc View Source Exponent(Matrix, Int32) Performs the exponential operation on a matrix. Declaration public static Matrix Exponent(Matrix value, int exponent) Parameters Type Name Description Matrix value The matrix to perform the operation on. System.Int32 exponent The exponent to raise the matrix to. Returns Type Description Matrix The exponential matrix. | Improve this Doc View Source Exponent(ref Matrix, Int32, out Matrix) Performs the exponential operation on a matrix. Declaration public static void Exponent(ref Matrix value, int exponent, out Matrix result) Parameters Type Name Description Matrix value The matrix to perform the operation on. System.Int32 exponent The exponent to raise the matrix to. Matrix result When the method completes, contains the exponential matrix. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Invert() Inverts the matrix. Declaration public void Invert() | Improve this Doc View Source Invert(Matrix) Calculates the inverse of the specified matrix. Declaration public static Matrix Invert(Matrix value) Parameters Type Name Description Matrix value The matrix whose inverse is to be calculated. Returns Type Description Matrix The inverse of the specified matrix. | Improve this Doc View Source Invert(ref Matrix, out Matrix) Calculates the inverse of the specified matrix. Declaration public static void Invert(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix whose inverse is to be calculated. Matrix result When the method completes, contains the inverse of the specified matrix. | Improve this Doc View Source Lerp(Matrix, Matrix, Single) Performs a linear interpolation between two matrices. Declaration public static Matrix Lerp(Matrix start, Matrix end, float amount) Parameters Type Name Description Matrix start Start matrix. Matrix end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix The linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Matrix, ref Matrix, Single, out Matrix) Performs a linear interpolation between two matrices. Declaration public static void Lerp(ref Matrix start, ref Matrix end, float amount, out Matrix result) Parameters Type Name Description Matrix start Start matrix. Matrix end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix result When the method completes, contains the linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source LookAtLH(Vector3, Vector3, Vector3) Creates a left-handed, look-at matrix. Declaration public static Matrix LookAtLH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Matrix The created look-at matrix. | Improve this Doc View Source LookAtLH(ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a left-handed, look-at matrix. Declaration public static void LookAtLH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Matrix result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Matrix result When the method completes, contains the created look-at matrix. | Improve this Doc View Source LookAtRH(Vector3, Vector3, Vector3) Creates a right-handed, look-at matrix. Declaration public static Matrix LookAtRH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Matrix The created look-at matrix. | Improve this Doc View Source LookAtRH(ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a right-handed, look-at matrix. Declaration public static void LookAtRH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Matrix result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Matrix result When the method completes, contains the created look-at matrix. | Improve this Doc View Source LowerTriangularForm(Matrix) Brings the matrix into lower triangular form using elementary row operations. Declaration public static Matrix LowerTriangularForm(Matrix value) Parameters Type Name Description Matrix value The matrix to put into lower triangular form. Returns Type Description Matrix The lower triangular matrix. Remarks If the matrix is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the matrix represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source LowerTriangularForm(ref Matrix, out Matrix) Brings the matrix into lower triangular form using elementary row operations. Declaration public static void LowerTriangularForm(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to put into lower triangular form. Matrix result When the method completes, contains the lower triangular matrix. Remarks If the matrix is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the matrix represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source Multiply(Matrix, Matrix) Determines the product of two matrices. Declaration public static Matrix Multiply(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to multiply. Matrix right The second matrix to multiply. Returns Type Description Matrix The product of the two matrices. | Improve this Doc View Source Multiply(Matrix, Single) Scales a matrix by the given value. Declaration public static Matrix Multiply(Matrix left, float right) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix The scaled matrix. | Improve this Doc View Source Multiply(ref Matrix, ref Matrix, out Matrix) Determines the product of two matrices. Declaration public static void Multiply(ref Matrix left, ref Matrix right, out Matrix result) Parameters Type Name Description Matrix left The first matrix to multiply. Matrix right The second matrix to multiply. Matrix result The product of the two matrices. | Improve this Doc View Source Multiply(ref Matrix, Single, out Matrix) Scales a matrix by the given value. Declaration public static void Multiply(ref Matrix left, float right, out Matrix result) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Matrix result When the method completes, contains the scaled matrix. | Improve this Doc View Source Negate(Matrix) Negates a matrix. Declaration public static Matrix Negate(Matrix value) Parameters Type Name Description Matrix value The matrix to be negated. Returns Type Description Matrix The negated matrix. | Improve this Doc View Source Negate(ref Matrix, out Matrix) Negates a matrix. Declaration public static void Negate(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to be negated. Matrix result When the method completes, contains the negated matrix. | Improve this Doc View Source Orthogonalize() Orthogonalizes the specified matrix. Declaration public void Orthogonalize() Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the matrix will be orthogonal to any other given row in the matrix. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthogonalize(Matrix) Orthogonalizes the specified matrix. Declaration public static Matrix Orthogonalize(Matrix value) Parameters Type Name Description Matrix value The matrix to orthogonalize. Returns Type Description Matrix The orthogonalized matrix. Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the matrix will be orthogonal to any other given row in the matrix. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthogonalize(ref Matrix, out Matrix) Orthogonalizes the specified matrix. Declaration public static void Orthogonalize(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to orthogonalize. Matrix result When the method completes, contains the orthogonalized matrix. Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the matrix will be orthogonal to any other given row in the matrix. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source OrthoLH(Single, Single, Single, Single) Creates a left-handed, orthographic projection matrix. Declaration public static Matrix OrthoLH(float width, float height, float znear, float zfar) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source OrthoLH(Single, Single, Single, Single, out Matrix) Creates a left-handed, orthographic projection matrix. Declaration public static void OrthoLH(float width, float height, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source Orthonormalize() Orthonormalizes the specified matrix. Declaration public void Orthonormalize() Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthonormalize(Matrix) Orthonormalizes the specified matrix. Declaration public static Matrix Orthonormalize(Matrix value) Parameters Type Name Description Matrix value The matrix to orthonormalize. Returns Type Description Matrix The orthonormalized matrix. Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthonormalize(ref Matrix, out Matrix) Orthonormalizes the specified matrix. Declaration public static void Orthonormalize(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to orthonormalize. Matrix result When the method completes, contains the orthonormalized matrix. Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting matrix tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the matrix rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source OrthoOffCenterLH(Single, Single, Single, Single, Single, Single) Creates a left-handed, customized orthographic projection matrix. Declaration public static Matrix OrthoOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source OrthoOffCenterLH(Single, Single, Single, Single, Single, Single, out Matrix) Creates a left-handed, customized orthographic projection matrix. Declaration public static void OrthoOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source OrthoOffCenterRH(Single, Single, Single, Single, Single, Single) Creates a right-handed, customized orthographic projection matrix. Declaration public static Matrix OrthoOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source OrthoOffCenterRH(Single, Single, Single, Single, Single, Single, out Matrix) Creates a right-handed, customized orthographic projection matrix. Declaration public static void OrthoOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source OrthoRH(Single, Single, Single, Single) Creates a right-handed, orthographic projection matrix. Declaration public static Matrix OrthoRH(float width, float height, float znear, float zfar) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source OrthoRH(Single, Single, Single, Single, out Matrix) Creates a right-handed, orthographic projection matrix. Declaration public static void OrthoRH(float width, float height, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveFovLH(Single, Single, Single, Single) Creates a left-handed, perspective projection matrix based on a field of view. Declaration public static Matrix PerspectiveFovLH(float fov, float aspect, float znear, float zfar) Parameters Type Name Description System.Single fov Field of view in the y direction, in radians. System.Single aspect Aspect ratio, defined as view space width divided by height. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveFovLH(Single, Single, Single, Single, out Matrix) Creates a left-handed, perspective projection matrix based on a field of view. Declaration public static void PerspectiveFovLH(float fov, float aspect, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single fov Field of view in the y direction, in radians. System.Single aspect Aspect ratio, defined as view space width divided by height. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveFovRH(Single, Single, Single, Single) Creates a right-handed, perspective projection matrix based on a field of view. Declaration public static Matrix PerspectiveFovRH(float fov, float aspect, float znear, float zfar) Parameters Type Name Description System.Single fov Field of view in the y direction, in radians. System.Single aspect Aspect ratio, defined as view space width divided by height. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveFovRH(Single, Single, Single, Single, out Matrix) Creates a right-handed, perspective projection matrix based on a field of view. Declaration public static void PerspectiveFovRH(float fov, float aspect, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single fov Field of view in the y direction, in radians. System.Single aspect Aspect ratio, defined as view space width divided by height. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveLH(Single, Single, Single, Single) Creates a left-handed, perspective projection matrix. Declaration public static Matrix PerspectiveLH(float width, float height, float znear, float zfar) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveLH(Single, Single, Single, Single, out Matrix) Creates a left-handed, perspective projection matrix. Declaration public static void PerspectiveLH(float width, float height, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveOffCenterLH(Single, Single, Single, Single, Single, Single) Creates a left-handed, customized perspective projection matrix. Declaration public static Matrix PerspectiveOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveOffCenterLH(Single, Single, Single, Single, Single, Single, out Matrix) Creates a left-handed, customized perspective projection matrix. Declaration public static void PerspectiveOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveOffCenterRH(Single, Single, Single, Single, Single, Single) Creates a right-handed, customized perspective projection matrix. Declaration public static Matrix PerspectiveOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveOffCenterRH(Single, Single, Single, Single, Single, Single, out Matrix) Creates a right-handed, customized perspective projection matrix. Declaration public static void PerspectiveOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single left Minimum x-value of the viewing volume. System.Single right Maximum x-value of the viewing volume. System.Single bottom Minimum y-value of the viewing volume. System.Single top Maximum y-value of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source PerspectiveRH(Single, Single, Single, Single) Creates a right-handed, perspective projection matrix. Declaration public static Matrix PerspectiveRH(float width, float height, float znear, float zfar) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Returns Type Description Matrix The created projection matrix. | Improve this Doc View Source PerspectiveRH(Single, Single, Single, Single, out Matrix) Creates a right-handed, perspective projection matrix. Declaration public static void PerspectiveRH(float width, float height, float znear, float zfar, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single znear Minimum z-value of the viewing volume. System.Single zfar Maximum z-value of the viewing volume. Matrix result When the method completes, contains the created projection matrix. | Improve this Doc View Source ReducedRowEchelonForm(ref Matrix, ref Vector4, out Matrix, out Vector4) Brings the matrix into reduced row echelon form using elementary row operations. Declaration public static void ReducedRowEchelonForm(ref Matrix value, ref Vector4 augment, out Matrix result, out Vector4 augmentResult) Parameters Type Name Description Matrix value The matrix to put into reduced row echelon form. Vector4 augment The fifth column of the matrix. Matrix result When the method completes, contains the resultant matrix after the operation. Vector4 augmentResult When the method completes, contains the resultant fifth column of the matrix. Remarks The fifth column is often called the augmented part of the matrix. This is because the fifth column is really just an extension of the matrix so that there is a place to put all of the non-zero components after the operation is complete. Often times the resultant matrix will the identity matrix or a matrix similar to the identity matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear. This method can be used to solve systems of linear equations. Upon completion of this method, the augmentResult will contain the solution for the system. It is up to the user to analyze both the input and the result to determine if a solution really exists. | Improve this Doc View Source RotationAxis(Vector3, Single) Creates a matrix that rotates around an arbitrary axis. Declaration public static Matrix RotationAxis(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis around which to rotate. This parameter is assumed to be normalized. System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationAxis(ref Vector3, Single, out Matrix) Creates a matrix that rotates around an arbitrary axis. Declaration public static void RotationAxis(ref Vector3 axis, float angle, out Matrix result) Parameters Type Name Description Vector3 axis The axis around which to rotate. This parameter is assumed to be normalized. System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix result When the method completes, contains the created rotation matrix. | Improve this Doc View Source RotationQuaternion(Quaternion) Creates a rotation matrix from a quaternion. Declaration public static Matrix RotationQuaternion(Quaternion rotation) Parameters Type Name Description Quaternion rotation The quaternion to use to build the matrix. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationQuaternion(ref Quaternion, out Matrix) Creates a rotation matrix from a quaternion. Declaration public static void RotationQuaternion(ref Quaternion rotation, out Matrix result) Parameters Type Name Description Quaternion rotation The quaternion to use to build the matrix. Matrix result The created rotation matrix. | Improve this Doc View Source RotationX(Single) Creates a matrix that rotates around the x-axis. Declaration public static Matrix RotationX(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationX(Single, out Matrix) Creates a matrix that rotates around the x-axis. Declaration public static void RotationX(float angle, out Matrix result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix result When the method completes, contains the created rotation matrix. | Improve this Doc View Source RotationY(Single) Creates a matrix that rotates around the y-axis. Declaration public static Matrix RotationY(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationY(Single, out Matrix) Creates a matrix that rotates around the y-axis. Declaration public static void RotationY(float angle, out Matrix result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix result When the method completes, contains the created rotation matrix. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single) Creates a rotation matrix with a specified yaw, pitch, and roll. Declaration public static Matrix RotationYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description System.Single yaw Yaw around the y-axis, in radians. System.Single pitch Pitch around the x-axis, in radians. System.Single roll Roll around the z-axis, in radians. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single, out Matrix) Creates a rotation matrix with a specified yaw, pitch, and roll. Declaration public static void RotationYawPitchRoll(float yaw, float pitch, float roll, out Matrix result) Parameters Type Name Description System.Single yaw Yaw around the y-axis, in radians. System.Single pitch Pitch around the x-axis, in radians. System.Single roll Roll around the z-axis, in radians. Matrix result When the method completes, contains the created rotation matrix. | Improve this Doc View Source RotationZ(Single) Creates a matrix that rotates around the z-axis. Declaration public static Matrix RotationZ(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix The created rotation matrix. | Improve this Doc View Source RotationZ(Single, out Matrix) Creates a matrix that rotates around the z-axis. Declaration public static void RotationZ(float angle, out Matrix result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix result When the method completes, contains the created rotation matrix. | Improve this Doc View Source RowEchelonForm(Matrix) Brings the matrix into row echelon form using elementary row operations; Declaration public static Matrix RowEchelonForm(Matrix value) Parameters Type Name Description Matrix value The matrix to put into row echelon form. Returns Type Description Matrix When the method completes, contains the row echelon form of the matrix. | Improve this Doc View Source RowEchelonForm(ref Matrix, out Matrix) Brings the matrix into row echelon form using elementary row operations; Declaration public static void RowEchelonForm(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to put into row echelon form. Matrix result When the method completes, contains the row echelon form of the matrix. | Improve this Doc View Source Scaling(Vector3) Creates a matrix that scales along the x-axis, y-axis, and y-axis. Declaration public static Matrix Scaling(Vector3 scale) Parameters Type Name Description Vector3 scale Scaling factor for all three axes. Returns Type Description Matrix The created scaling matrix. | Improve this Doc View Source Scaling(ref Vector3, out Matrix) Creates a matrix that scales along the x-axis, y-axis, and y-axis. Declaration public static void Scaling(ref Vector3 scale, out Matrix result) Parameters Type Name Description Vector3 scale Scaling factor for all three axes. Matrix result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Scaling(Single) Creates a matrix that uniformly scales along all three axis. Declaration public static Matrix Scaling(float scale) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Returns Type Description Matrix The created scaling matrix. | Improve this Doc View Source Scaling(Single, out Matrix) Creates a matrix that uniformly scales along all three axis. Declaration public static void Scaling(float scale, out Matrix result) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Matrix result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Scaling(Single, Single, Single) Creates a matrix that scales along the x-axis, y-axis, and y-axis. Declaration public static Matrix Scaling(float x, float y, float z) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. Returns Type Description Matrix The created scaling matrix. | Improve this Doc View Source Scaling(Single, Single, Single, out Matrix) Creates a matrix that scales along the x-axis, y-axis, and y-axis. Declaration public static void Scaling(float x, float y, float z, out Matrix result) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. Matrix result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Skew(Single, ref Vector3, ref Vector3, out Matrix) Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle. shearing is performed in the direction of translation vector, where translation vector and rotation vector define the shearing plane. The effect is such that the skewed rotation vector has the specified angle with rotation itself. Declaration public static void Skew(float angle, ref Vector3 rotationVec, ref Vector3 transVec, out Matrix matrix) Parameters Type Name Description System.Single angle The rotation angle. Vector3 rotationVec The rotation vector Vector3 transVec The translation vector Matrix matrix Contains the created skew/shear matrix. | Improve this Doc View Source SmoothStep(Matrix, Matrix, Single) Performs a cubic interpolation between two matrices. Declaration public static Matrix SmoothStep(Matrix start, Matrix end, float amount) Parameters Type Name Description Matrix start Start matrix. Matrix end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix The cubic interpolation of the two matrices. | Improve this Doc View Source SmoothStep(ref Matrix, ref Matrix, Single, out Matrix) Performs a cubic interpolation between two matrices. Declaration public static void SmoothStep(ref Matrix start, ref Matrix end, float amount, out Matrix result) Parameters Type Name Description Matrix start Start matrix. Matrix end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix result When the method completes, contains the cubic interpolation of the two matrices. | Improve this Doc View Source Subtract(Matrix, Matrix) Determines the difference between two matrices. Declaration public static Matrix Subtract(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to subtract. Matrix right The second matrix to subtract. Returns Type Description Matrix The difference between the two matrices. | Improve this Doc View Source Subtract(ref Matrix, ref Matrix, out Matrix) Determines the difference between two matrices. Declaration public static void Subtract(ref Matrix left, ref Matrix right, out Matrix result) Parameters Type Name Description Matrix left The first matrix to subtract. Matrix right The second matrix to subtract. Matrix result When the method completes, contains the difference between the two matrices. | Improve this Doc View Source ToArray() Creates an array containing the elements of the matrix. Declaration public float[] ToArray() Returns Type Description System.Single [] A sixteen-element array containing the components of the matrix. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transformation(Vector3, Quaternion, Vector3, Vector3, Quaternion, Vector3) Creates a transformation matrix. Declaration public static Matrix Transformation(Vector3 scalingCenter, Quaternion scalingRotation, Vector3 scaling, Vector3 rotationCenter, Quaternion rotation, Vector3 translation) Parameters Type Name Description Vector3 scalingCenter Center point of the scaling operation. Quaternion scalingRotation Scaling rotation amount. Vector3 scaling Scaling factor. Vector3 rotationCenter The center of the rotation. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Returns Type Description Matrix The created transformation matrix. | Improve this Doc View Source Transformation(ref Vector3, ref Quaternion, ref Vector3, ref Vector3, ref Quaternion, ref Vector3, out Matrix) Creates a transformation matrix. Declaration public static void Transformation(ref Vector3 scalingCenter, ref Quaternion scalingRotation, ref Vector3 scaling, ref Vector3 rotationCenter, ref Quaternion rotation, ref Vector3 translation, out Matrix result) Parameters Type Name Description Vector3 scalingCenter Center point of the scaling operation. Quaternion scalingRotation Scaling rotation amount. Vector3 scaling Scaling factor. Vector3 rotationCenter The center of the rotation. Quaternion rotation The rotation of the transformation. Vector3 translation The translation factor of the transformation. Matrix result When the method completes, contains the created transformation matrix. | Improve this Doc View Source Transformation2D(Vector2, Single, Vector2, Vector2, Single, Vector2) Creates a 2D transformation matrix. Declaration public static Matrix Transformation2D(Vector2 scalingCenter, float scalingRotation, Vector2 scaling, Vector2 rotationCenter, float rotation, Vector2 translation) Parameters Type Name Description Vector2 scalingCenter Center point of the scaling operation. System.Single scalingRotation Scaling rotation amount. Vector2 scaling Scaling factor. Vector2 rotationCenter The center of the rotation. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Returns Type Description Matrix The created transformation matrix. | Improve this Doc View Source Transformation2D(ref Vector2, Single, ref Vector2, ref Vector2, Single, ref Vector2, out Matrix) Creates a 2D transformation matrix. Declaration public static void Transformation2D(ref Vector2 scalingCenter, float scalingRotation, ref Vector2 scaling, ref Vector2 rotationCenter, float rotation, ref Vector2 translation, out Matrix result) Parameters Type Name Description Vector2 scalingCenter Center point of the scaling operation. System.Single scalingRotation Scaling rotation amount. Vector2 scaling Scaling factor. Vector2 rotationCenter The center of the rotation. System.Single rotation The rotation of the transformation. Vector2 translation The translation factor of the transformation. Matrix result When the method completes, contains the created transformation matrix. | Improve this Doc View Source Translation(Vector3) Creates a translation matrix using the specified offsets. Declaration public static Matrix Translation(Vector3 value) Parameters Type Name Description Vector3 value The offset for all three coordinate planes. Returns Type Description Matrix The created translation matrix. | Improve this Doc View Source Translation(ref Vector3, out Matrix) Creates a translation matrix using the specified offsets. Declaration public static void Translation(ref Vector3 value, out Matrix result) Parameters Type Name Description Vector3 value The offset for all three coordinate planes. Matrix result When the method completes, contains the created translation matrix. | Improve this Doc View Source Translation(Single, Single, Single) Creates a translation matrix using the specified offsets. Declaration public static Matrix Translation(float x, float y, float z) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. System.Single z Z-coordinate offset. Returns Type Description Matrix The created translation matrix. | Improve this Doc View Source Translation(Single, Single, Single, out Matrix) Creates a translation matrix using the specified offsets. Declaration public static void Translation(float x, float y, float z, out Matrix result) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. System.Single z Z-coordinate offset. Matrix result When the method completes, contains the created translation matrix. | Improve this Doc View Source Transpose() Transposes the matrix. Declaration public void Transpose() | Improve this Doc View Source Transpose(Matrix) Calculates the transpose of the specified matrix. Declaration public static Matrix Transpose(Matrix value) Parameters Type Name Description Matrix value The matrix whose transpose is to be calculated. Returns Type Description Matrix The transpose of the specified matrix. | Improve this Doc View Source Transpose(ref Matrix, out Matrix) Calculates the transpose of the specified matrix. Declaration public static void Transpose(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix whose transpose is to be calculated. Matrix result When the method completes, contains the transpose of the specified matrix. | Improve this Doc View Source TransposeByRef(ref Matrix, ref Matrix) Calculates the transpose of the specified matrix. Declaration public static void TransposeByRef(ref Matrix value, ref Matrix result) Parameters Type Name Description Matrix value The matrix whose transpose is to be calculated. Matrix result When the method completes, contains the transpose of the specified matrix. | Improve this Doc View Source UpperTriangularForm(Matrix) Brings the matrix into upper triangular form using elementary row operations. Declaration public static Matrix UpperTriangularForm(Matrix value) Parameters Type Name Description Matrix value The matrix to put into upper triangular form. Returns Type Description Matrix The upper triangular matrix. Remarks If the matrix is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the matrix represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source UpperTriangularForm(ref Matrix, out Matrix) Brings the matrix into upper triangular form using elementary row operations. Declaration public static void UpperTriangularForm(ref Matrix value, out Matrix result) Parameters Type Name Description Matrix value The matrix to put into upper triangular form. Matrix result When the method completes, contains the upper triangular matrix. Remarks If the matrix is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the matrix represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. Operators | Improve this Doc View Source Addition(Matrix, Matrix) Adds two matrices. Declaration public static Matrix operator +(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to add. Matrix right The second matrix to add. Returns Type Description Matrix The sum of the two matrices. | Improve this Doc View Source Division(Matrix, Matrix) Divides two matrices. Declaration public static Matrix operator /(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to divide. Matrix right The second matrix to divide. Returns Type Description Matrix The quotient of the two matrices. | Improve this Doc View Source Division(Matrix, Single) Scales a matrix by a given value. Declaration public static Matrix operator /(Matrix left, float right) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix The scaled matrix. | Improve this Doc View Source Equality(Matrix, Matrix) Tests for equality between two objects. Declaration public static bool operator ==(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first value to compare. Matrix right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(Matrix, Matrix) Tests for inequality between two objects. Declaration public static bool operator !=(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first value to compare. Matrix right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Matrix, Matrix) Multiplies two matrices. Declaration public static Matrix operator *(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to multiply. Matrix right The second matrix to multiply. Returns Type Description Matrix The product of the two matrices. | Improve this Doc View Source Multiply(Matrix, Single) Scales a matrix by a given value. Declaration public static Matrix operator *(Matrix left, float right) Parameters Type Name Description Matrix left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix The scaled matrix. | Improve this Doc View Source Multiply(Single, Matrix) Scales a matrix by a given value. Declaration public static Matrix operator *(float left, Matrix right) Parameters Type Name Description System.Single left The amount by which to scale. Matrix right The matrix to scale. Returns Type Description Matrix The scaled matrix. | Improve this Doc View Source Subtraction(Matrix, Matrix) Subtracts two matrices. Declaration public static Matrix operator -(Matrix left, Matrix right) Parameters Type Name Description Matrix left The first matrix to subtract. Matrix right The second matrix to subtract. Returns Type Description Matrix The difference between the two matrices. | Improve this Doc View Source UnaryNegation(Matrix) Negates a matrix. Declaration public static Matrix operator -(Matrix value) Parameters Type Name Description Matrix value The matrix to negate. Returns Type Description Matrix The negated matrix. | Improve this Doc View Source UnaryPlus(Matrix) Assert a matrix (return it unchanged). Declaration public static Matrix operator +(Matrix value) Parameters Type Name Description Matrix value The matrix to assert (unchanged). Returns Type Description Matrix The asserted (unchanged) matrix. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Matrix3x2.html": {
    "href": "api/Fluint.Layer.Mathematics.Matrix3x2.html",
    "title": "Struct Matrix3x2 | Fluint",
    "keywords": "Struct Matrix3x2 Direct2D Matrix3x2. Supports implicit cast from Matrix . Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Matrix3x2 Constructors | Improve this Doc View Source Matrix3x2(Single) Initializes a new instance of the Matrix3x2 struct. Declaration public Matrix3x2(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Matrix3x2(Single, Single, Single, Single, Single, Single) Initializes a new instance of the Matrix3x2 struct. Declaration public Matrix3x2(float M11, float M12, float M21, float M22, float M31, float M32) Parameters Type Name Description System.Single M11 The value to assign at row 1 column 1 of the matrix. System.Single M12 The value to assign at row 1 column 2 of the matrix. System.Single M21 The value to assign at row 2 column 1 of the matrix. System.Single M22 The value to assign at row 2 column 2 of the matrix. System.Single M31 The value to assign at row 3 column 1 of the matrix. System.Single M32 The value to assign at row 3 column 2 of the matrix. | Improve this Doc View Source Matrix3x2(Single[]) Initializes a new instance of the Matrix3x2 struct. Declaration public Matrix3x2(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the components of the matrix. This must be an array with six elements. Fields | Improve this Doc View Source Identity Gets the identity matrix. Declaration public static readonly Matrix3x2 Identity Field Value Type Description Matrix3x2 The identity matrix. | Improve this Doc View Source M11 Element (1,1) Declaration public float M11 Field Value Type Description System.Single | Improve this Doc View Source M12 Element (1,2) Declaration public float M12 Field Value Type Description System.Single | Improve this Doc View Source M21 Element (2,1) Declaration public float M21 Field Value Type Description System.Single | Improve this Doc View Source M22 Element (2,2) Declaration public float M22 Field Value Type Description System.Single | Improve this Doc View Source M31 Element (3,1) Declaration public float M31 Field Value Type Description System.Single | Improve this Doc View Source M32 Element (3,2) Declaration public float M32 Field Value Type Description System.Single Properties | Improve this Doc View Source Column1 Gets or sets the first column in the matrix; that is M11, M21, and M31. Declaration public Vector3 Column1 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Column2 Gets or sets the second column in the matrix; that is M12, M22, and M32. Declaration public Vector3 Column2 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is an identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean true if this instance is an identity matrix; otherwise, false . | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the component to access. Property Value Type Description System.Single The value of the matrix component, depending on the index. | Improve this Doc View Source Item[Int32, Int32] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row of the matrix to access. System.Int32 column The column of the matrix to access. Property Value Type Description System.Single The value of the matrix component, depending on the index. | Improve this Doc View Source Row1 Gets or sets the first row in the matrix; that is M11 and M12. Declaration public Vector2 Row1 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row2 Gets or sets the second row in the matrix; that is M21 and M22. Declaration public Vector2 Row2 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row3 Gets or sets the third row in the matrix; that is M31 and M32. Declaration public Vector2 Row3 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source ScaleVector Gets or sets the scale of the matrix; that is M11 and M22. Declaration public Vector2 ScaleVector { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source TranslationVector Gets or sets the translation of the matrix; that is M31 and M32. Declaration public Vector2 TranslationVector { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Add(Matrix3x2, Matrix3x2) Determines the sum of two matrices. Declaration public static Matrix3x2 Add(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to add. Matrix3x2 right The second matrix to add. Returns Type Description Matrix3x2 The sum of the two matrices. | Improve this Doc View Source Add(ref Matrix3x2, ref Matrix3x2, out Matrix3x2) Determines the sum of two matrices. Declaration public static void Add(ref Matrix3x2 left, ref Matrix3x2 right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The first matrix to add. Matrix3x2 right The second matrix to add. Matrix3x2 result When the method completes, contains the sum of the two matrices. | Improve this Doc View Source Determinant() Calculates the determinant of this matrix. Declaration public float Determinant() Returns Type Description System.Single Result of the determinant. | Improve this Doc View Source Divide(ref Matrix3x2, ref Matrix3x2, out Matrix3x2) Determines the quotient of two matrices. Declaration public static void Divide(ref Matrix3x2 left, ref Matrix3x2 right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The first matrix to divide. Matrix3x2 right The second matrix to divide. Matrix3x2 result When the method completes, contains the quotient of the two matrices. | Improve this Doc View Source Divide(ref Matrix3x2, Single, out Matrix3x2) Scales a matrix by the given value. Declaration public static void Divide(ref Matrix3x2 left, float right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The matrix to scale. System.Single right The amount by which to scale. Matrix3x2 result When the method completes, contains the scaled matrix. | Improve this Doc View Source Equals(Matrix3x2) Determines whether the specified Matrix3x2 is equal to this instance. Declaration public bool Equals(Matrix3x2 other) Parameters Type Name Description Matrix3x2 other The Matrix3x2 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix3x2 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Matrix3x2) Determines whether the specified Matrix3x2 is equal to this instance. Declaration public bool Equals(ref Matrix3x2 other) Parameters Type Name Description Matrix3x2 other The Matrix3x2 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix3x2 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Invert() Calculates the inverse of this matrix instance. Declaration public void Invert() | Improve this Doc View Source Invert(Matrix3x2) Calculates the inverse of the specified matrix. Declaration public static Matrix3x2 Invert(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The matrix whose inverse is to be calculated. Returns Type Description Matrix3x2 the inverse of the specified matrix. | Improve this Doc View Source Invert(ref Matrix3x2, out Matrix3x2) Calculates the inverse of the specified matrix. Declaration public static void Invert(ref Matrix3x2 value, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 value The matrix whose inverse is to be calculated. Matrix3x2 result When the method completes, contains the inverse of the specified matrix. | Improve this Doc View Source Lerp(Matrix3x2, Matrix3x2, Single) Performs a linear interpolation between two matrices. Declaration public static Matrix3x2 Lerp(Matrix3x2 start, Matrix3x2 end, float amount) Parameters Type Name Description Matrix3x2 start Start matrix. Matrix3x2 end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix3x2 The linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Matrix3x2, ref Matrix3x2, Single, out Matrix3x2) Performs a linear interpolation between two matrices. Declaration public static void Lerp(ref Matrix3x2 start, ref Matrix3x2 end, float amount, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 start Start matrix. Matrix3x2 end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix3x2 result When the method completes, contains the linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Multiply(Matrix3x2, Matrix3x2) Determines the product of two matrices. Declaration public static Matrix3x2 Multiply(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to multiply. Matrix3x2 right The second matrix to multiply. Returns Type Description Matrix3x2 The product of the two matrices. | Improve this Doc View Source Multiply(Matrix3x2, Single) Scales a matrix by the given value. Declaration public static Matrix3x2 Multiply(Matrix3x2 left, float right) Parameters Type Name Description Matrix3x2 left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x2 The scaled matrix. | Improve this Doc View Source Multiply(ref Matrix3x2, ref Matrix3x2, out Matrix3x2) Determines the product of two matrices. Declaration public static void Multiply(ref Matrix3x2 left, ref Matrix3x2 right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The first matrix to multiply. Matrix3x2 right The second matrix to multiply. Matrix3x2 result The product of the two matrices. | Improve this Doc View Source Multiply(ref Matrix3x2, Single, out Matrix3x2) Scales a matrix by the given value. Declaration public static void Multiply(ref Matrix3x2 left, float right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The matrix to scale. System.Single right The amount by which to scale. Matrix3x2 result When the method completes, contains the scaled matrix. | Improve this Doc View Source Negate(Matrix3x2) Negates a matrix. Declaration public static Matrix3x2 Negate(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The matrix to be negated. Returns Type Description Matrix3x2 The negated matrix. | Improve this Doc View Source Negate(ref Matrix3x2, out Matrix3x2) Negates a matrix. Declaration public static void Negate(ref Matrix3x2 value, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 value The matrix to be negated. Matrix3x2 result When the method completes, contains the negated matrix. | Improve this Doc View Source Rotation(Single) Creates a matrix that rotates. Declaration public static Matrix3x2 Rotation(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Returns Type Description Matrix3x2 The created rotation matrix. | Improve this Doc View Source Rotation(Single, out Matrix3x2) Creates a matrix that rotates. Declaration public static void Rotation(float angle, out Matrix3x2 result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Matrix3x2 result When the method completes, contains the created rotation matrix. | Improve this Doc View Source Rotation(Single, Vector2) Creates a matrix that rotates about a specified center. Declaration public static Matrix3x2 Rotation(float angle, Vector2 center) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Vector2 center The center of the rotation. Returns Type Description Matrix3x2 The created rotation matrix. | Improve this Doc View Source Rotation(Single, Vector2, out Matrix3x2) Creates a matrix that rotates about a specified center. Declaration public static void Rotation(float angle, Vector2 center, out Matrix3x2 result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Vector2 center The center of the rotation. Matrix3x2 result When the method completes, contains the created rotation matrix. | Improve this Doc View Source Scaling(Vector2) Creates a matrix that scales along the x-axis and y-axis. Declaration public static Matrix3x2 Scaling(Vector2 scale) Parameters Type Name Description Vector2 scale Scaling factor for both axes. Returns Type Description Matrix3x2 The created scaling matrix. | Improve this Doc View Source Scaling(ref Vector2, out Matrix3x2) Creates a matrix that scales along the x-axis and y-axis. Declaration public static void Scaling(ref Vector2 scale, out Matrix3x2 result) Parameters Type Name Description Vector2 scale Scaling factor for both axes. Matrix3x2 result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Scaling(Single) Creates a matrix that uniformly scales along both axes. Declaration public static Matrix3x2 Scaling(float scale) Parameters Type Name Description System.Single scale The uniform scale that is applied along both axes. Returns Type Description Matrix3x2 The created scaling matrix. | Improve this Doc View Source Scaling(Single, out Matrix3x2) Creates a matrix that uniformly scales along both axes. Declaration public static void Scaling(float scale, out Matrix3x2 result) Parameters Type Name Description System.Single scale The uniform scale that is applied along both axes. Matrix3x2 result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Scaling(Single, Single) Creates a matrix that scales along the x-axis and y-axis. Declaration public static Matrix3x2 Scaling(float x, float y) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. Returns Type Description Matrix3x2 The created scaling matrix. | Improve this Doc View Source Scaling(Single, Single, out Matrix3x2) Creates a matrix that scales along the x-axis and y-axis. Declaration public static void Scaling(float x, float y, out Matrix3x2 result) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. Matrix3x2 result When the method completes, contains the created scaling matrix. | Improve this Doc View Source Scaling(Single, Single, Vector2) Creates a matrix that is scaling from a specified center. Declaration public static Matrix3x2 Scaling(float x, float y, Vector2 center) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. Vector2 center The center of the scaling. Returns Type Description Matrix3x2 The created scaling matrix. | Improve this Doc View Source Scaling(Single, Single, ref Vector2, out Matrix3x2) Creates a matrix that is scaling from a specified center. Declaration public static void Scaling(float x, float y, ref Vector2 center, out Matrix3x2 result) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. Vector2 center The center of the scaling. Matrix3x2 result The created scaling matrix. | Improve this Doc View Source Skew(Single, Single) Creates a skew matrix. Declaration public static Matrix3x2 Skew(float angleX, float angleY) Parameters Type Name Description System.Single angleX Angle of skew along the X-axis in radians. System.Single angleY Angle of skew along the Y-axis in radians. Returns Type Description Matrix3x2 The created skew matrix. | Improve this Doc View Source Skew(Single, Single, out Matrix3x2) Creates a skew matrix. Declaration public static void Skew(float angleX, float angleY, out Matrix3x2 result) Parameters Type Name Description System.Single angleX Angle of skew along the X-axis in radians. System.Single angleY Angle of skew along the Y-axis in radians. Matrix3x2 result When the method completes, contains the created skew matrix. | Improve this Doc View Source SmoothStep(Matrix3x2, Matrix3x2, Single) Performs a cubic interpolation between two matrices. Declaration public static Matrix3x2 SmoothStep(Matrix3x2 start, Matrix3x2 end, float amount) Parameters Type Name Description Matrix3x2 start Start matrix. Matrix3x2 end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix3x2 The cubic interpolation of the two matrices. | Improve this Doc View Source SmoothStep(ref Matrix3x2, ref Matrix3x2, Single, out Matrix3x2) Performs a cubic interpolation between two matrices. Declaration public static void SmoothStep(ref Matrix3x2 start, ref Matrix3x2 end, float amount, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 start Start matrix. Matrix3x2 end End matrix. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix3x2 result When the method completes, contains the cubic interpolation of the two matrices. | Improve this Doc View Source Subtract(Matrix3x2, Matrix3x2) Determines the difference between two matrices. Declaration public static Matrix3x2 Subtract(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to subtract. Matrix3x2 right The second matrix to subtract. Returns Type Description Matrix3x2 The difference between the two matrices. | Improve this Doc View Source Subtract(ref Matrix3x2, ref Matrix3x2, out Matrix3x2) Determines the difference between two matrices. Declaration public static void Subtract(ref Matrix3x2 left, ref Matrix3x2 right, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 left The first matrix to subtract. Matrix3x2 right The second matrix to subtract. Matrix3x2 result When the method completes, contains the difference between the two matrices. | Improve this Doc View Source ToArray() Creates an array containing the elements of the matrix. Declaration public float[] ToArray() Returns Type Description System.Single [] A sixteen-element array containing the components of the matrix. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transformation(Single, Single, Single, Single, Single) Creates a transformation matrix. Declaration public static Matrix3x2 Transformation(float xScale, float yScale, float angle, float xOffset, float yOffset) Parameters Type Name Description System.Single xScale Scaling factor that is applied along the x-axis. System.Single yScale Scaling factor that is applied along the y-axis. System.Single angle Angle of rotation in radians. System.Single xOffset X-coordinate offset. System.Single yOffset Y-coordinate offset. Returns Type Description Matrix3x2 The created transformation matrix. | Improve this Doc View Source Transformation(Single, Single, Single, Single, Single, out Matrix3x2) Creates a transformation matrix. Declaration public static void Transformation(float xScale, float yScale, float angle, float xOffset, float yOffset, out Matrix3x2 result) Parameters Type Name Description System.Single xScale Scaling factor that is applied along the x-axis. System.Single yScale Scaling factor that is applied along the y-axis. System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. System.Single xOffset X-coordinate offset. System.Single yOffset Y-coordinate offset. Matrix3x2 result When the method completes, contains the created transformation matrix. | Improve this Doc View Source TransformPoint(Matrix3x2, Vector2) Transforms a vector by this matrix. Declaration public static Vector2 TransformPoint(Matrix3x2 matrix, Vector2 point) Parameters Type Name Description Matrix3x2 matrix The matrix to use as a transformation matrix. Vector2 point The original vector to apply the transformation. Returns Type Description Vector2 The result of the transformation for the input vector. | Improve this Doc View Source TransformPoint(ref Matrix3x2, ref Vector2, out Vector2) Transforms a vector by this matrix. Declaration public static void TransformPoint(ref Matrix3x2 matrix, ref Vector2 point, out Vector2 result) Parameters Type Name Description Matrix3x2 matrix The matrix to use as a transformation matrix. Vector2 point The original vector to apply the transformation. Vector2 result The result of the transformation for the input vector. | Improve this Doc View Source Translation(Vector2) Creates a translation matrix using the specified offsets. Declaration public static Matrix3x2 Translation(Vector2 value) Parameters Type Name Description Vector2 value The offset for both coordinate planes. Returns Type Description Matrix3x2 The created translation matrix. | Improve this Doc View Source Translation(ref Vector2, out Matrix3x2) Creates a translation matrix using the specified offsets. Declaration public static void Translation(ref Vector2 value, out Matrix3x2 result) Parameters Type Name Description Vector2 value The offset for both coordinate planes. Matrix3x2 result When the method completes, contains the created translation matrix. | Improve this Doc View Source Translation(Single, Single) Creates a translation matrix using the specified offsets. Declaration public static Matrix3x2 Translation(float x, float y) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. Returns Type Description Matrix3x2 The created translation matrix. | Improve this Doc View Source Translation(Single, Single, out Matrix3x2) Creates a translation matrix using the specified offsets. Declaration public static void Translation(float x, float y, out Matrix3x2 result) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. Matrix3x2 result When the method completes, contains the created translation matrix. Operators | Improve this Doc View Source Addition(Matrix3x2, Matrix3x2) Adds two matrices. Declaration public static Matrix3x2 operator +(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to add. Matrix3x2 right The second matrix to add. Returns Type Description Matrix3x2 The sum of the two matrices. | Improve this Doc View Source Division(Matrix3x2, Matrix3x2) Divides two matrices. Declaration public static Matrix3x2 operator /(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to divide. Matrix3x2 right The second matrix to divide. Returns Type Description Matrix3x2 The quotient of the two matrices. | Improve this Doc View Source Division(Matrix3x2, Single) Scales a matrix by a given value. Declaration public static Matrix3x2 operator /(Matrix3x2 left, float right) Parameters Type Name Description Matrix3x2 left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x2 The scaled matrix. | Improve this Doc View Source Equality(Matrix3x2, Matrix3x2) Tests for equality between two objects. Declaration public static bool operator ==(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first value to compare. Matrix3x2 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Implicit(Matrix to Matrix3x2) Performs an implicit conversion from Matrix to Matrix3x2 . Declaration public static implicit operator Matrix3x2(Matrix matrix) Parameters Type Name Description Matrix matrix The matrix. Returns Type Description Matrix3x2 The result of the conversion. | Improve this Doc View Source Inequality(Matrix3x2, Matrix3x2) Tests for inequality between two objects. Declaration public static bool operator !=(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first value to compare. Matrix3x2 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Matrix3x2, Matrix3x2) Multiplies two matrices. Declaration public static Matrix3x2 operator *(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to multiply. Matrix3x2 right The second matrix to multiply. Returns Type Description Matrix3x2 The product of the two matrices. | Improve this Doc View Source Multiply(Matrix3x2, Single) Scales a matrix by a given value. Declaration public static Matrix3x2 operator *(Matrix3x2 left, float right) Parameters Type Name Description Matrix3x2 left The matrix to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x2 The scaled matrix. | Improve this Doc View Source Multiply(Single, Matrix3x2) Scales a matrix by a given value. Declaration public static Matrix3x2 operator *(float left, Matrix3x2 right) Parameters Type Name Description System.Single left The amount by which to scale. Matrix3x2 right The matrix to scale. Returns Type Description Matrix3x2 The scaled matrix. | Improve this Doc View Source Subtraction(Matrix3x2, Matrix3x2) Subtracts two matrices. Declaration public static Matrix3x2 operator -(Matrix3x2 left, Matrix3x2 right) Parameters Type Name Description Matrix3x2 left The first matrix to subtract. Matrix3x2 right The second matrix to subtract. Returns Type Description Matrix3x2 The difference between the two matrices. | Improve this Doc View Source UnaryNegation(Matrix3x2) Negates a matrix. Declaration public static Matrix3x2 operator -(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The matrix to negate. Returns Type Description Matrix3x2 The negated matrix. | Improve this Doc View Source UnaryPlus(Matrix3x2) Assert a matrix (return it unchanged). Declaration public static Matrix3x2 operator +(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The matrix to assert (unchanged). Returns Type Description Matrix3x2 The asserted (unchanged) matrix."
  },
  "api/Fluint.Layer.Mathematics.Matrix3x3.html": {
    "href": "api/Fluint.Layer.Mathematics.Matrix3x3.html",
    "title": "Struct Matrix3x3 | Fluint",
    "keywords": "Struct Matrix3x3 Represents a 3x3 Matrix ( contains only Scale and Rotation ). Implements IEquatable < Matrix3x3 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Matrix3x3 : IEquatable<Matrix3x3>, IFormattable Constructors | Improve this Doc View Source Matrix3x3(Single) Initializes a new instance of the Matrix3x3 struct. Declaration public Matrix3x3(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Matrix3x3(Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the Matrix3x3 struct. Declaration public Matrix3x3(float M11, float M12, float M13, float M21, float M22, float M23, float M31, float M32, float M33) Parameters Type Name Description System.Single M11 The value to assign at row 1 column 1 of the Matrix3x3. System.Single M12 The value to assign at row 1 column 2 of the Matrix3x3. System.Single M13 The value to assign at row 1 column 3 of the Matrix3x3. System.Single M21 The value to assign at row 2 column 1 of the Matrix3x3. System.Single M22 The value to assign at row 2 column 2 of the Matrix3x3. System.Single M23 The value to assign at row 2 column 3 of the Matrix3x3. System.Single M31 The value to assign at row 3 column 1 of the Matrix3x3. System.Single M32 The value to assign at row 3 column 2 of the Matrix3x3. System.Single M33 The value to assign at row 3 column 3 of the Matrix3x3. | Improve this Doc View Source Matrix3x3(Single[]) Initializes a new instance of the Matrix3x3 struct. Declaration public Matrix3x3(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the components of the Matrix3x3. This must be an array with sixteen elements. Fields | Improve this Doc View Source Identity The identity Matrix3x3 . Declaration public static readonly Matrix3x3 Identity Field Value Type Description Matrix3x3 | Improve this Doc View Source M11 Value at row 1 column 1 of the Matrix3x3. Declaration public float M11 Field Value Type Description System.Single | Improve this Doc View Source M12 Value at row 1 column 2 of the Matrix3x3. Declaration public float M12 Field Value Type Description System.Single | Improve this Doc View Source M13 Value at row 1 column 3 of the Matrix3x3. Declaration public float M13 Field Value Type Description System.Single | Improve this Doc View Source M21 Value at row 2 column 1 of the Matrix3x3. Declaration public float M21 Field Value Type Description System.Single | Improve this Doc View Source M22 Value at row 2 column 2 of the Matrix3x3. Declaration public float M22 Field Value Type Description System.Single | Improve this Doc View Source M23 Value at row 2 column 3 of the Matrix3x3. Declaration public float M23 Field Value Type Description System.Single | Improve this Doc View Source M31 Value at row 3 column 1 of the Matrix3x3. Declaration public float M31 Field Value Type Description System.Single | Improve this Doc View Source M32 Value at row 3 column 2 of the Matrix3x3. Declaration public float M32 Field Value Type Description System.Single | Improve this Doc View Source M33 Value at row 3 column 3 of the Matrix3x3. Declaration public float M33 Field Value Type Description System.Single | Improve this Doc View Source SizeInBytes The size of the Matrix3x3 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source Zero A Matrix3x3 with all of its components set to zero. Declaration public static readonly Matrix3x3 Zero Field Value Type Description Matrix3x3 Properties | Improve this Doc View Source Column1 Gets or sets the first column in the Matrix3x3; that is M11, M21, M31 Declaration public Vector3 Column1 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Column2 Gets or sets the second column in the Matrix3x3; that is M12, M22, M32 Declaration public Vector3 Column2 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Column3 Gets or sets the third column in the Matrix3x3; that is M13, M23, M33 Declaration public Vector3 Column3 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is an identity Matrix3x3. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean true if this instance is an identity Matrix3x3; otherwise, false . | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the component to access. Property Value Type Description System.Single The value of the Matrix3x3 component, depending on the index. | Improve this Doc View Source Item[Int32, Int32] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row of the Matrix3x3 to access. System.Int32 column The column of the Matrix3x3 to access. Property Value Type Description System.Single The value of the Matrix3x3 component, depending on the index. | Improve this Doc View Source Row1 Gets or sets the first row in the Matrix3x3; that is M11, M12, M13 Declaration public Vector3 Row1 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row2 Gets or sets the second row in the Matrix3x3; that is M21, M22, M23 Declaration public Vector3 Row2 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row3 Gets or sets the third row in the Matrix3x3; that is M31, M32, M33 Declaration public Vector3 Row3 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source ScaleVector Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33. Declaration public Vector3 ScaleVector { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Add(Matrix3x3, Matrix3x3) Determines the sum of two matrices. Declaration public static Matrix3x3 Add(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to add. Matrix3x3 right The second Matrix3x3 to add. Returns Type Description Matrix3x3 The sum of the two matrices. | Improve this Doc View Source Add(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Determines the sum of two matrices. Declaration public static void Add(ref Matrix3x3 left, ref Matrix3x3 right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to add. Matrix3x3 right The second Matrix3x3 to add. Matrix3x3 result When the method completes, contains the sum of the two matrices. | Improve this Doc View Source BillboardLH(Vector3, Vector3, Vector3, Vector3) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static Matrix3x3 BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Matrix3x3 The created billboard Matrix3x3. | Improve this Doc View Source BillboardLH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Matrix3x3) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardLH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Matrix3x3 result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Matrix3x3 result When the method completes, contains the created billboard Matrix3x3. | Improve this Doc View Source BillboardRH(Vector3, Vector3, Vector3, Vector3) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static Matrix3x3 BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Matrix3x3 The created billboard Matrix3x3. | Improve this Doc View Source BillboardRH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Matrix3x3) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardRH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Matrix3x3 result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Matrix3x3 result When the method completes, contains the created billboard Matrix3x3. | Improve this Doc View Source Decompose(out Vector3, out Quaternion) Decomposes a Matrix3x3 into a scale, rotation, and translation. Declaration public bool Decompose(out Vector3 scale, out Quaternion rotation) Parameters Type Name Description Vector3 scale When the method completes, contains the scaling component of the decomposed Matrix3x3. Quaternion rotation When the method completes, contains the rotation component of the decomposed Matrix3x3. Returns Type Description System.Boolean Remarks This method is designed to decompose an SRT transformation Matrix3x3 only. | Improve this Doc View Source DecomposeLQ(out Matrix3x3, out Matrix3x3) Decomposes a Matrix3x3 into a lower triangular Matrix3x3 L and an orthonormalized Matrix3x3 Q. Declaration public void DecomposeLQ(out Matrix3x3 L, out Matrix3x3 Q) Parameters Type Name Description Matrix3x3 L When the method completes, contains the lower triangular Matrix3x3 of the decomposition. Matrix3x3 Q When the method completes, contains the orthonormalized Matrix3x3 of the decomposition. | Improve this Doc View Source DecomposeQR(out Matrix3x3, out Matrix3x3) Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 Q and a right triangular Matrix3x3 R. Declaration public void DecomposeQR(out Matrix3x3 Q, out Matrix3x3 R) Parameters Type Name Description Matrix3x3 Q When the method completes, contains the orthonormalized Matrix3x3 of the decomposition. Matrix3x3 R When the method completes, contains the right triangular Matrix3x3 of the decomposition. | Improve this Doc View Source DecomposeUniformScale(out Single, out Quaternion) Decomposes a uniform scale matrix into a scale, rotation, and translation. A uniform scale matrix has the same scale in every axis. Declaration public bool DecomposeUniformScale(out float scale, out Quaternion rotation) Parameters Type Name Description System.Single scale When the method completes, contains the scaling component of the decomposed matrix. Quaternion rotation When the method completes, contains the rotation component of the decomposed matrix. Returns Type Description System.Boolean Remarks This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis. | Improve this Doc View Source Determinant() Calculates the determinant of the Matrix3x3. Declaration public float Determinant() Returns Type Description System.Single The determinant of the Matrix3x3. | Improve this Doc View Source Divide(Matrix3x3, Matrix3x3) Determines the quotient of two matrices. Declaration public static Matrix3x3 Divide(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to divide. Matrix3x3 right The second Matrix3x3 to divide. Returns Type Description Matrix3x3 The quotient of the two matrices. | Improve this Doc View Source Divide(Matrix3x3, Single) Scales a Matrix3x3 by the given value. Declaration public static Matrix3x3 Divide(Matrix3x3 left, float right) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x3 The scaled Matrix3x3. | Improve this Doc View Source Divide(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Determines the quotient of two matrices. Declaration public static void Divide(ref Matrix3x3 left, ref Matrix3x3 right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to divide. Matrix3x3 right The second Matrix3x3 to divide. Matrix3x3 result When the method completes, contains the quotient of the two matrices. | Improve this Doc View Source Divide(ref Matrix3x3, Single, out Matrix3x3) Scales a Matrix3x3 by the given value. Declaration public static void Divide(ref Matrix3x3 left, float right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Matrix3x3 result When the method completes, contains the scaled Matrix3x3. | Improve this Doc View Source Equals(Matrix3x3) Determines whether the specified Matrix3x3 is equal to this instance. Declaration public bool Equals(Matrix3x3 other) Parameters Type Name Description Matrix3x3 other The Matrix3x3 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix3x3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Matrix3x3) Determines whether the specified Matrix3x3 is equal to this instance. Declaration public bool Equals(ref Matrix3x3 other) Parameters Type Name Description Matrix3x3 other The Matrix3x3 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix3x3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Matrix3x3, ref Matrix3x3) Determines whether the specified Matrix3x3 are equal. Declaration public static bool Equals(ref Matrix3x3 a, ref Matrix3x3 b) Parameters Type Name Description Matrix3x3 a Matrix3x3 b Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source ExchangeColumns(Int32, Int32) Exchanges two columns in the Matrix3x3. Declaration public void ExchangeColumns(int firstColumn, int secondColumn) Parameters Type Name Description System.Int32 firstColumn The first column to exchange. This is an index of the column starting at zero. System.Int32 secondColumn The second column to exchange. This is an index of the column starting at zero. | Improve this Doc View Source ExchangeRows(Int32, Int32) Exchanges two rows in the Matrix3x3. Declaration public void ExchangeRows(int firstRow, int secondRow) Parameters Type Name Description System.Int32 firstRow The first row to exchange. This is an index of the row starting at zero. System.Int32 secondRow The second row to exchange. This is an index of the row starting at zero. | Improve this Doc View Source Exponent(Matrix3x3, Int32) Performs the exponential operation on a Matrix3x3. Declaration public static Matrix3x3 Exponent(Matrix3x3 value, int exponent) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to perform the operation on. System.Int32 exponent The exponent to raise the Matrix3x3 to. Returns Type Description Matrix3x3 The exponential Matrix3x3. | Improve this Doc View Source Exponent(ref Matrix3x3, Int32, out Matrix3x3) Performs the exponential operation on a Matrix3x3. Declaration public static void Exponent(ref Matrix3x3 value, int exponent, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to perform the operation on. System.Int32 exponent The exponent to raise the Matrix3x3 to. Matrix3x3 result When the method completes, contains the exponential Matrix3x3. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Invert() Inverts the Matrix3x3. Declaration public void Invert() | Improve this Doc View Source Invert(Matrix3x3) Calculates the inverse of the specified Matrix3x3. Declaration public static Matrix3x3 Invert(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 whose inverse is to be calculated. Returns Type Description Matrix3x3 The inverse of the specified Matrix3x3. | Improve this Doc View Source Invert(ref Matrix3x3, out Matrix3x3) Calculates the inverse of the specified Matrix3x3. Declaration public static void Invert(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 whose inverse is to be calculated. Matrix3x3 result When the method completes, contains the inverse of the specified Matrix3x3. | Improve this Doc View Source Lerp(Matrix3x3, Matrix3x3, Single) Performs a linear interpolation between two matrices. Declaration public static Matrix3x3 Lerp(Matrix3x3 start, Matrix3x3 end, float amount) Parameters Type Name Description Matrix3x3 start Start Matrix3x3. Matrix3x3 end End Matrix3x3. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix3x3 The linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Matrix3x3, ref Matrix3x3, Single, out Matrix3x3) Performs a linear interpolation between two matrices. Declaration public static void Lerp(ref Matrix3x3 start, ref Matrix3x3 end, float amount, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 start Start Matrix3x3. Matrix3x3 end End Matrix3x3. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix3x3 result When the method completes, contains the linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source LookAtLH(Vector3, Vector3, Vector3) Creates a left-handed, look-at Matrix3x3. Declaration public static Matrix3x3 LookAtLH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Matrix3x3 The created look-at Matrix3x3. | Improve this Doc View Source LookAtLH(ref Vector3, ref Vector3, ref Vector3, out Matrix3x3) Creates a left-handed, look-at Matrix3x3. Declaration public static void LookAtLH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Matrix3x3 result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Matrix3x3 result When the method completes, contains the created look-at Matrix3x3. | Improve this Doc View Source LookAtRH(Vector3, Vector3, Vector3) Creates a right-handed, look-at Matrix3x3. Declaration public static Matrix3x3 LookAtRH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Matrix3x3 The created look-at Matrix3x3. | Improve this Doc View Source LookAtRH(ref Vector3, ref Vector3, ref Vector3, out Matrix3x3) Creates a right-handed, look-at Matrix3x3. Declaration public static void LookAtRH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Matrix3x3 result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Matrix3x3 result When the method completes, contains the created look-at Matrix3x3. | Improve this Doc View Source LowerTriangularForm(Matrix3x3) Brings the Matrix3x3 into lower triangular form using elementary row operations. Declaration public static Matrix3x3 LowerTriangularForm(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into lower triangular form. Returns Type Description Matrix3x3 The lower triangular Matrix3x3. Remarks If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source LowerTriangularForm(ref Matrix3x3, out Matrix3x3) Brings the Matrix3x3 into lower triangular form using elementary row operations. Declaration public static void LowerTriangularForm(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into lower triangular form. Matrix3x3 result When the method completes, contains the lower triangular Matrix3x3. Remarks If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source Multiply(Matrix3x3, Matrix3x3) Determines the product of two matrices. Declaration public static Matrix3x3 Multiply(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to multiply. Matrix3x3 right The second Matrix3x3 to multiply. Returns Type Description Matrix3x3 The product of the two matrices. | Improve this Doc View Source Multiply(Matrix3x3, Single) Scales a Matrix3x3 by the given value. Declaration public static Matrix3x3 Multiply(Matrix3x3 left, float right) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x3 The scaled Matrix3x3. | Improve this Doc View Source Multiply(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Determines the product of two matrices. Declaration public static void Multiply(ref Matrix3x3 left, ref Matrix3x3 right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to multiply. Matrix3x3 right The second Matrix3x3 to multiply. Matrix3x3 result The product of the two matrices. | Improve this Doc View Source Multiply(ref Matrix3x3, Single, out Matrix3x3) Scales a Matrix3x3 by the given value. Declaration public static void Multiply(ref Matrix3x3 left, float right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Matrix3x3 result When the method completes, contains the scaled Matrix3x3. | Improve this Doc View Source Negate(Matrix3x3) Negates a Matrix3x3. Declaration public static Matrix3x3 Negate(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to be negated. Returns Type Description Matrix3x3 The negated Matrix3x3. | Improve this Doc View Source Negate(ref Matrix3x3, out Matrix3x3) Negates a Matrix3x3. Declaration public static void Negate(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to be negated. Matrix3x3 result When the method completes, contains the negated Matrix3x3. | Improve this Doc View Source Orthogonalize() Orthogonalizes the specified Matrix3x3. Declaration public void Orthogonalize() Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the Matrix3x3 will be orthogonal to any other given row in the Matrix3x3. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthogonalize(Matrix3x3) Orthogonalizes the specified Matrix3x3. Declaration public static Matrix3x3 Orthogonalize(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to orthogonalize. Returns Type Description Matrix3x3 The orthogonalized Matrix3x3. Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the Matrix3x3 will be orthogonal to any other given row in the Matrix3x3. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthogonalize(ref Matrix3x3, out Matrix3x3) Orthogonalizes the specified Matrix3x3. Declaration public static void Orthogonalize(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to orthogonalize. Matrix3x3 result When the method completes, contains the orthogonalized Matrix3x3. Remarks Orthogonalization is the process of making all rows orthogonal to each other. This means that any given row in the Matrix3x3 will be orthogonal to any other given row in the Matrix3x3. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthonormalize() Orthonormalizes the specified Matrix3x3. Declaration public void Orthonormalize() Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthonormalize(Matrix3x3) Orthonormalizes the specified Matrix3x3. Declaration public static Matrix3x3 Orthonormalize(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to orthonormalize. Returns Type Description Matrix3x3 The orthonormalized Matrix3x3. Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source Orthonormalize(ref Matrix3x3, out Matrix3x3) Orthonormalizes the specified Matrix3x3. Declaration public static void Orthonormalize(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to orthonormalize. Matrix3x3 result When the method completes, contains the orthonormalized Matrix3x3. Remarks Orthonormalization is the process of making all rows and columns orthogonal to each other and making all rows and columns of unit length. This means that any given row will be orthogonal to any other given row and any given column will be orthogonal to any other given column. Any given row will not be orthogonal to any given column. Every row and every column will be of unit length. Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3 tends to be numerically unstable. The numeric stability decreases according to the rows so that the first row is the most stable and the last row is the least stable. This operation is performed on the rows of the Matrix3x3 rather than the columns. If you wish for this operation to be performed on the columns, first transpose the input and than transpose the output. | Improve this Doc View Source RotationAxis(Vector3, Single) Creates a Matrix3x3 that rotates around an arbitrary axis. Declaration public static Matrix3x3 RotationAxis(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis around which to rotate. This parameter is assumed to be normalized. System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationAxis(ref Vector3, Single, out Matrix3x3) Creates a Matrix3x3 that rotates around an arbitrary axis. Declaration public static void RotationAxis(ref Vector3 axis, float angle, out Matrix3x3 result) Parameters Type Name Description Vector3 axis The axis around which to rotate. This parameter is assumed to be normalized. System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix3x3 result When the method completes, contains the created rotation Matrix3x3. | Improve this Doc View Source RotationQuaternion(Quaternion) Creates a rotation Matrix3x3 from a quaternion. Declaration public static Matrix3x3 RotationQuaternion(Quaternion rotation) Parameters Type Name Description Quaternion rotation The quaternion to use to build the Matrix3x3. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationQuaternion(ref Quaternion, out Matrix3x3) Creates a rotation Matrix3x3 from a quaternion. Declaration public static void RotationQuaternion(ref Quaternion rotation, out Matrix3x3 result) Parameters Type Name Description Quaternion rotation The quaternion to use to build the Matrix3x3. Matrix3x3 result The created rotation Matrix3x3. | Improve this Doc View Source RotationX(Single) Creates a Matrix3x3 that rotates around the x-axis. Declaration public static Matrix3x3 RotationX(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationX(Single, out Matrix3x3) Creates a Matrix3x3 that rotates around the x-axis. Declaration public static void RotationX(float angle, out Matrix3x3 result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix3x3 result When the method completes, contains the created rotation Matrix3x3. | Improve this Doc View Source RotationY(Single) Creates a Matrix3x3 that rotates around the y-axis. Declaration public static Matrix3x3 RotationY(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationY(Single, out Matrix3x3) Creates a Matrix3x3 that rotates around the y-axis. Declaration public static void RotationY(float angle, out Matrix3x3 result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix3x3 result When the method completes, contains the created rotation Matrix3x3. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single) Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll. Declaration public static Matrix3x3 RotationYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description System.Single yaw Yaw around the y-axis, in radians. System.Single pitch Pitch around the x-axis, in radians. System.Single roll Roll around the z-axis, in radians. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single, out Matrix3x3) Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll. Declaration public static void RotationYawPitchRoll(float yaw, float pitch, float roll, out Matrix3x3 result) Parameters Type Name Description System.Single yaw Yaw around the y-axis, in radians. System.Single pitch Pitch around the x-axis, in radians. System.Single roll Roll around the z-axis, in radians. Matrix3x3 result When the method completes, contains the created rotation Matrix3x3. | Improve this Doc View Source RotationZ(Single) Creates a Matrix3x3 that rotates around the z-axis. Declaration public static Matrix3x3 RotationZ(float angle) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description Matrix3x3 The created rotation Matrix3x3. | Improve this Doc View Source RotationZ(Single, out Matrix3x3) Creates a Matrix3x3 that rotates around the z-axis. Declaration public static void RotationZ(float angle, out Matrix3x3 result) Parameters Type Name Description System.Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Matrix3x3 result When the method completes, contains the created rotation Matrix3x3. | Improve this Doc View Source RowEchelonForm(Matrix3x3) Brings the Matrix3x3 into row echelon form using elementary row operations; Declaration public static Matrix3x3 RowEchelonForm(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into row echelon form. Returns Type Description Matrix3x3 When the method completes, contains the row echelon form of the Matrix3x3. | Improve this Doc View Source RowEchelonForm(ref Matrix3x3, out Matrix3x3) Brings the Matrix3x3 into row echelon form using elementary row operations; Declaration public static void RowEchelonForm(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into row echelon form. Matrix3x3 result When the method completes, contains the row echelon form of the Matrix3x3. | Improve this Doc View Source Scaling(Vector3) Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis. Declaration public static Matrix3x3 Scaling(Vector3 scale) Parameters Type Name Description Vector3 scale Scaling factor for all three axes. Returns Type Description Matrix3x3 The created scaling Matrix3x3. | Improve this Doc View Source Scaling(ref Vector3, out Matrix3x3) Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis. Declaration public static void Scaling(ref Vector3 scale, out Matrix3x3 result) Parameters Type Name Description Vector3 scale Scaling factor for all three axes. Matrix3x3 result When the method completes, contains the created scaling Matrix3x3. | Improve this Doc View Source Scaling(Single) Creates a Matrix3x3 that uniformly scales along all three axis. Declaration public static Matrix3x3 Scaling(float scale) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Returns Type Description Matrix3x3 The created scaling Matrix3x3. | Improve this Doc View Source Scaling(Single, out Matrix3x3) Creates a Matrix3x3 that uniformly scales along all three axis. Declaration public static void Scaling(float scale, out Matrix3x3 result) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Matrix3x3 result When the method completes, contains the created scaling Matrix3x3. | Improve this Doc View Source Scaling(Single, Single, Single) Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis. Declaration public static Matrix3x3 Scaling(float x, float y, float z) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. Returns Type Description Matrix3x3 The created scaling Matrix3x3. | Improve this Doc View Source Scaling(Single, Single, Single, out Matrix3x3) Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis. Declaration public static void Scaling(float x, float y, float z, out Matrix3x3 result) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. Matrix3x3 result When the method completes, contains the created scaling Matrix3x3. | Improve this Doc View Source SmoothStep(Matrix3x3, Matrix3x3, Single) Performs a cubic interpolation between two matrices. Declaration public static Matrix3x3 SmoothStep(Matrix3x3 start, Matrix3x3 end, float amount) Parameters Type Name Description Matrix3x3 start Start Matrix3x3. Matrix3x3 end End Matrix3x3. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix3x3 The cubic interpolation of the two matrices. | Improve this Doc View Source SmoothStep(ref Matrix3x3, ref Matrix3x3, Single, out Matrix3x3) Performs a cubic interpolation between two matrices. Declaration public static void SmoothStep(ref Matrix3x3 start, ref Matrix3x3 end, float amount, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 start Start Matrix3x3. Matrix3x3 end End Matrix3x3. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix3x3 result When the method completes, contains the cubic interpolation of the two matrices. | Improve this Doc View Source Subtract(Matrix3x3, Matrix3x3) Determines the difference between two matrices. Declaration public static Matrix3x3 Subtract(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to subtract. Matrix3x3 right The second Matrix3x3 to subtract. Returns Type Description Matrix3x3 The difference between the two matrices. | Improve this Doc View Source Subtract(ref Matrix3x3, ref Matrix3x3, out Matrix3x3) Determines the difference between two matrices. Declaration public static void Subtract(ref Matrix3x3 left, ref Matrix3x3 right, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to subtract. Matrix3x3 right The second Matrix3x3 to subtract. Matrix3x3 result When the method completes, contains the difference between the two matrices. | Improve this Doc View Source ToArray() Creates an array containing the elements of the Matrix3x3. Declaration public float[] ToArray() Returns Type Description System.Single [] A 9-element array containing the components of the Matrix3x3. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transpose() Transposes the Matrix3x3. Declaration public void Transpose() | Improve this Doc View Source Transpose(Matrix3x3) Calculates the transpose of the specified Matrix3x3. Declaration public static Matrix3x3 Transpose(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 whose transpose is to be calculated. Returns Type Description Matrix3x3 The transpose of the specified Matrix3x3. | Improve this Doc View Source Transpose(ref Matrix3x3, out Matrix3x3) Calculates the transpose of the specified Matrix3x3. Declaration public static void Transpose(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 whose transpose is to be calculated. Matrix3x3 result When the method completes, contains the transpose of the specified Matrix3x3. | Improve this Doc View Source TransposeByRef(ref Matrix3x3, ref Matrix3x3) Calculates the transpose of the specified Matrix3x3. Declaration public static void TransposeByRef(ref Matrix3x3 value, ref Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 whose transpose is to be calculated. Matrix3x3 result When the method completes, contains the transpose of the specified Matrix3x3. | Improve this Doc View Source UpperTriangularForm(Matrix3x3) Brings the Matrix3x3 into upper triangular form using elementary row operations. Declaration public static Matrix3x3 UpperTriangularForm(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into upper triangular form. Returns Type Description Matrix3x3 The upper triangular Matrix3x3. Remarks If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. | Improve this Doc View Source UpperTriangularForm(ref Matrix3x3, out Matrix3x3) Brings the Matrix3x3 into upper triangular form using elementary row operations. Declaration public static void UpperTriangularForm(ref Matrix3x3 value, out Matrix3x3 result) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to put into upper triangular form. Matrix3x3 result When the method completes, contains the upper triangular Matrix3x3. Remarks If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system of linear equations, than this often means that either no solution exists or an infinite number of solutions exist. Operators | Improve this Doc View Source Addition(Matrix3x3, Matrix3x3) Adds two matrices. Declaration public static Matrix3x3 operator +(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to add. Matrix3x3 right The second Matrix3x3 to add. Returns Type Description Matrix3x3 The sum of the two matrices. | Improve this Doc View Source Division(Matrix3x3, Matrix3x3) Divides two matrices. Declaration public static Matrix3x3 operator /(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to divide. Matrix3x3 right The second Matrix3x3 to divide. Returns Type Description Matrix3x3 The quotient of the two matrices. | Improve this Doc View Source Division(Matrix3x3, Single) Scales a Matrix3x3 by a given value. Declaration public static Matrix3x3 operator /(Matrix3x3 left, float right) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x3 The scaled Matrix3x3. | Improve this Doc View Source Equality(Matrix3x3, Matrix3x3) Tests for equality between two objects. Declaration public static bool operator ==(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first value to compare. Matrix3x3 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Matrix to Matrix3x3) Convert the 4x4 Matrix to a 3x3 Matrix. Declaration public static explicit operator Matrix3x3(Matrix Value) Parameters Type Name Description Matrix Value Returns Type Description Matrix3x3 A 3x3 Matrix | Improve this Doc View Source Explicit(Matrix3x3 to Matrix) Convert the 3x3 Matrix to a 4x4 Matrix. Declaration public static explicit operator Matrix(Matrix3x3 Value) Parameters Type Name Description Matrix3x3 Value Returns Type Description Matrix A 4x4 Matrix with zero translation and M44=1 | Improve this Doc View Source Inequality(Matrix3x3, Matrix3x3) Tests for inequality between two objects. Declaration public static bool operator !=(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first value to compare. Matrix3x3 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Matrix3x3, Matrix3x3) Multiplies two matrices. Declaration public static Matrix3x3 operator *(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to multiply. Matrix3x3 right The second Matrix3x3 to multiply. Returns Type Description Matrix3x3 The product of the two matrices. | Improve this Doc View Source Multiply(Matrix3x3, Single) Scales a Matrix3x3 by a given value. Declaration public static Matrix3x3 operator *(Matrix3x3 left, float right) Parameters Type Name Description Matrix3x3 left The Matrix3x3 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix3x3 The scaled Matrix3x3. | Improve this Doc View Source Multiply(Single, Matrix3x3) Scales a Matrix3x3 by a given value. Declaration public static Matrix3x3 operator *(float left, Matrix3x3 right) Parameters Type Name Description System.Single left The amount by which to scale. Matrix3x3 right The Matrix3x3 to scale. Returns Type Description Matrix3x3 The scaled Matrix3x3. | Improve this Doc View Source Subtraction(Matrix3x3, Matrix3x3) Subtracts two matrices. Declaration public static Matrix3x3 operator -(Matrix3x3 left, Matrix3x3 right) Parameters Type Name Description Matrix3x3 left The first Matrix3x3 to subtract. Matrix3x3 right The second Matrix3x3 to subtract. Returns Type Description Matrix3x3 The difference between the two matrices. | Improve this Doc View Source UnaryNegation(Matrix3x3) Negates a Matrix3x3. Declaration public static Matrix3x3 operator -(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to negate. Returns Type Description Matrix3x3 The negated Matrix3x3. | Improve this Doc View Source UnaryPlus(Matrix3x3) Assert a Matrix3x3 (return it unchanged). Declaration public static Matrix3x3 operator +(Matrix3x3 value) Parameters Type Name Description Matrix3x3 value The Matrix3x3 to assert (unchanged). Returns Type Description Matrix3x3 The asserted (unchanged) Matrix3x3. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Matrix5x4.html": {
    "href": "api/Fluint.Layer.Mathematics.Matrix5x4.html",
    "title": "Struct Matrix5x4 | Fluint",
    "keywords": "Struct Matrix5x4 Represents a 4x4 mathematical Matrix5x4. Implements IEquatable < Matrix5x4 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Matrix5x4 : IEquatable<Matrix5x4>, IFormattable Constructors | Improve this Doc View Source Matrix5x4(Single) Initializes a new instance of the Matrix5x4 struct. Declaration public Matrix5x4(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Matrix5x4(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the Matrix5x4 struct. Declaration public Matrix5x4(float M11, float M12, float M13, float M14, float M21, float M22, float M23, float M24, float M31, float M32, float M33, float M34, float M41, float M42, float M43, float M44, float M51, float M52, float M53, float M54) Parameters Type Name Description System.Single M11 The value to assign at row 1 column 1 of the Matrix5x4. System.Single M12 The value to assign at row 1 column 2 of the Matrix5x4. System.Single M13 The value to assign at row 1 column 3 of the Matrix5x4. System.Single M14 The value to assign at row 1 column 4 of the Matrix5x4. System.Single M21 The value to assign at row 2 column 1 of the Matrix5x4. System.Single M22 The value to assign at row 2 column 2 of the Matrix5x4. System.Single M23 The value to assign at row 2 column 3 of the Matrix5x4. System.Single M24 The value to assign at row 2 column 4 of the Matrix5x4. System.Single M31 The value to assign at row 3 column 1 of the Matrix5x4. System.Single M32 The value to assign at row 3 column 2 of the Matrix5x4. System.Single M33 The value to assign at row 3 column 3 of the Matrix5x4. System.Single M34 The value to assign at row 3 column 4 of the Matrix5x4. System.Single M41 The value to assign at row 4 column 1 of the Matrix5x4. System.Single M42 The value to assign at row 4 column 2 of the Matrix5x4. System.Single M43 The value to assign at row 4 column 3 of the Matrix5x4. System.Single M44 The value to assign at row 4 column 4 of the Matrix5x4. System.Single M51 The value to assign at row 5 column 1 of the Matrix5x4. System.Single M52 The value to assign at row 5 column 2 of the Matrix5x4. System.Single M53 The value to assign at row 5 column 3 of the Matrix5x4. System.Single M54 The value to assign at row 5 column 4 of the Matrix5x4. | Improve this Doc View Source Matrix5x4(Single[]) Initializes a new instance of the Matrix5x4 struct. Declaration public Matrix5x4(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the components of the Matrix5x4. This must be an array with sixteen elements. Fields | Improve this Doc View Source Identity The identity Matrix5x4 . Declaration public static readonly Matrix5x4 Identity Field Value Type Description Matrix5x4 | Improve this Doc View Source M11 Value at row 1 column 1 of the Matrix5x4. Declaration public float M11 Field Value Type Description System.Single | Improve this Doc View Source M12 Value at row 1 column 2 of the Matrix5x4. Declaration public float M12 Field Value Type Description System.Single | Improve this Doc View Source M13 Value at row 1 column 3 of the Matrix5x4. Declaration public float M13 Field Value Type Description System.Single | Improve this Doc View Source M14 Value at row 1 column 4 of the Matrix5x4. Declaration public float M14 Field Value Type Description System.Single | Improve this Doc View Source M21 Value at row 2 column 1 of the Matrix5x4. Declaration public float M21 Field Value Type Description System.Single | Improve this Doc View Source M22 Value at row 2 column 2 of the Matrix5x4. Declaration public float M22 Field Value Type Description System.Single | Improve this Doc View Source M23 Value at row 2 column 3 of the Matrix5x4. Declaration public float M23 Field Value Type Description System.Single | Improve this Doc View Source M24 Value at row 2 column 4 of the Matrix5x4. Declaration public float M24 Field Value Type Description System.Single | Improve this Doc View Source M31 Value at row 3 column 1 of the Matrix5x4. Declaration public float M31 Field Value Type Description System.Single | Improve this Doc View Source M32 Value at row 3 column 2 of the Matrix5x4. Declaration public float M32 Field Value Type Description System.Single | Improve this Doc View Source M33 Value at row 3 column 3 of the Matrix5x4. Declaration public float M33 Field Value Type Description System.Single | Improve this Doc View Source M34 Value at row 3 column 4 of the Matrix5x4. Declaration public float M34 Field Value Type Description System.Single | Improve this Doc View Source M41 Value at row 4 column 1 of the Matrix5x4. Declaration public float M41 Field Value Type Description System.Single | Improve this Doc View Source M42 Value at row 4 column 2 of the Matrix5x4. Declaration public float M42 Field Value Type Description System.Single | Improve this Doc View Source M43 Value at row 4 column 3 of the Matrix5x4. Declaration public float M43 Field Value Type Description System.Single | Improve this Doc View Source M44 Value at row 4 column 4 of the Matrix5x4. Declaration public float M44 Field Value Type Description System.Single | Improve this Doc View Source M51 Value at row 5 column 1 of the Matrix5x4. Declaration public float M51 Field Value Type Description System.Single | Improve this Doc View Source M52 Value at row 5 column 2 of the Matrix5x4. Declaration public float M52 Field Value Type Description System.Single | Improve this Doc View Source M53 Value at row 5 column 3 of the Matrix5x4. Declaration public float M53 Field Value Type Description System.Single | Improve this Doc View Source M54 Value at row 5 column 4 of the Matrix5x4. Declaration public float M54 Field Value Type Description System.Single | Improve this Doc View Source SizeInBytes The size of the Matrix5x4 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source Zero A Matrix5x4 with all of its components set to zero. Declaration public static readonly Matrix5x4 Zero Field Value Type Description Matrix5x4 Properties | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is an identity Matrix5x4. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean true if this instance is an identity Matrix5x4; otherwise, false . | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the component to access. Property Value Type Description System.Single The value of the Matrix5x4 component, depending on the index. | Improve this Doc View Source Item[Int32, Int32] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row The row of the Matrix5x4 to access. System.Int32 column The column of the Matrix5x4 to access. Property Value Type Description System.Single The value of the Matrix5x4 component, depending on the index. | Improve this Doc View Source Row1 Gets or sets the first row in the Matrix5x4; that is M11, M12, M13, and M14. Declaration public Vector4 Row1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row2 Gets or sets the second row in the Matrix5x4; that is M21, M22, M23, and M24. Declaration public Vector4 Row2 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row3 Gets or sets the third row in the Matrix5x4; that is M31, M32, M33, and M34. Declaration public Vector4 Row3 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row4 Gets or sets the fourth row in the Matrix5x4; that is M41, M42, M43, and M44. Declaration public Vector4 Row4 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row5 Gets or sets the fifth row in the Matrix5x4; that is M51, M52, M53, and M54. Declaration public Vector4 Row5 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source ScaleVector Gets or sets the scale of the Matrix5x4; that is M11, M22, and M33. Declaration public Vector4 ScaleVector { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source TranslationVector Gets or sets the translation of the Matrix5x4; that is M41, M42, and M43. Declaration public Vector4 TranslationVector { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Add(Matrix5x4, Matrix5x4) Determines the sum of two matrices. Declaration public static Matrix5x4 Add(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to add. Matrix5x4 right The second Matrix5x4 to add. Returns Type Description Matrix5x4 The sum of the two matrices. | Improve this Doc View Source Add(ref Matrix5x4, ref Matrix5x4, out Matrix5x4) Determines the sum of two matrices. Declaration public static void Add(ref Matrix5x4 left, ref Matrix5x4 right, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to add. Matrix5x4 right The second Matrix5x4 to add. Matrix5x4 result When the method completes, contains the sum of the two matrices. | Improve this Doc View Source Divide(ref Matrix5x4, Single, out Matrix5x4) Scales a Matrix5x4 by the given value. Declaration public static void Divide(ref Matrix5x4 left, float right, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 left The Matrix5x4 to scale. System.Single right The amount by which to scale. Matrix5x4 result When the method completes, contains the scaled Matrix5x4. | Improve this Doc View Source Equals(Matrix5x4) Determines whether the specified Matrix5x4 is equal to this instance. Declaration public bool Equals(Matrix5x4 other) Parameters Type Name Description Matrix5x4 other The Matrix5x4 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix5x4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Matrix5x4) Determines whether the specified Matrix5x4 is equal to this instance. Declaration public bool Equals(ref Matrix5x4 other) Parameters Type Name Description Matrix5x4 other The Matrix5x4 to compare with this instance. Returns Type Description System.Boolean true if the specified Matrix5x4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Lerp(Matrix5x4, Matrix5x4, Single) Performs a linear interpolation between two matrices. Declaration public static Matrix5x4 Lerp(Matrix5x4 start, Matrix5x4 end, float amount) Parameters Type Name Description Matrix5x4 start Start Matrix5x4. Matrix5x4 end End Matrix5x4. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix5x4 The linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Matrix5x4, ref Matrix5x4, Single, out Matrix5x4) Performs a linear interpolation between two matrices. Declaration public static void Lerp(ref Matrix5x4 start, ref Matrix5x4 end, float amount, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 start Start Matrix5x4. Matrix5x4 end End Matrix5x4. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix5x4 result When the method completes, contains the linear interpolation of the two matrices. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Multiply(ref Matrix5x4, Single, out Matrix5x4) Scales a Matrix5x4 by the given value. Declaration public static void Multiply(ref Matrix5x4 left, float right, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 left The Matrix5x4 to scale. System.Single right The amount by which to scale. Matrix5x4 result When the method completes, contains the scaled Matrix5x4. | Improve this Doc View Source Negate(Matrix5x4) Negates a Matrix5x4. Declaration public static Matrix5x4 Negate(Matrix5x4 value) Parameters Type Name Description Matrix5x4 value The Matrix5x4 to be negated. Returns Type Description Matrix5x4 The negated Matrix5x4. | Improve this Doc View Source Negate(ref Matrix5x4, out Matrix5x4) Negates a Matrix5x4. Declaration public static void Negate(ref Matrix5x4 value, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 value The Matrix5x4 to be negated. Matrix5x4 result When the method completes, contains the negated Matrix5x4. | Improve this Doc View Source Scaling(Vector4) Creates a Matrix5x4 that scales along the x-axis, y-axis, and y-axis. Declaration public static Matrix5x4 Scaling(Vector4 scale) Parameters Type Name Description Vector4 scale Scaling factor for all three axes. Returns Type Description Matrix5x4 The created scaling Matrix5x4. | Improve this Doc View Source Scaling(ref Vector4, out Matrix5x4) Creates a Matrix5x4 that scales along the x-axis, y-axis, y-axis and w-axis Declaration public static void Scaling(ref Vector4 scale, out Matrix5x4 result) Parameters Type Name Description Vector4 scale Scaling factor for all three axes. Matrix5x4 result When the method completes, contains the created scaling Matrix5x4. | Improve this Doc View Source Scaling(Single) Creates a Matrix5x4 that uniformly scales along all three axis. Declaration public static Matrix5x4 Scaling(float scale) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Returns Type Description Matrix5x4 The created scaling Matrix5x4. | Improve this Doc View Source Scaling(Single, out Matrix5x4) Creates a Matrix5x4 that uniformly scales along all three axis. Declaration public static void Scaling(float scale, out Matrix5x4 result) Parameters Type Name Description System.Single scale The uniform scale that is applied along all axis. Matrix5x4 result When the method completes, contains the created scaling Matrix5x4. | Improve this Doc View Source Scaling(Single, Single, Single, Single) Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis. Declaration public static Matrix5x4 Scaling(float x, float y, float z, float w) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. System.Single w Scaling factor that is applied along the w-axis. Returns Type Description Matrix5x4 The created scaling Matrix5x4. | Improve this Doc View Source Scaling(Single, Single, Single, Single, out Matrix5x4) Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis. Declaration public static void Scaling(float x, float y, float z, float w, out Matrix5x4 result) Parameters Type Name Description System.Single x Scaling factor that is applied along the x-axis. System.Single y Scaling factor that is applied along the y-axis. System.Single z Scaling factor that is applied along the z-axis. System.Single w Scaling factor that is applied along the w-axis. Matrix5x4 result When the method completes, contains the created scaling Matrix5x4. | Improve this Doc View Source SmoothStep(Matrix5x4, Matrix5x4, Single) Performs a cubic interpolation between two matrices. Declaration public static Matrix5x4 SmoothStep(Matrix5x4 start, Matrix5x4 end, float amount) Parameters Type Name Description Matrix5x4 start Start Matrix5x4. Matrix5x4 end End Matrix5x4. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Matrix5x4 The cubic interpolation of the two matrices. | Improve this Doc View Source SmoothStep(ref Matrix5x4, ref Matrix5x4, Single, out Matrix5x4) Performs a cubic interpolation between two matrices. Declaration public static void SmoothStep(ref Matrix5x4 start, ref Matrix5x4 end, float amount, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 start Start Matrix5x4. Matrix5x4 end End Matrix5x4. System.Single amount Value between 0 and 1 indicating the weight of end . Matrix5x4 result When the method completes, contains the cubic interpolation of the two matrices. | Improve this Doc View Source Subtract(Matrix5x4, Matrix5x4) Determines the difference between two matrices. Declaration public static Matrix5x4 Subtract(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to subtract. Matrix5x4 right The second Matrix5x4 to subtract. Returns Type Description Matrix5x4 The difference between the two matrices. | Improve this Doc View Source Subtract(ref Matrix5x4, ref Matrix5x4, out Matrix5x4) Determines the difference between two matrices. Declaration public static void Subtract(ref Matrix5x4 left, ref Matrix5x4 right, out Matrix5x4 result) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to subtract. Matrix5x4 right The second Matrix5x4 to subtract. Matrix5x4 result When the method completes, contains the difference between the two matrices. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Translation(Vector4) Creates a translation Matrix5x4 using the specified offsets. Declaration public static Matrix5x4 Translation(Vector4 value) Parameters Type Name Description Vector4 value The offset for all three coordinate planes. Returns Type Description Matrix5x4 The created translation Matrix5x4. | Improve this Doc View Source Translation(ref Vector4, out Matrix5x4) Creates a translation Matrix5x4 using the specified offsets. Declaration public static void Translation(ref Vector4 value, out Matrix5x4 result) Parameters Type Name Description Vector4 value The offset for all three coordinate planes. Matrix5x4 result When the method completes, contains the created translation Matrix5x4. | Improve this Doc View Source Translation(Single, Single, Single, Single) Creates a translation Matrix5x4 using the specified offsets. Declaration public static Matrix5x4 Translation(float x, float y, float z, float w) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. System.Single z Z-coordinate offset. System.Single w W-coordinate offset. Returns Type Description Matrix5x4 The created translation Matrix5x4. | Improve this Doc View Source Translation(Single, Single, Single, Single, out Matrix5x4) Creates a translation Matrix5x4 using the specified offsets. Declaration public static void Translation(float x, float y, float z, float w, out Matrix5x4 result) Parameters Type Name Description System.Single x X-coordinate offset. System.Single y Y-coordinate offset. System.Single z Z-coordinate offset. System.Single w W-coordinate offset. Matrix5x4 result When the method completes, contains the created translation Matrix5x4. Operators | Improve this Doc View Source Addition(Matrix5x4, Matrix5x4) Adds two matrices. Declaration public static Matrix5x4 operator +(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to add. Matrix5x4 right The second Matrix5x4 to add. Returns Type Description Matrix5x4 The sum of the two matrices. | Improve this Doc View Source Division(Matrix5x4, Single) Scales a Matrix5x4 by a given value. Declaration public static Matrix5x4 operator /(Matrix5x4 left, float right) Parameters Type Name Description Matrix5x4 left The Matrix5x4 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix5x4 The scaled Matrix5x4. | Improve this Doc View Source Equality(Matrix5x4, Matrix5x4) Tests for equality between two objects. Declaration public static bool operator ==(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first value to compare. Matrix5x4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(Matrix5x4, Matrix5x4) Tests for inequality between two objects. Declaration public static bool operator !=(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first value to compare. Matrix5x4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Matrix5x4, Single) Scales a Matrix5x4 by a given value. Declaration public static Matrix5x4 operator *(Matrix5x4 left, float right) Parameters Type Name Description Matrix5x4 left The Matrix5x4 to scale. System.Single right The amount by which to scale. Returns Type Description Matrix5x4 The scaled Matrix5x4. | Improve this Doc View Source Multiply(Single, Matrix5x4) Scales a Matrix5x4 by a given value. Declaration public static Matrix5x4 operator *(float left, Matrix5x4 right) Parameters Type Name Description System.Single left The amount by which to scale. Matrix5x4 right The Matrix5x4 to scale. Returns Type Description Matrix5x4 The scaled Matrix5x4. | Improve this Doc View Source Subtraction(Matrix5x4, Matrix5x4) Subtracts two matrices. Declaration public static Matrix5x4 operator -(Matrix5x4 left, Matrix5x4 right) Parameters Type Name Description Matrix5x4 left The first Matrix5x4 to subtract. Matrix5x4 right The second Matrix5x4 to subtract. Returns Type Description Matrix5x4 The difference between the two matrices. | Improve this Doc View Source UnaryNegation(Matrix5x4) Negates a Matrix5x4. Declaration public static Matrix5x4 operator -(Matrix5x4 value) Parameters Type Name Description Matrix5x4 value The Matrix5x4 to negate. Returns Type Description Matrix5x4 The negated Matrix5x4. | Improve this Doc View Source UnaryPlus(Matrix5x4) Assert a Matrix5x4 (return it unchanged). Declaration public static Matrix5x4 operator +(Matrix5x4 value) Parameters Type Name Description Matrix5x4 value The Matrix5x4 to assert (unchanged). Returns Type Description Matrix5x4 The asserted (unchanged) Matrix5x4. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.OrientedBoundingBox.html": {
    "href": "api/Fluint.Layer.Mathematics.OrientedBoundingBox.html",
    "title": "Struct OrientedBoundingBox | Fluint",
    "keywords": "Struct OrientedBoundingBox OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation. Implements IEquatable < OrientedBoundingBox > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct OrientedBoundingBox : IEquatable<OrientedBoundingBox>, IFormattable Constructors | Improve this Doc View Source OrientedBoundingBox(BoundingBox) Creates an OrientedBoundingBox from a BoundingBox. Declaration public OrientedBoundingBox(BoundingBox bb) Parameters Type Name Description BoundingBox bb The BoundingBox to create from. Remarks Initially, the OBB is axis-aligned box, but it can be rotated and transformed later. | Improve this Doc View Source OrientedBoundingBox(Vector3, Vector3) Creates an OrientedBoundingBox which contained between two minimum and maximum points. Declaration public OrientedBoundingBox(Vector3 minimum, Vector3 maximum) Parameters Type Name Description Vector3 minimum The minimum vertex of the bounding box. Vector3 maximum The maximum vertex of the bounding box. Remarks Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later. | Improve this Doc View Source OrientedBoundingBox(Vector3[]) Creates an OrientedBoundingBox that fully contains the given points. Declaration public OrientedBoundingBox(Vector3[] points) Parameters Type Name Description Vector3 [] points The points that will be contained by the box. Remarks This method is not for computing the best tight-fitting OrientedBoundingBox. And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later. Fields | Improve this Doc View Source Extents Half lengths of the box along each axis. Declaration public Vector3 Extents Field Value Type Description Vector3 | Improve this Doc View Source Transformation The matrix which aligns and scales the box, and its translation vector represents the center of the box. Declaration public Matrix Transformation Field Value Type Description Matrix Properties | Improve this Doc View Source Center Returns the center of the OrientedBoundingBox . Declaration public Vector3 Center { get; } Property Value Type Description Vector3 | Improve this Doc View Source Size The size of the OrientedBoundingBox if no scaling is applied to the transformation matrix. Declaration public Vector3 Size { get; } Property Value Type Description Vector3 Remarks The property will return the actual size even if the scaling is applied using Scale method, but if the scaling is applied to transformation matrix, use GetSize Function instead. Methods | Improve this Doc View Source Add(ref OrientedBoundingBox, Boolean) Merge another OrientedBoundingBox into this OrientedBoundingBox. Declaration public void Add(ref OrientedBoundingBox OBB, bool NoMatrixScaleApplied = false) Parameters Type Name Description OrientedBoundingBox OBB The other OrientedBoundingBox to merge into this OrientedBoundingBox. System.Boolean NoMatrixScaleApplied If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox. | Improve this Doc View Source Contains(ref BoundingBox) Check the intersection between an OrientedBoundingBox and BoundingBox Declaration public ContainmentType Contains(ref BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test. Returns Type Description ContainmentType The type of containment the two objects have. Remarks For accuracy, The transformation matrix for the OrientedBoundingBox must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate. | Improve this Doc View Source Contains(BoundingSphere, Boolean) Determines whether a OrientedBoundingBox contains a BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sphere, bool IgnoreScale = false) Parameters Type Name Description BoundingSphere sphere The sphere to test. System.Boolean IgnoreScale Optimize the check operation by assuming that OrientedBoundingBox has no scaling applied Returns Type Description ContainmentType The type of containment the two objects have. Remarks This method is not designed for OrientedBoundingBox which has a non-uniform scaling applied to its transformation matrix. But any type of scaling applied using Scale method will keep this method accurate. | Improve this Doc View Source Contains(ref OrientedBoundingBox) Check the intersection between two OrientedBoundingBox Declaration public ContainmentType Contains(ref OrientedBoundingBox obb) Parameters Type Name Description OrientedBoundingBox obb The OrientedBoundingBoxs to test. Returns Type Description ContainmentType The type of containment the two objects have. Remarks For accuracy, The transformation matrix for both OrientedBoundingBox must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate. | Improve this Doc View Source Contains(Vector3) Determines whether a OrientedBoundingBox contains a point. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(ref Vector3) Determines whether a OrientedBoundingBox contains a point. Declaration public ContainmentType Contains(ref Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description ContainmentType The type of containment the two objects have. | Improve this Doc View Source Contains(Vector3[]) Determines whether a OrientedBoundingBox contains an array of points>. Declaration public ContainmentType Contains(Vector3[] points) Parameters Type Name Description Vector3 [] points The points array to test. Returns Type Description ContainmentType The type of containment. | Improve this Doc View Source ContainsLine(ref Vector3, ref Vector3) Check the intersection between an OrientedBoundingBox and a line defined by two points Declaration public ContainmentType ContainsLine(ref Vector3 L1, ref Vector3 L2) Parameters Type Name Description Vector3 L1 The first point in the line. Vector3 L2 The second point in the line. Returns Type Description ContainmentType The type of containment the two objects have. Remarks For accuracy, The transformation matrix for the OrientedBoundingBox must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate. | Improve this Doc View Source Equals(OrientedBoundingBox) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(OrientedBoundingBox value) Parameters Type Name Description OrientedBoundingBox value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref OrientedBoundingBox) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref OrientedBoundingBox value) Parameters Type Name Description OrientedBoundingBox value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetBoundingBox() Get the axis-aligned BoundingBox which contains all OrientedBoundingBox corners. Declaration public BoundingBox GetBoundingBox() Returns Type Description BoundingBox The axis-aligned BoundingBox of this OrientedBoundingBox. | Improve this Doc View Source GetBoxToBoxMatrix(ref OrientedBoundingBox, ref OrientedBoundingBox, Boolean) Calculates the matrix required to transfer any point from one OrientedBoundingBox local coordinates to another. Declaration public static Matrix GetBoxToBoxMatrix(ref OrientedBoundingBox A, ref OrientedBoundingBox B, bool NoMatrixScaleApplied = false) Parameters Type Name Description OrientedBoundingBox A The source OrientedBoundingBox. OrientedBoundingBox B The target OrientedBoundingBox. System.Boolean NoMatrixScaleApplied If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox. Returns Type Description Matrix | Improve this Doc View Source GetCorners() Retrieves the eight corners of the bounding box. Declaration public Vector3[] GetCorners() Returns Type Description Vector3 [] An array of points representing the eight corners of the bounding box. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source GetSize() Returns the size of the OrientedBoundingBox taking into consideration the scaling applied to the transformation matrix. Declaration public Vector3 GetSize() Returns Type Description Vector3 The size of the consideration Remarks This method is computationally expensive, so if no scale is applied to the transformation matrix use Size property instead. | Improve this Doc View Source GetSizeSquared() Returns the square size of the OrientedBoundingBox taking into consideration the scaling applied to the transformation matrix. Declaration public Vector3 GetSizeSquared() Returns Type Description Vector3 The size of the consideration | Improve this Doc View Source Intersects(ref Ray) Determines whether there is an intersection between a Ray and a OrientedBoundingBox . Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Vector3) Determines whether there is an intersection between a Ray and a OrientedBoundingBox . Declaration public bool Intersects(ref Ray ray, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Merge(ref OrientedBoundingBox, ref OrientedBoundingBox, Boolean) Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation. Declaration public static void Merge(ref OrientedBoundingBox A, ref OrientedBoundingBox B, bool NoMatrixScaleApplied = false) Parameters Type Name Description OrientedBoundingBox A The OrientedBoundingBox to merge into it. OrientedBoundingBox B The OrientedBoundingBox to be merged System.Boolean NoMatrixScaleApplied If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox. Remarks Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it. | Improve this Doc View Source MergeInto(ref OrientedBoundingBox, Boolean) Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation. Declaration public void MergeInto(ref OrientedBoundingBox OBB, bool NoMatrixScaleApplied = false) Parameters Type Name Description OrientedBoundingBox OBB The other OrientedBoundingBox to merge into. System.Boolean NoMatrixScaleApplied If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox. | Improve this Doc View Source Scale(Vector3) Scales the OrientedBoundingBox by scaling its Extents without affecting the Transformation matrix, By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate. Declaration public void Scale(Vector3 scaling) Parameters Type Name Description Vector3 scaling | Improve this Doc View Source Scale(ref Vector3) Scales the OrientedBoundingBox by scaling its Extents without affecting the Transformation matrix, By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate. Declaration public void Scale(ref Vector3 scaling) Parameters Type Name Description Vector3 scaling | Improve this Doc View Source Scale(Single) Scales the OrientedBoundingBox by scaling its Extents without affecting the Transformation matrix, By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate. Declaration public void Scale(float scaling) Parameters Type Name Description System.Single scaling | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transform(Matrix) Transforms this box using a transformation matrix. Declaration public void Transform(Matrix mat) Parameters Type Name Description Matrix mat The transformation matrix. Remarks While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy. | Improve this Doc View Source Transform(ref Matrix) Transforms this box using a transformation matrix. Declaration public void Transform(ref Matrix mat) Parameters Type Name Description Matrix mat The transformation matrix. Remarks While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy. | Improve this Doc View Source Translate(Vector3) Translates the OrientedBoundingBox to a new position using a translation vector; Declaration public void Translate(Vector3 translation) Parameters Type Name Description Vector3 translation the translation vector. | Improve this Doc View Source Translate(ref Vector3) Translates the OrientedBoundingBox to a new position using a translation vector; Declaration public void Translate(ref Vector3 translation) Parameters Type Name Description Vector3 translation the translation vector. Operators | Improve this Doc View Source Equality(OrientedBoundingBox, OrientedBoundingBox) Tests for equality between two objects. Declaration public static bool operator ==(OrientedBoundingBox left, OrientedBoundingBox right) Parameters Type Name Description OrientedBoundingBox left The first value to compare. OrientedBoundingBox right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(OrientedBoundingBox, OrientedBoundingBox) Tests for inequality between two objects. Declaration public static bool operator !=(OrientedBoundingBox left, OrientedBoundingBox right) Parameters Type Name Description OrientedBoundingBox left The first value to compare. OrientedBoundingBox right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Plane.html": {
    "href": "api/Fluint.Layer.Mathematics.Plane.html",
    "title": "Struct Plane | Fluint",
    "keywords": "Struct Plane Represents a plane in three dimensional space. Implements IEquatable < Plane > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Plane : IEquatable<Plane>, IFormattable Constructors | Improve this Doc View Source Plane(Vector3, Vector3) Initializes a new instance of the DXPlayground.Mathematics.Plane class. Declaration public Plane(Vector3 point, Vector3 normal) Parameters Type Name Description Vector3 point Any point that lies along the plane. Vector3 normal The normal vector to the plane. | Improve this Doc View Source Plane(Vector3, Vector3, Vector3) Initializes a new instance of the Plane struct. Declaration public Plane(Vector3 point1, Vector3 point2, Vector3 point3) Parameters Type Name Description Vector3 point1 First point of a triangle defining the plane. Vector3 point2 Second point of a triangle defining the plane. Vector3 point3 Third point of a triangle defining the plane. | Improve this Doc View Source Plane(Vector3, Single) Initializes a new instance of the Plane struct. Declaration public Plane(Vector3 value, float d) Parameters Type Name Description Vector3 value The normal of the plane. System.Single d The distance of the plane along its normal from the origin | Improve this Doc View Source Plane(Single) Initializes a new instance of the Plane struct. Declaration public Plane(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Plane(Single, Single, Single, Single) Initializes a new instance of the Plane struct. Declaration public Plane(float a, float b, float c, float d) Parameters Type Name Description System.Single a The X component of the normal. System.Single b The Y component of the normal. System.Single c The Z component of the normal. System.Single d The distance of the plane along its normal from the origin. | Improve this Doc View Source Plane(Single[]) Initializes a new instance of the Plane struct. Declaration public Plane(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements. Fields | Improve this Doc View Source D The distance of the plane along its normal from the origin. Declaration public float D Field Value Type Description System.Single | Improve this Doc View Source Normal The normal vector of the plane. Declaration public Vector3 Normal Field Value Type Description Vector3 Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component. Property Value Type Description System.Single The value of the A, B, C, or D component, depending on the index. Methods | Improve this Doc View Source Dot(Plane, Vector4) Calculates the dot product of the specified vector and plane. Declaration public static float Dot(Plane left, Vector4 right) Parameters Type Name Description Plane left The source plane. Vector4 right The source vector. Returns Type Description System.Single The dot product of the specified plane and vector. | Improve this Doc View Source Dot(ref Plane, ref Vector4, out Single) Calculates the dot product of the specified vector and plane. Declaration public static void Dot(ref Plane left, ref Vector4 right, out float result) Parameters Type Name Description Plane left The source plane. Vector4 right The source vector. System.Single result When the method completes, contains the dot product of the specified plane and vector. | Improve this Doc View Source DotCoordinate(Plane, Vector3) Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane. Declaration public static float DotCoordinate(Plane left, Vector3 right) Parameters Type Name Description Plane left The source plane. Vector3 right The source vector. Returns Type Description System.Single The dot product of a specified vector and the normal of the Plane plus the distance value of the plane. | Improve this Doc View Source DotCoordinate(ref Plane, ref Vector3, out Single) Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane. Declaration public static void DotCoordinate(ref Plane left, ref Vector3 right, out float result) Parameters Type Name Description Plane left The source plane. Vector3 right The source vector. System.Single result When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane. | Improve this Doc View Source DotNormal(Plane, Vector3) Calculates the dot product of the specified vector and the normal of the plane. Declaration public static float DotNormal(Plane left, Vector3 right) Parameters Type Name Description Plane left The source plane. Vector3 right The source vector. Returns Type Description System.Single The dot product of the specified vector and the normal of the plane. | Improve this Doc View Source DotNormal(ref Plane, ref Vector3, out Single) Calculates the dot product of the specified vector and the normal of the plane. Declaration public static void DotNormal(ref Plane left, ref Vector3 right, out float result) Parameters Type Name Description Plane left The source plane. Vector3 right The source vector. System.Single result When the method completes, contains the dot product of the specified vector and the normal of the plane. | Improve this Doc View Source Equals(Plane) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(Plane value) Parameters Type Name Description Plane value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Plane) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref Plane value) Parameters Type Name Description Plane value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Intersects(ref BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public PlaneIntersectionType Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public PlaneIntersectionType Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane) Determines if there is an intersection between the current object and a Plane . Declaration public bool Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane, out Ray) Determines if there is an intersection between the current object and a Plane . Declaration public bool Intersects(ref Plane plane, out Ray line) Parameters Type Name Description Plane plane The plane to test. Ray line When the method completes, contains the line of intersection as a Ray , or a zero ray if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Vector3) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Single) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out float distance) Parameters Type Name Description Ray ray The ray to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3) Determines if there is an intersection between the current object and a point. Declaration public PlaneIntersectionType Intersects(ref Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3, ref Vector3, ref Vector3) Determines if there is an intersection between the current object and a triangle. Declaration public PlaneIntersectionType Intersects(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description PlaneIntersectionType Whether the two objects intersected. | Improve this Doc View Source Multiply(Plane, Single) Scales the plane by the given scaling factor. Declaration public static Plane Multiply(Plane value, float scale) Parameters Type Name Description Plane value The plane to scale. System.Single scale The amount by which to scale the plane. Returns Type Description Plane The scaled plane. | Improve this Doc View Source Multiply(ref Plane, Single, out Plane) Scales the plane by the given scaling factor. Declaration public static void Multiply(ref Plane value, float scale, out Plane result) Parameters Type Name Description Plane value The plane to scale. System.Single scale The amount by which to scale the plane. Plane result When the method completes, contains the scaled plane. | Improve this Doc View Source Normalize() Changes the coefficients of the normal vector of the plane to make it of unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Plane) Changes the coefficients of the normal vector of the plane to make it of unit length. Declaration public static Plane Normalize(Plane plane) Parameters Type Name Description Plane plane The source plane. Returns Type Description Plane The normalized plane. | Improve this Doc View Source Normalize(ref Plane, out Plane) Changes the coefficients of the normal vector of the plane to make it of unit length. Declaration public static void Normalize(ref Plane plane, out Plane result) Parameters Type Name Description Plane plane The source plane. Plane result When the method completes, contains the normalized plane. | Improve this Doc View Source Reflection() Builds a matrix that can be used to reflect vectors about a plane. Declaration public Matrix Reflection() Returns Type Description Matrix The reflection matrix. | Improve this Doc View Source Reflection(out Matrix) Builds a matrix that can be used to reflect vectors about a plane. Declaration public void Reflection(out Matrix result) Parameters Type Name Description Matrix result When the method completes, contains the reflection matrix. | Improve this Doc View Source Reflection(out Matrix3x3) Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs. This plane is assumed to be normalized Declaration public void Reflection(out Matrix3x3 result) Parameters Type Name Description Matrix3x3 result When the method completes, contains the reflection Matrix3x3. | Improve this Doc View Source Reflection3x3() Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs. This plane is assumed to be normalized Declaration public Matrix3x3 Reflection3x3() Returns Type Description Matrix3x3 The reflection Matrix3x3. | Improve this Doc View Source Shadow(Vector4) Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a shadow. This plane is assumed to be normalized Declaration public Matrix Shadow(Vector4 light) Parameters Type Name Description Vector4 light The light direction. If the W component is 0, the light is directional light; if the W component is 1, the light is a point light. Returns Type Description Matrix The shadow matrix. | Improve this Doc View Source Shadow(Vector4, Plane) Creates a Matrix3x3 that flattens geometry into a shadow. Declaration public static Matrix3x3 Shadow(Vector4 light, Plane plane) Parameters Type Name Description Vector4 light The light direction. If the W component is 0, the light is directional light; if the W component is 1, the light is a point light. Plane plane The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized. Returns Type Description Matrix3x3 The shadow Matrix3x3. | Improve this Doc View Source Shadow(ref Vector4, out Matrix) Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a shadow. This plane is assumed to be normalized Declaration public void Shadow(ref Vector4 light, out Matrix result) Parameters Type Name Description Vector4 light The light direction. If the W component is 0, the light is directional light; if the W component is 1, the light is a point light. Matrix result When the method completes, contains the shadow matrix. | Improve this Doc View Source Shadow(ref Vector4, ref Plane, out Matrix3x3) Creates a Matrix3x3 that flattens geometry into a shadow. Declaration public static void Shadow(ref Vector4 light, ref Plane plane, out Matrix3x3 result) Parameters Type Name Description Vector4 light The light direction. If the W component is 0, the light is directional light; if the W component is 1, the light is a point light. Plane plane The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized. Matrix3x3 result When the method completes, contains the shadow Matrix3x3. | Improve this Doc View Source ToArray() Creates an array containing the elements of the plane. Declaration public float[] ToArray() Returns Type Description System.Single [] A four-element array containing the components of the plane. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transform(Plane, Matrix) Transforms a normalized plane by a matrix. Declaration public static Plane Transform(Plane plane, Matrix transformation) Parameters Type Name Description Plane plane The normalized source plane. Matrix transformation The transformation matrix. Returns Type Description Plane When the method completes, contains the transformed plane. | Improve this Doc View Source Transform(Plane, Quaternion) Transforms a normalized plane by a quaternion rotation. Declaration public static Plane Transform(Plane plane, Quaternion rotation) Parameters Type Name Description Plane plane The normalized source plane. Quaternion rotation The quaternion rotation. Returns Type Description Plane The transformed plane. | Improve this Doc View Source Transform(ref Plane, ref Matrix, out Plane) Transforms a normalized plane by a matrix. Declaration public static void Transform(ref Plane plane, ref Matrix transformation, out Plane result) Parameters Type Name Description Plane plane The normalized source plane. Matrix transformation The transformation matrix. Plane result When the method completes, contains the transformed plane. | Improve this Doc View Source Transform(ref Plane, ref Quaternion, out Plane) Transforms a normalized plane by a quaternion rotation. Declaration public static void Transform(ref Plane plane, ref Quaternion rotation, out Plane result) Parameters Type Name Description Plane plane The normalized source plane. Quaternion rotation The quaternion rotation. Plane result When the method completes, contains the transformed plane. | Improve this Doc View Source Transform(Plane[], ref Matrix) Transforms an array of normalized planes by a matrix. Declaration public static void Transform(Plane[] planes, ref Matrix transformation) Parameters Type Name Description Plane [] planes The array of normalized planes to transform. Matrix transformation The transformation matrix. | Improve this Doc View Source Transform(Plane[], ref Quaternion) Transforms an array of normalized planes by a quaternion rotation. Declaration public static void Transform(Plane[] planes, ref Quaternion rotation) Parameters Type Name Description Plane [] planes The array of normalized planes to transform. Quaternion rotation The quaternion rotation. Operators | Improve this Doc View Source Equality(Plane, Plane) Tests for equality between two objects. Declaration public static bool operator ==(Plane left, Plane right) Parameters Type Name Description Plane left The first value to compare. Plane right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(Plane, Plane) Tests for inequality between two objects. Declaration public static bool operator !=(Plane left, Plane right) Parameters Type Name Description Plane left The first value to compare. Plane right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Plane, Single) Scales a plane by the given value. Declaration public static Plane operator *(Plane plane, float scale) Parameters Type Name Description Plane plane The plane to scale. System.Single scale The amount by which to scale the plane. Returns Type Description Plane The scaled plane. | Improve this Doc View Source Multiply(Single, Plane) Scales a plane by the given value. Declaration public static Plane operator *(float scale, Plane plane) Parameters Type Name Description System.Single scale The amount by which to scale the plane. Plane plane The plane to scale. Returns Type Description Plane The scaled plane. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.PlaneIntersectionType.html": {
    "href": "api/Fluint.Layer.Mathematics.PlaneIntersectionType.html",
    "title": "Enum PlaneIntersectionType | Fluint",
    "keywords": "Enum PlaneIntersectionType Describes the result of an intersection with a plane in three dimensions. Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public enum PlaneIntersectionType : int Fields Name Description Back The object is behind the plane. Front The object is in front of the plane. Intersecting The object is intersecting the plane."
  },
  "api/Fluint.Layer.Mathematics.Point.html": {
    "href": "api/Fluint.Layer.Mathematics.Point.html",
    "title": "Struct Point | Fluint",
    "keywords": "Struct Point Structure using the same layout than . Implements IEquatable < Point > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Point : IEquatable<Point> Constructors | Improve this Doc View Source Point(Int32, Int32) Initializes a new instance of the Point struct. Declaration public Point(int x, int y) Parameters Type Name Description System.Int32 x The x. System.Int32 y The y. Fields | Improve this Doc View Source X Left coordinate. Declaration public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y Top coordinate. Declaration public int Y Field Value Type Description System.Int32 | Improve this Doc View Source Zero A point with (0,0) coordinates. Declaration public static readonly Point Zero Field Value Type Description Point Methods | Improve this Doc View Source Equals(Point) Determines whether the specified is equal to this instance. Declaration public bool Equals(Point other) Parameters Type Name Description Point other The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Point) Determines whether the specified is equal to this instance. Declaration public bool Equals(ref Point other) Parameters Type Name Description Point other The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Equality(Point, Point) Implements the operator ==. Declaration public static bool operator ==(Point left, Point right) Parameters Type Name Description Point left The left. Point right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Explicit(Vector2 to Point) Performs an explicit conversion from Vector2 to Point . Declaration public static explicit operator Point(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Point The result of the conversion. | Improve this Doc View Source Implicit(Point to Vector2) Performs an implicit conversion from Point to Vector2 . Declaration public static implicit operator Vector2(Point value) Parameters Type Name Description Point value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Inequality(Point, Point) Implements the operator !=. Declaration public static bool operator !=(Point left, Point right) Parameters Type Name Description Point left The left. Point right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.Quaternion.html": {
    "href": "api/Fluint.Layer.Mathematics.Quaternion.html",
    "title": "Struct Quaternion | Fluint",
    "keywords": "Struct Quaternion Represents a four dimensional mathematical quaternion. Implements IEquatable < Quaternion > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Quaternion : IEquatable<Quaternion>, IFormattable Constructors | Improve this Doc View Source Quaternion(Vector2, Single, Single) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(Vector2 value, float z, float w) Parameters Type Name Description Vector2 value A vector containing the values with which to initialize the X and Y components. System.Single z Initial value for the Z component of the quaternion. System.Single w Initial value for the W component of the quaternion. | Improve this Doc View Source Quaternion(Vector3, Single) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(Vector3 value, float w) Parameters Type Name Description Vector3 value A vector containing the values with which to initialize the X, Y, and Z components. System.Single w Initial value for the W component of the quaternion. | Improve this Doc View Source Quaternion(Vector4) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(Vector4 value) Parameters Type Name Description Vector4 value A vector containing the values with which to initialize the components. | Improve this Doc View Source Quaternion(Single) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Quaternion(Single, Single, Single, Single) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(float x, float y, float z, float w) Parameters Type Name Description System.Single x Initial value for the X component of the quaternion. System.Single y Initial value for the Y component of the quaternion. System.Single z Initial value for the Z component of the quaternion. System.Single w Initial value for the W component of the quaternion. | Improve this Doc View Source Quaternion(Single[]) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements. Fields | Improve this Doc View Source Identity The identity Quaternion (0, 0, 0, 1). Declaration public static readonly Quaternion Identity Field Value Type Description Quaternion | Improve this Doc View Source One A Quaternion with all of its components set to one. Declaration public static readonly Quaternion One Field Value Type Description Quaternion | Improve this Doc View Source SizeInBytes The size of the Quaternion type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source W The W component of the quaternion. Declaration public float W Field Value Type Description System.Single | Improve this Doc View Source X The X component of the quaternion. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the quaternion. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The Z component of the quaternion. Declaration public float Z Field Value Type Description System.Single | Improve this Doc View Source Zero A Quaternion with all of its components set to zero. Declaration public static readonly Quaternion Zero Field Value Type Description Quaternion Properties | Improve this Doc View Source Angle Gets the angle of the quaternion. Declaration public float Angle { get; } Property Value Type Description System.Single The quaternion's angle. | Improve this Doc View Source Axis Gets the axis components of the quaternion. Declaration public Vector3 Axis { get; } Property Value Type Description Vector3 The axis components of the quaternion. | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is equivalent to the identity quaternion. Declaration public bool IsIdentity { get; } Property Value Type Description System.Boolean true if this instance is an identity quaternion; otherwise, false . | Improve this Doc View Source IsNormalized Gets a value indicting whether this instance is normalized. Declaration public bool IsNormalized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description System.Single The value of the X, Y, Z, or W component, depending on the index. Methods | Improve this Doc View Source Add(Quaternion, Quaternion) Adds two quaternions. Declaration public static Quaternion Add(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to add. Quaternion right The second quaternion to add. Returns Type Description Quaternion The sum of the two quaternions. | Improve this Doc View Source Add(ref Quaternion, ref Quaternion, out Quaternion) Adds two quaternions. Declaration public static void Add(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first quaternion to add. Quaternion right The second quaternion to add. Quaternion result When the method completes, contains the sum of the two quaternions. | Improve this Doc View Source Barycentric(Quaternion, Quaternion, Quaternion, Single, Single) Returns a Quaternion containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle. Declaration public static Quaternion Barycentric(Quaternion value1, Quaternion value2, Quaternion value3, float amount1, float amount2) Parameters Type Name Description Quaternion value1 A Quaternion containing the 4D Cartesian coordinates of vertex 1 of the triangle. Quaternion value2 A Quaternion containing the 4D Cartesian coordinates of vertex 2 of the triangle. Quaternion value3 A Quaternion containing the 4D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Returns Type Description Quaternion A new Quaternion containing the 4D Cartesian coordinates of the specified point. | Improve this Doc View Source Barycentric(ref Quaternion, ref Quaternion, ref Quaternion, Single, Single, out Quaternion) Returns a Quaternion containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle. Declaration public static void Barycentric(ref Quaternion value1, ref Quaternion value2, ref Quaternion value3, float amount1, float amount2, out Quaternion result) Parameters Type Name Description Quaternion value1 A Quaternion containing the 4D Cartesian coordinates of vertex 1 of the triangle. Quaternion value2 A Quaternion containing the 4D Cartesian coordinates of vertex 2 of the triangle. Quaternion value3 A Quaternion containing the 4D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Quaternion result When the method completes, contains a new Quaternion containing the 4D Cartesian coordinates of the specified point. | Improve this Doc View Source BillboardLH(Vector3, Vector3, Vector3, Vector3) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static Quaternion BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Quaternion The created billboard quaternion. | Improve this Doc View Source BillboardLH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Quaternion) Creates a left-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardLH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Quaternion result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Quaternion result When the method completes, contains the created billboard quaternion. | Improve this Doc View Source BillboardRH(Vector3, Vector3, Vector3, Vector3) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static Quaternion BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Returns Type Description Quaternion The created billboard quaternion. | Improve this Doc View Source BillboardRH(ref Vector3, ref Vector3, ref Vector3, ref Vector3, out Quaternion) Creates a right-handed spherical billboard that rotates around a specified object position. Declaration public static void BillboardRH(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, ref Vector3 cameraForwardVector, out Quaternion result) Parameters Type Name Description Vector3 objectPosition The position of the object around which the billboard will rotate. Vector3 cameraPosition The position of the camera. Vector3 cameraUpVector The up vector of the camera. Vector3 cameraForwardVector The forward vector of the camera. Quaternion result When the method completes, contains the created billboard quaternion. | Improve this Doc View Source Conjugate() Conjugates the quaternion. Declaration public void Conjugate() | Improve this Doc View Source Conjugate(Quaternion) Conjugates a quaternion. Declaration public static Quaternion Conjugate(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to conjugate. Returns Type Description Quaternion The conjugated quaternion. | Improve this Doc View Source Conjugate(ref Quaternion, out Quaternion) Conjugates a quaternion. Declaration public static void Conjugate(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to conjugate. Quaternion result When the method completes, contains the conjugated quaternion. | Improve this Doc View Source Dot(Quaternion, Quaternion) Calculates the dot product of two quaternions. Declaration public static float Dot(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left First source quaternion. Quaternion right Second source quaternion. Returns Type Description System.Single The dot product of the two quaternions. | Improve this Doc View Source Dot(ref Quaternion, ref Quaternion, out Single) Calculates the dot product of two quaternions. Declaration public static void Dot(ref Quaternion left, ref Quaternion right, out float result) Parameters Type Name Description Quaternion left First source quaternion. Quaternion right Second source quaternion. System.Single result When the method completes, contains the dot product of the two quaternions. | Improve this Doc View Source Equals(Quaternion) Determines whether the specified Quaternion is equal to this instance. Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other The Quaternion to compare with this instance. Returns Type Description System.Boolean true if the specified Quaternion is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Quaternion) Determines whether the specified Quaternion is equal to this instance. Declaration public bool Equals(ref Quaternion other) Parameters Type Name Description Quaternion other The Quaternion to compare with this instance. Returns Type Description System.Boolean true if the specified Quaternion is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source Exponential(Quaternion) Exponentiates a quaternion. Declaration public static Quaternion Exponential(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to exponentiate. Returns Type Description Quaternion The exponentiated quaternion. | Improve this Doc View Source Exponential(ref Quaternion, out Quaternion) Exponentiates a quaternion. Declaration public static void Exponential(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to exponentiate. Quaternion result When the method completes, contains the exponentiated quaternion. | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Invert() Conjugates and renormalizes the quaternion. Declaration public void Invert() | Improve this Doc View Source Invert(Quaternion) Conjugates and renormalizes the quaternion. Declaration public static Quaternion Invert(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to conjugate and renormalize. Returns Type Description Quaternion The conjugated and renormalized quaternion. | Improve this Doc View Source Invert(ref Quaternion, out Quaternion) Conjugates and renormalizes the quaternion. Declaration public static void Invert(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to conjugate and renormalize. Quaternion result When the method completes, contains the conjugated and renormalized quaternion. | Improve this Doc View Source Length() Calculates the length of the quaternion. Declaration public float Length() Returns Type Description System.Single The length of the quaternion. Remarks LengthSquared() may be preferred when only the relative length is needed and speed is of the essence. | Improve this Doc View Source LengthSquared() Calculates the squared length of the quaternion. Declaration public float LengthSquared() Returns Type Description System.Single The squared length of the quaternion. Remarks This method may be preferred to Length() when only a relative length is needed and speed is of the essence. | Improve this Doc View Source Lerp(Quaternion, Quaternion, Single) Performs a linear interpolation between two quaternion. Declaration public static Quaternion Lerp(Quaternion start, Quaternion end, float amount) Parameters Type Name Description Quaternion start Start quaternion. Quaternion end End quaternion. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Quaternion The linear interpolation of the two quaternions. Remarks This method performs the linear interpolation based on the following formula. start + (end - start) * amount Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion) Performs a linear interpolation between two quaternions. Declaration public static void Lerp(ref Quaternion start, ref Quaternion end, float amount, out Quaternion result) Parameters Type Name Description Quaternion start Start quaternion. Quaternion end End quaternion. System.Single amount Value between 0 and 1 indicating the weight of end . Quaternion result When the method completes, contains the linear interpolation of the two quaternions. Remarks This method performs the linear interpolation based on the following formula. start + (end - start) * amount Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Logarithm(Quaternion) Calculates the natural logarithm of the specified quaternion. Declaration public static Quaternion Logarithm(Quaternion value) Parameters Type Name Description Quaternion value The quaternion whose logarithm will be calculated. Returns Type Description Quaternion The natural logarithm of the quaternion. | Improve this Doc View Source Logarithm(ref Quaternion, out Quaternion) Calculates the natural logarithm of the specified quaternion. Declaration public static void Logarithm(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion whose logarithm will be calculated. Quaternion result When the method completes, contains the natural logarithm of the quaternion. | Improve this Doc View Source LookAtLH(Vector3, Vector3, Vector3) Creates a left-handed, look-at quaternion. Declaration public static Quaternion LookAtLH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Quaternion The created look-at quaternion. | Improve this Doc View Source LookAtLH(ref Vector3, ref Vector3, ref Vector3, out Quaternion) Creates a left-handed, look-at quaternion. Declaration public static void LookAtLH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Quaternion result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Quaternion result When the method completes, contains the created look-at quaternion. | Improve this Doc View Source LookAtRH(Vector3, Vector3, Vector3) Creates a right-handed, look-at quaternion. Declaration public static Quaternion LookAtRH(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Returns Type Description Quaternion The created look-at quaternion. | Improve this Doc View Source LookAtRH(ref Vector3, ref Vector3, ref Vector3, out Quaternion) Creates a right-handed, look-at quaternion. Declaration public static void LookAtRH(ref Vector3 eye, ref Vector3 target, ref Vector3 up, out Quaternion result) Parameters Type Name Description Vector3 eye The position of the viewer's eye. Vector3 target The camera look-at target. Vector3 up The camera's up vector. Quaternion result When the method completes, contains the created look-at quaternion. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies a quaternion by another. Declaration public static Quaternion Multiply(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to multiply. Quaternion right The second quaternion to multiply. Returns Type Description Quaternion The multiplied quaternion. | Improve this Doc View Source Multiply(Quaternion, Single) Scales a quaternion by the given value. Declaration public static Quaternion Multiply(Quaternion value, float scale) Parameters Type Name Description Quaternion value The quaternion to scale. System.Single scale The amount by which to scale the quaternion. Returns Type Description Quaternion The scaled quaternion. | Improve this Doc View Source Multiply(ref Quaternion, ref Quaternion, out Quaternion) Multiplies a quaternion by another. Declaration public static void Multiply(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first quaternion to multiply. Quaternion right The second quaternion to multiply. Quaternion result When the method completes, contains the multiplied quaternion. | Improve this Doc View Source Multiply(ref Quaternion, Single, out Quaternion) Scales a quaternion by the given value. Declaration public static void Multiply(ref Quaternion value, float scale, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to scale. System.Single scale The amount by which to scale the quaternion. Quaternion result When the method completes, contains the scaled quaternion. | Improve this Doc View Source Negate(Quaternion) Reverses the direction of a given quaternion. Declaration public static Quaternion Negate(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to negate. Returns Type Description Quaternion A quaternion facing in the opposite direction. | Improve this Doc View Source Negate(ref Quaternion, out Quaternion) Reverses the direction of a given quaternion. Declaration public static void Negate(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to negate. Quaternion result When the method completes, contains a quaternion facing in the opposite direction. | Improve this Doc View Source Normalize() Converts the quaternion into a unit quaternion. Declaration public void Normalize() | Improve this Doc View Source Normalize(Quaternion) Converts the quaternion into a unit quaternion. Declaration public static Quaternion Normalize(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to normalize. Returns Type Description Quaternion The normalized quaternion. | Improve this Doc View Source Normalize(ref Quaternion, out Quaternion) Converts the quaternion into a unit quaternion. Declaration public static void Normalize(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to normalize. Quaternion result When the method completes, contains the normalized quaternion. | Improve this Doc View Source RotationAxis(Vector3, Single) Creates a quaternion given a rotation and an axis. Declaration public static Quaternion RotationAxis(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle of rotation. Returns Type Description Quaternion The newly created quaternion. | Improve this Doc View Source RotationAxis(ref Vector3, Single, out Quaternion) Creates a quaternion given a rotation and an axis. Declaration public static void RotationAxis(ref Vector3 axis, float angle, out Quaternion result) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle of rotation. Quaternion result When the method completes, contains the newly created quaternion. | Improve this Doc View Source RotationLookAtLH(Vector3, Vector3) Creates a left-handed, look-at quaternion. Declaration public static Quaternion RotationLookAtLH(Vector3 forward, Vector3 up) Parameters Type Name Description Vector3 forward The camera's forward direction. Vector3 up The camera's up vector. Returns Type Description Quaternion The created look-at quaternion. | Improve this Doc View Source RotationLookAtLH(ref Vector3, ref Vector3, out Quaternion) Creates a left-handed, look-at quaternion. Declaration public static void RotationLookAtLH(ref Vector3 forward, ref Vector3 up, out Quaternion result) Parameters Type Name Description Vector3 forward The camera's forward direction. Vector3 up The camera's up vector. Quaternion result When the method completes, contains the created look-at quaternion. | Improve this Doc View Source RotationLookAtRH(Vector3, Vector3) Creates a right-handed, look-at quaternion. Declaration public static Quaternion RotationLookAtRH(Vector3 forward, Vector3 up) Parameters Type Name Description Vector3 forward The camera's forward direction. Vector3 up The camera's up vector. Returns Type Description Quaternion The created look-at quaternion. | Improve this Doc View Source RotationLookAtRH(ref Vector3, ref Vector3, out Quaternion) Creates a right-handed, look-at quaternion. Declaration public static void RotationLookAtRH(ref Vector3 forward, ref Vector3 up, out Quaternion result) Parameters Type Name Description Vector3 forward The camera's forward direction. Vector3 up The camera's up vector. Quaternion result When the method completes, contains the created look-at quaternion. | Improve this Doc View Source RotationMatrix(Matrix) Creates a quaternion given a rotation matrix. Declaration public static Quaternion RotationMatrix(Matrix matrix) Parameters Type Name Description Matrix matrix The rotation matrix. Returns Type Description Quaternion The newly created quaternion. | Improve this Doc View Source RotationMatrix(ref Matrix, out Quaternion) Creates a quaternion given a rotation matrix. Declaration public static void RotationMatrix(ref Matrix matrix, out Quaternion result) Parameters Type Name Description Matrix matrix The rotation matrix. Quaternion result When the method completes, contains the newly created quaternion. | Improve this Doc View Source RotationMatrix(ref Matrix3x3, out Quaternion) Creates a quaternion given a rotation matrix. Declaration public static void RotationMatrix(ref Matrix3x3 matrix, out Quaternion result) Parameters Type Name Description Matrix3x3 matrix The rotation matrix. Quaternion result When the method completes, contains the newly created quaternion. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single) Creates a quaternion given a yaw, pitch, and roll value. Declaration public static Quaternion RotationYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description System.Single yaw The yaw of rotation. System.Single pitch The pitch of rotation. System.Single roll The roll of rotation. Returns Type Description Quaternion The newly created quaternion. | Improve this Doc View Source RotationYawPitchRoll(Single, Single, Single, out Quaternion) Creates a quaternion given a yaw, pitch, and roll value. Declaration public static void RotationYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result) Parameters Type Name Description System.Single yaw The yaw of rotation. System.Single pitch The pitch of rotation. System.Single roll The roll of rotation. Quaternion result When the method completes, contains the newly created quaternion. | Improve this Doc View Source Slerp(Quaternion, Quaternion, Single) Interpolates between two quaternions, using spherical linear interpolation. Declaration public static Quaternion Slerp(Quaternion start, Quaternion end, float amount) Parameters Type Name Description Quaternion start Start quaternion. Quaternion end End quaternion. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Quaternion The spherical linear interpolation of the two quaternions. | Improve this Doc View Source Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion) Interpolates between two quaternions, using spherical linear interpolation. Declaration public static void Slerp(ref Quaternion start, ref Quaternion end, float amount, out Quaternion result) Parameters Type Name Description Quaternion start Start quaternion. Quaternion end End quaternion. System.Single amount Value between 0 and 1 indicating the weight of end . Quaternion result When the method completes, contains the spherical linear interpolation of the two quaternions. | Improve this Doc View Source Squad(Quaternion, Quaternion, Quaternion, Quaternion, Single) Interpolates between quaternions, using spherical quadrangle interpolation. Declaration public static Quaternion Squad(Quaternion value1, Quaternion value2, Quaternion value3, Quaternion value4, float amount) Parameters Type Name Description Quaternion value1 First source quaternion. Quaternion value2 Second source quaternion. Quaternion value3 Third source quaternion. Quaternion value4 Fourth source quaternion. System.Single amount Value between 0 and 1 indicating the weight of interpolation. Returns Type Description Quaternion The spherical quadrangle interpolation of the quaternions. | Improve this Doc View Source Squad(ref Quaternion, ref Quaternion, ref Quaternion, ref Quaternion, Single, out Quaternion) Interpolates between quaternions, using spherical quadrangle interpolation. Declaration public static void Squad(ref Quaternion value1, ref Quaternion value2, ref Quaternion value3, ref Quaternion value4, float amount, out Quaternion result) Parameters Type Name Description Quaternion value1 First source quaternion. Quaternion value2 Second source quaternion. Quaternion value3 Third source quaternion. Quaternion value4 Fourth source quaternion. System.Single amount Value between 0 and 1 indicating the weight of interpolation. Quaternion result When the method completes, contains the spherical quadrangle interpolation of the quaternions. | Improve this Doc View Source SquadSetup(Quaternion, Quaternion, Quaternion, Quaternion) Sets up control points for spherical quadrangle interpolation. Declaration public static Quaternion[] SquadSetup(Quaternion value1, Quaternion value2, Quaternion value3, Quaternion value4) Parameters Type Name Description Quaternion value1 First source quaternion. Quaternion value2 Second source quaternion. Quaternion value3 Third source quaternion. Quaternion value4 Fourth source quaternion. Returns Type Description Quaternion [] An array of three quaternions that represent control points for spherical quadrangle interpolation. | Improve this Doc View Source Subtract(Quaternion, Quaternion) Subtracts two quaternions. Declaration public static Quaternion Subtract(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to subtract. Quaternion right The second quaternion to subtract. Returns Type Description Quaternion The difference of the two quaternions. | Improve this Doc View Source Subtract(ref Quaternion, ref Quaternion, out Quaternion) Subtracts two quaternions. Declaration public static void Subtract(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first quaternion to subtract. Quaternion right The second quaternion to subtract. Quaternion result When the method completes, contains the difference of the two quaternions. | Improve this Doc View Source ToArray() Creates an array containing the elements of the quaternion. Declaration public float[] ToArray() Returns Type Description System.Single [] A four-element array containing the components of the quaternion. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Addition(Quaternion, Quaternion) Adds two quaternions. Declaration public static Quaternion operator +(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to add. Quaternion right The second quaternion to add. Returns Type Description Quaternion The sum of the two quaternions. | Improve this Doc View Source Equality(Quaternion, Quaternion) Tests for equality between two objects. Declaration public static bool operator ==(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first value to compare. Quaternion right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(Quaternion, Quaternion) Tests for inequality between two objects. Declaration public static bool operator !=(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first value to compare. Quaternion right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies a quaternion by another. Declaration public static Quaternion operator *(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to multiply. Quaternion right The second quaternion to multiply. Returns Type Description Quaternion The multiplied quaternion. | Improve this Doc View Source Multiply(Quaternion, Single) Scales a quaternion by the given value. Declaration public static Quaternion operator *(Quaternion value, float scale) Parameters Type Name Description Quaternion value The quaternion to scale. System.Single scale The amount by which to scale the quaternion. Returns Type Description Quaternion The scaled quaternion. | Improve this Doc View Source Multiply(Single, Quaternion) Scales a quaternion by the given value. Declaration public static Quaternion operator *(float scale, Quaternion value) Parameters Type Name Description System.Single scale The amount by which to scale the quaternion. Quaternion value The quaternion to scale. Returns Type Description Quaternion The scaled quaternion. | Improve this Doc View Source Subtraction(Quaternion, Quaternion) Subtracts two quaternions. Declaration public static Quaternion operator -(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to subtract. Quaternion right The second quaternion to subtract. Returns Type Description Quaternion The difference of the two quaternions. | Improve this Doc View Source UnaryNegation(Quaternion) Reverses the direction of a given quaternion. Declaration public static Quaternion operator -(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to negate. Returns Type Description Quaternion A quaternion facing in the opposite direction. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.RandomUtil.html": {
    "href": "api/Fluint.Layer.Mathematics.RandomUtil.html",
    "title": "Class RandomUtil | Fluint",
    "keywords": "Class RandomUtil Random functions on commun types. Inheritance System.Object RandomUtil Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public static class RandomUtil : object Methods | Improve this Doc View Source NextColor(Random) Gets random opaque . Declaration public static Color NextColor(this Random random) Parameters Type Name Description Random random Current . Returns Type Description Color Random . | Improve this Doc View Source NextColor(Random, Single, Single) Gets random opaque . Declaration public static Color NextColor(this Random random, float minBrightness, float maxBrightness) Parameters Type Name Description Random random Current . System.Single minBrightness Minimum brightness. System.Single maxBrightness Maximum brightness Returns Type Description Color Random . | Improve this Doc View Source NextColor(Random, Single, Single, Single) Gets random . Declaration public static Color NextColor(this Random random, float minBrightness, float maxBrightness, float alpha) Parameters Type Name Description Random random Current . System.Single minBrightness Minimum brightness. System.Single maxBrightness Maximum brightness System.Single alpha Alpha value. Returns Type Description Color Random . | Improve this Doc View Source NextColor(Random, Single, Single, Single, Single) Gets random . Declaration public static Color NextColor(this Random random, float minBrightness, float maxBrightness, float minAlpha, float maxAlpha) Parameters Type Name Description Random random Current . System.Single minBrightness Minimum brightness. System.Single maxBrightness Maximum brightness System.Single minAlpha Minimum alpha. System.Single maxAlpha Maximum alpha. Returns Type Description Color Random . | Improve this Doc View Source NextDouble(Random, Double, Double) Gets random double number within range. Declaration public static double NextDouble(this Random random, double min, double max) Parameters Type Name Description Random random Current . System.Double min Minimum. System.Double max Maximum. Returns Type Description System.Double Random double number. | Improve this Doc View Source NextFloat(Random, Single, Single) Gets random float number within range. Declaration public static float NextFloat(this Random random, float min, float max) Parameters Type Name Description Random random Current . System.Single min Minimum. System.Single max Maximum. Returns Type Description System.Single Random float number. | Improve this Doc View Source NextLong(Random) Gets random long number. Declaration public static long NextLong(this Random random) Parameters Type Name Description Random random Current . Returns Type Description System.Int64 Random long number. | Improve this Doc View Source NextLong(Random, Int64, Int64) Gets random long number within range. Declaration public static long NextLong(this Random random, long min, long max) Parameters Type Name Description Random random Current . System.Int64 min Minimum. System.Int64 max Maximum. Returns Type Description System.Int64 Random long number. | Improve this Doc View Source NextPoint(Random, Point, Point) Gets random Point . Declaration public static Point NextPoint(this Random random, Point min, Point max) Parameters Type Name Description Random random Current . Point min Minimum. Point max Maximum. Returns Type Description Point Random Point . | Improve this Doc View Source NextTime(Random, TimeSpan, TimeSpan) Gets random . Declaration public static TimeSpan NextTime(this Random random, TimeSpan min, TimeSpan max) Parameters Type Name Description Random random Current . TimeSpan min Minimum. TimeSpan max Maximum. Returns Type Description TimeSpan Random . | Improve this Doc View Source NextVector2(Random, Vector2, Vector2) Gets random Vector2 within range. Declaration public static Vector2 NextVector2(this Random random, Vector2 min, Vector2 max) Parameters Type Name Description Random random Current . Vector2 min Minimum. Vector2 max Maximum. Returns Type Description Vector2 Random Vector2 . | Improve this Doc View Source NextVector3(Random, Vector3, Vector3) Gets random Vector3 within range. Declaration public static Vector3 NextVector3(this Random random, Vector3 min, Vector3 max) Parameters Type Name Description Random random Current . Vector3 min Minimum. Vector3 max Maximum. Returns Type Description Vector3 Random Vector3 . | Improve this Doc View Source NextVector4(Random, Vector4, Vector4) Gets random Vector4 within range. Declaration public static Vector4 NextVector4(this Random random, Vector4 min, Vector4 max) Parameters Type Name Description Random random Current . Vector4 min Minimum. Vector4 max Maximum. Returns Type Description Vector4 Random Vector4 ."
  },
  "api/Fluint.Layer.Mathematics.Ray.html": {
    "href": "api/Fluint.Layer.Mathematics.Ray.html",
    "title": "Struct Ray | Fluint",
    "keywords": "Struct Ray Represents a three dimensional line based on a point in space and a direction. Implements IEquatable < Ray > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Ray : IEquatable<Ray>, IFormattable Constructors | Improve this Doc View Source Ray(Vector3, Vector3) Initializes a new instance of the Ray struct. Declaration public Ray(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position The position in three dimensional space of the origin of the ray. Vector3 direction The normalized direction of the ray. Fields | Improve this Doc View Source Direction The normalized direction in which the ray points. Declaration public Vector3 Direction Field Value Type Description Vector3 | Improve this Doc View Source Position The position in three dimensional space where the ray starts. Declaration public Vector3 Position Field Value Type Description Vector3 Methods | Improve this Doc View Source Equals(Ray) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(Ray value) Parameters Type Name Description Ray value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Ray) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref Ray value) Parameters Type Name Description Ray value The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source GetPickRay(Int32, Int32, ViewportF, Matrix) Calculates a world space Ray from 2d screen coordinates. Declaration public static Ray GetPickRay(int x, int y, ViewportF viewport, Matrix worldViewProjection) Parameters Type Name Description System.Int32 x X coordinate on 2d screen. System.Int32 y Y coordinate on 2d screen. ViewportF viewport ViewportF . Matrix worldViewProjection Transformation Matrix . Returns Type Description Ray Resulting Ray . | Improve this Doc View Source Intersects(BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingBox) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(ref BoundingBox box) Parameters Type Name Description BoundingBox box The box to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingBox, out Vector3) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(ref BoundingBox box, out Vector3 point) Parameters Type Name Description BoundingBox box The box to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingBox, out Single) Determines if there is an intersection between the current object and a BoundingBox . Declaration public bool Intersects(ref BoundingBox box, out float distance) Parameters Type Name Description BoundingBox box The box to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(ref BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The sphere to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere, out Vector3) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(ref BoundingSphere sphere, out Vector3 point) Parameters Type Name Description BoundingSphere sphere The sphere to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref BoundingSphere, out Single) Determines if there is an intersection between the current object and a BoundingSphere . Declaration public bool Intersects(ref BoundingSphere sphere, out float distance) Parameters Type Name Description BoundingSphere sphere The sphere to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane) Determines if there is an intersection between the current object and a Plane . Declaration public bool Intersects(ref Plane plane) Parameters Type Name Description Plane plane The plane to test Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane, out Vector3) Determines if there is an intersection between the current object and a Plane . Declaration public bool Intersects(ref Plane plane, out Vector3 point) Parameters Type Name Description Plane plane The plane to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Plane, out Single) Determines if there is an intersection between the current object and a Plane . Declaration public bool Intersects(ref Plane plane, out float distance) Parameters Type Name Description Plane plane The plane to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray) Parameters Type Name Description Ray ray The ray to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Ray, out Vector3) Determines if there is an intersection between the current object and a Ray . Declaration public bool Intersects(ref Ray ray, out Vector3 point) Parameters Type Name Description Ray ray The ray to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3) Determines if there is an intersection between the current object and a point. Declaration public bool Intersects(ref Vector3 point) Parameters Type Name Description Vector3 point The point to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3, ref Vector3, ref Vector3) Determines if there is an intersection between the current object and a triangle. Declaration public bool Intersects(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3, ref Vector3, ref Vector3, out Vector3) Determines if there is an intersection between the current object and a triangle. Declaration public bool Intersects(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3, out Vector3 point) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. Vector3 point When the method completes, contains the point of intersection, or Zero if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source Intersects(ref Vector3, ref Vector3, ref Vector3, out Single) Determines if there is an intersection between the current object and a triangle. Declaration public bool Intersects(ref Vector3 vertex1, ref Vector3 vertex2, ref Vector3 vertex3, out float distance) Parameters Type Name Description Vector3 vertex1 The first vertex of the triangle to test. Vector3 vertex2 The second vertex of the triangle to test. Vector3 vertex3 The third vertex of the triangle to test. System.Single distance When the method completes, contains the distance of the intersection, or 0 if there was no intersection. Returns Type Description System.Boolean Whether the two objects intersected. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. Operators | Improve this Doc View Source Equality(Ray, Ray) Tests for equality between two objects. Declaration public static bool operator ==(Ray left, Ray right) Parameters Type Name Description Ray left The first value to compare. Ray right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Inequality(Ray, Ray) Tests for inequality between two objects. Declaration public static bool operator !=(Ray left, Ray right) Parameters Type Name Description Ray left The first value to compare. Ray right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Rectangle.html": {
    "href": "api/Fluint.Layer.Mathematics.Rectangle.html",
    "title": "Struct Rectangle | Fluint",
    "keywords": "Struct Rectangle Define a Rectangle. This structure is slightly different from System.Drawing.Rectangle as it is internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height. Implements IEquatable < Rectangle > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Rectangle : IEquatable<Rectangle> Constructors | Improve this Doc View Source Rectangle(Int32, Int32, Int32, Int32) Initializes a new instance of the Rectangle struct. Declaration public Rectangle(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x The left. System.Int32 y The top. System.Int32 width The width. System.Int32 height The height. Fields | Improve this Doc View Source Bottom The bottom. Declaration public int Bottom Field Value Type Description System.Int32 | Improve this Doc View Source Empty An empty rectangle. Declaration public static readonly Rectangle Empty Field Value Type Description Rectangle | Improve this Doc View Source Left The left. Declaration public int Left Field Value Type Description System.Int32 | Improve this Doc View Source Right The right. Declaration public int Right Field Value Type Description System.Int32 | Improve this Doc View Source Top The top. Declaration public int Top Field Value Type Description System.Int32 Properties | Improve this Doc View Source Height Gets or sets the height. Declaration public int Height { get; set; } Property Value Type Description System.Int32 The height. | Improve this Doc View Source IsEmpty Gets a value that indicates whether the rectangle is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if [is empty]; otherwise, false . | Improve this Doc View Source Width Gets or sets the width. Declaration public int Width { get; set; } Property Value Type Description System.Int32 The width. | Improve this Doc View Source X Gets or sets the X position. Declaration public int X { get; set; } Property Value Type Description System.Int32 The X position. | Improve this Doc View Source Y Gets or sets the Y position. Declaration public int Y { get; set; } Property Value Type Description System.Int32 The Y position. Methods | Improve this Doc View Source Contains(Rectangle) Determines whether this rectangle entirely contains a specified rectangle. Declaration public bool Contains(Rectangle value) Parameters Type Name Description Rectangle value The rectangle to evaluate. Returns Type Description System.Boolean | Improve this Doc View Source Contains(ref Rectangle, out Boolean) Determines whether this rectangle entirely contains a specified rectangle. Declaration public void Contains(ref Rectangle value, out bool result) Parameters Type Name Description Rectangle value The rectangle to evaluate. System.Boolean result [OutAttribute] On exit, is true if this rectangle entirely contains the specified rectangle, or false if not. | Improve this Doc View Source Contains(Int32, Int32) Determines whether this rectangle contains a specified point represented by its x- and y-coordinates. Declaration public bool Contains(int x, int y) Parameters Type Name Description System.Int32 x The x-coordinate of the specified point. System.Int32 y The y-coordinate of the specified point. Returns Type Description System.Boolean | Improve this Doc View Source Contains(Single, Single) Checks, if specified point is inside Rectangle . Declaration public bool Contains(float x, float y) Parameters Type Name Description System.Single x X point coordinate. System.Single y Y point coordinate. Returns Type Description System.Boolean true if point is inside Rectangle , otherwise false . | Improve this Doc View Source Equals(Rectangle) Determines whether the specified Rectangle is equal to this instance. Declaration public bool Equals(Rectangle other) Parameters Type Name Description Rectangle other The Rectangle to compare with this instance. Returns Type Description System.Boolean true if the specified Rectangle is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Rectangle) Determines whether the specified Rectangle is equal to this instance. Declaration public bool Equals(ref Rectangle other) Parameters Type Name Description Rectangle other The Rectangle to compare with this instance. Returns Type Description System.Boolean true if the specified Rectangle is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Inflate(Int32, Int32) Pushes the edges of the rectangle out by the horizontal and vertical values specified. Declaration public void Inflate(int horizontalAmount, int verticalAmount) Parameters Type Name Description System.Int32 horizontalAmount Value to push the sides out by. System.Int32 verticalAmount Value to push the top and bottom out by. | Improve this Doc View Source Intersect(Rectangle, Rectangle) Creates a rectangle defining the area where one rectangle overlaps with another rectangle. Declaration public static Rectangle Intersect(Rectangle value1, Rectangle value2) Parameters Type Name Description Rectangle value1 The first rectangle to compare. Rectangle value2 The second rectangle to compare. Returns Type Description Rectangle The intersection rectangle. | Improve this Doc View Source Intersect(ref Rectangle, ref Rectangle, out Rectangle) Creates a rectangle defining the area where one rectangle overlaps with another rectangle. Declaration public static void Intersect(ref Rectangle value1, ref Rectangle value2, out Rectangle result) Parameters Type Name Description Rectangle value1 The first rectangle to compare. Rectangle value2 The second rectangle to compare. Rectangle result [OutAttribute] The area where the two first parameters overlap. | Improve this Doc View Source Intersects(Rectangle) Determines whether a specified rectangle intersects with this rectangle. Declaration public bool Intersects(Rectangle value) Parameters Type Name Description Rectangle value The rectangle to evaluate. Returns Type Description System.Boolean | Improve this Doc View Source Intersects(ref Rectangle, out Boolean) Determines whether a specified rectangle intersects with this rectangle. Declaration public void Intersects(ref Rectangle value, out bool result) Parameters Type Name Description Rectangle value The rectangle to evaluate System.Boolean result [OutAttribute] true if the specified rectangle intersects with this one; false otherwise. | Improve this Doc View Source Offset(Int32, Int32) Changes the position of the rectangle. Declaration public void Offset(int offsetX, int offsetY) Parameters Type Name Description System.Int32 offsetX Change in the x-position. System.Int32 offsetY Change in the y-position. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Union(Rectangle, Rectangle) Creates a new rectangle that exactly contains two other rectangles. Declaration public static Rectangle Union(Rectangle value1, Rectangle value2) Parameters Type Name Description Rectangle value1 The first rectangle to contain. Rectangle value2 The second rectangle to contain. Returns Type Description Rectangle The union rectangle. | Improve this Doc View Source Union(ref Rectangle, ref Rectangle, out Rectangle) Creates a new rectangle that exactly contains two other rectangles. Declaration public static void Union(ref Rectangle value1, ref Rectangle value2, out Rectangle result) Parameters Type Name Description Rectangle value1 The first rectangle to contain. Rectangle value2 The second rectangle to contain. Rectangle result [OutAttribute] The rectangle that must be the union of the first two rectangles. Operators | Improve this Doc View Source Equality(Rectangle, Rectangle) Implements the operator ==. Declaration public static bool operator ==(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The left. Rectangle right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(Rectangle, Rectangle) Implements the operator !=. Declaration public static bool operator !=(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The left. Rectangle right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.RectangleF.html": {
    "href": "api/Fluint.Layer.Mathematics.RectangleF.html",
    "title": "Struct RectangleF | Fluint",
    "keywords": "Struct RectangleF Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as it is internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height. Implements IEquatable < RectangleF > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct RectangleF : IEquatable<RectangleF> Constructors | Improve this Doc View Source RectangleF(Single, Single, Single, Single) Initializes a new instance of the RectangleF struct. Declaration public RectangleF(float x, float y, float width, float height) Parameters Type Name Description System.Single x The left. System.Single y The top. System.Single width The width. System.Single height The height. Fields | Improve this Doc View Source Bottom The bottom. Declaration public float Bottom Field Value Type Description System.Single | Improve this Doc View Source Empty An empty rectangle. Declaration public static readonly RectangleF Empty Field Value Type Description RectangleF | Improve this Doc View Source Infinite An infinite rectangle. See remarks. Declaration public static readonly RectangleF Infinite Field Value Type Description RectangleF Remarks http://msdn.microsoft.com/en-us/library/windows/desktop/dd372261%28v=vs.85%29.aspx Any properties that involve computations, like Center , Width or Height may return incorrect results - . | Improve this Doc View Source Left The left. Declaration public float Left Field Value Type Description System.Single | Improve this Doc View Source Right The right. Declaration public float Right Field Value Type Description System.Single | Improve this Doc View Source Top The top. Declaration public float Top Field Value Type Description System.Single Properties | Improve this Doc View Source BottomLeft Gets the position of the bottom-left corner of the rectangle. Declaration public Vector2 BottomLeft { get; } Property Value Type Description Vector2 The bottom-left corner of the rectangle. | Improve this Doc View Source BottomRight Gets the position of the bottom-right corner of the rectangle. Declaration public Vector2 BottomRight { get; } Property Value Type Description Vector2 The bottom-right corner of the rectangle. | Improve this Doc View Source Center Gets the Point that specifies the center of the rectangle. Declaration public Vector2 Center { get; } Property Value Type Description Vector2 The center. | Improve this Doc View Source Height Gets or sets the height. Declaration public float Height { get; set; } Property Value Type Description System.Single The height. | Improve this Doc View Source IsEmpty Gets a value that indicates whether the rectangle is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if [is empty]; otherwise, false . | Improve this Doc View Source Location Gets or sets the location. Declaration public Vector2 Location { get; set; } Property Value Type Description Vector2 The location. | Improve this Doc View Source TopLeft Gets the position of the top-left corner of the rectangle. Declaration public Vector2 TopLeft { get; } Property Value Type Description Vector2 The top-left corner of the rectangle. | Improve this Doc View Source TopRight Gets the position of the top-right corner of the rectangle. Declaration public Vector2 TopRight { get; } Property Value Type Description Vector2 The top-right corner of the rectangle. | Improve this Doc View Source Width Gets or sets the width. Declaration public float Width { get; set; } Property Value Type Description System.Single The width. | Improve this Doc View Source X Gets or sets the X position. Declaration public float X { get; set; } Property Value Type Description System.Single The X position. | Improve this Doc View Source Y Gets or sets the Y position. Declaration public float Y { get; set; } Property Value Type Description System.Single The Y position. Methods | Improve this Doc View Source Contains(Point) Checks, if specified Point is inside RectangleF . Declaration public bool Contains(Point point) Parameters Type Name Description Point point Coordinate Point . Returns Type Description System.Boolean true if Point is inside RectangleF , otherwise false . | Improve this Doc View Source Contains(Rectangle) Determines whether this rectangle entirely contains a specified rectangle. Declaration public bool Contains(Rectangle value) Parameters Type Name Description Rectangle value The rectangle to evaluate. Returns Type Description System.Boolean | Improve this Doc View Source Contains(ref RectangleF, out Boolean) Determines whether this rectangle entirely contains a specified rectangle. Declaration public void Contains(ref RectangleF value, out bool result) Parameters Type Name Description RectangleF value The rectangle to evaluate. System.Boolean result [OutAttribute] On exit, is true if this rectangle entirely contains the specified rectangle, or false if not. | Improve this Doc View Source Contains(Vector2) Checks, if specified Vector2 is inside RectangleF . Declaration public bool Contains(Vector2 vector2D) Parameters Type Name Description Vector2 vector2D Coordinate Vector2 . Returns Type Description System.Boolean true if Vector2 is inside RectangleF , otherwise false . | Improve this Doc View Source Contains(ref Vector2, out Boolean) Determines whether this rectangle contains a specified Point. Declaration public void Contains(ref Vector2 value, out bool result) Parameters Type Name Description Vector2 value The Point to evaluate. System.Boolean result [OutAttribute] true if the specified Point is contained within this rectangle; false otherwise. | Improve this Doc View Source Contains(Single, Single) Checks, if specified point is inside RectangleF . Declaration public bool Contains(float x, float y) Parameters Type Name Description System.Single x X point coordinate. System.Single y Y point coordinate. Returns Type Description System.Boolean true if point is inside RectangleF , otherwise false . | Improve this Doc View Source Equals(RectangleF) Determines whether the specified RectangleF is equal to this instance. Declaration public bool Equals(RectangleF other) Parameters Type Name Description RectangleF other The RectangleF to compare with this instance. Returns Type Description System.Boolean true if the specified RectangleF is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref RectangleF) Determines whether the specified RectangleF is equal to this instance. Declaration public bool Equals(ref RectangleF other) Parameters Type Name Description RectangleF other The RectangleF to compare with this instance. Returns Type Description System.Boolean true if the specified RectangleF is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Inflate(Single, Single) Pushes the edges of the rectangle out by the horizontal and vertical values specified. Declaration public void Inflate(float horizontalAmount, float verticalAmount) Parameters Type Name Description System.Single horizontalAmount Value to push the sides out by. System.Single verticalAmount Value to push the top and bottom out by. | Improve this Doc View Source Intersect(RectangleF, RectangleF) Creates a rectangle defining the area where one rectangle overlaps with another rectangle. Declaration public static RectangleF Intersect(RectangleF value1, RectangleF value2) Parameters Type Name Description RectangleF value1 The first Rectangle to compare. RectangleF value2 The second Rectangle to compare. Returns Type Description RectangleF The intersection rectangle. | Improve this Doc View Source Intersect(ref RectangleF, ref RectangleF, out RectangleF) Creates a rectangle defining the area where one rectangle overlaps with another rectangle. Declaration public static void Intersect(ref RectangleF value1, ref RectangleF value2, out RectangleF result) Parameters Type Name Description RectangleF value1 The first rectangle to compare. RectangleF value2 The second rectangle to compare. RectangleF result [OutAttribute] The area where the two first parameters overlap. | Improve this Doc View Source Intersects(RectangleF) Determines whether a specified rectangle intersects with this rectangle. Declaration public bool Intersects(RectangleF value) Parameters Type Name Description RectangleF value The rectangle to evaluate. Returns Type Description System.Boolean | Improve this Doc View Source Intersects(ref RectangleF, out Boolean) Determines whether a specified rectangle intersects with this rectangle. Declaration public void Intersects(ref RectangleF value, out bool result) Parameters Type Name Description RectangleF value The rectangle to evaluate System.Boolean result [OutAttribute] true if the specified rectangle intersects with this one; false otherwise. | Improve this Doc View Source Offset(Point) Changes the position of the rectangle. Declaration public void Offset(Point amount) Parameters Type Name Description Point amount The values to adjust the position of the rectangle by. | Improve this Doc View Source Offset(Vector2) Changes the position of the rectangle. Declaration public void Offset(Vector2 amount) Parameters Type Name Description Vector2 amount The values to adjust the position of the rectangle by. | Improve this Doc View Source Offset(Single, Single) Changes the position of the rectangle. Declaration public void Offset(float offsetX, float offsetY) Parameters Type Name Description System.Single offsetX Change in the x-position. System.Single offsetY Change in the y-position. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Union(RectangleF, RectangleF) Creates a new rectangle that exactly contains two other rectangles. Declaration public static RectangleF Union(RectangleF value1, RectangleF value2) Parameters Type Name Description RectangleF value1 The first rectangle to contain. RectangleF value2 The second rectangle to contain. Returns Type Description RectangleF The union rectangle. | Improve this Doc View Source Union(ref RectangleF, ref RectangleF, out RectangleF) Creates a new rectangle that exactly contains two other rectangles. Declaration public static void Union(ref RectangleF value1, ref RectangleF value2, out RectangleF result) Parameters Type Name Description RectangleF value1 The first rectangle to contain. RectangleF value2 The second rectangle to contain. RectangleF result [OutAttribute] The rectangle that must be the union of the first two rectangles. Operators | Improve this Doc View Source Equality(RectangleF, RectangleF) Implements the operator ==. Declaration public static bool operator ==(RectangleF left, RectangleF right) Parameters Type Name Description RectangleF left The left. RectangleF right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Explicit(RectangleF to Rectangle) Performs an explicit conversion to Rectangle structure. Declaration public static explicit operator Rectangle(RectangleF value) Parameters Type Name Description RectangleF value The source RectangleF value. Returns Type Description Rectangle A converted Rectangle structure. Remarks Performs direct float to int conversion, any fractional data is truncated. | Improve this Doc View Source Inequality(RectangleF, RectangleF) Implements the operator !=. Declaration public static bool operator !=(RectangleF left, RectangleF right) Parameters Type Name Description RectangleF left The left. RectangleF right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.Transform.html": {
    "href": "api/Fluint.Layer.Mathematics.Transform.html",
    "title": "Class Transform | Fluint",
    "keywords": "Class Transform Inheritance System.Object Transform Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public class Transform : object Constructors | Improve this Doc View Source Transform() Declaration public Transform() Properties | Improve this Doc View Source EulerAngles Declaration public Vector3 EulerAngles { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Scale Declaration public Vector3 Scale { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Translation Declaration public Vector3 Translation { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source GetModelMatrix() Declaration public Matrix GetModelMatrix() Returns Type Description Matrix"
  },
  "api/Fluint.Layer.Mathematics.Vector2.html": {
    "href": "api/Fluint.Layer.Mathematics.Vector2.html",
    "title": "Struct Vector2 | Fluint",
    "keywords": "Struct Vector2 Represents a two dimensional mathematical vector. Implements IEquatable < Vector2 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Vector2 : IEquatable<Vector2>, IFormattable Constructors | Improve this Doc View Source Vector2(Single) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Vector2(Single, Single) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float x, float y) Parameters Type Name Description System.Single x Initial value for the X component of the vector. System.Single y Initial value for the Y component of the vector. | Improve this Doc View Source Vector2(Single[]) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the X and Y components of the vector. This must be an array with two elements. Fields | Improve this Doc View Source One A Vector2 with all of its components set to one. Declaration public static readonly Vector2 One Field Value Type Description Vector2 | Improve this Doc View Source SizeInBytes The size of the Vector2 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitX The X unit Vector2 (1, 0). Declaration public static readonly Vector2 UnitX Field Value Type Description Vector2 | Improve this Doc View Source UnitY The Y unit Vector2 (0, 1). Declaration public static readonly Vector2 UnitY Field Value Type Description Vector2 | Improve this Doc View Source X The X component of the vector. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the vector. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Zero A Vector2 with all of its components set to zero. Declaration public static readonly Vector2 Zero Field Value Type Description Vector2 Properties | Improve this Doc View Source IsNormalized Gets a value indicting whether this instance is normalized. Declaration public bool IsNormalized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsZero Gets a value indicting whether this vector is zero Declaration public bool IsZero { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component and 1 for the Y component. Property Value Type Description System.Single The value of the X or Y component, depending on the index. Methods | Improve this Doc View Source Abs(Vector2) Returns per component absolute value of a vector Declaration public static Vector2 Abs(Vector2 value) Parameters Type Name Description Vector2 value Input vector Returns Type Description Vector2 A vector with each component being the absolute value of the input component | Improve this Doc View Source Abs(ref Vector2, out Vector2) Returns per component absolute value of a vector Declaration public static void Abs(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value Input vector Vector2 result When the method completes, contains a vector with each component being the absolute value of the input component | Improve this Doc View Source Add(Vector2, Vector2) Adds two vectors. Declaration public static Vector2 Add(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to add. Vector2 right The second vector to add. Returns Type Description Vector2 The sum of the two vectors. | Improve this Doc View Source Add(Vector2, Single) Perform a component-wise addition Declaration public static Vector2 Add(Vector2 left, float right) Parameters Type Name Description Vector2 left The input vector System.Single right The scalar value to be added to elements Returns Type Description Vector2 The vector with added scalar for each element. | Improve this Doc View Source Add(ref Vector2, ref Vector2, out Vector2) Adds two vectors. Declaration public static void Add(ref Vector2 left, ref Vector2 right, out Vector2 result) Parameters Type Name Description Vector2 left The first vector to add. Vector2 right The second vector to add. Vector2 result When the method completes, contains the sum of the two vectors. | Improve this Doc View Source Add(ref Vector2, ref Single, out Vector2) Perform a component-wise addition Declaration public static void Add(ref Vector2 left, ref float right, out Vector2 result) Parameters Type Name Description Vector2 left The input vector System.Single right The scalar value to be added to elements Vector2 result The vector with added scalar for each element. | Improve this Doc View Source Barycentric(Vector2, Vector2, Vector2, Single, Single) Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle. Declaration public static Vector2 Barycentric(Vector2 value1, Vector2 value2, Vector2 value3, float amount1, float amount2) Parameters Type Name Description Vector2 value1 A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle. Vector2 value2 A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle. Vector2 value3 A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Returns Type Description Vector2 A new Vector2 containing the 2D Cartesian coordinates of the specified point. | Improve this Doc View Source Barycentric(ref Vector2, ref Vector2, ref Vector2, Single, Single, out Vector2) Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle. Declaration public static void Barycentric(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, float amount1, float amount2, out Vector2 result) Parameters Type Name Description Vector2 value1 A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle. Vector2 value2 A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle. Vector2 value3 A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Vector2 result When the method completes, contains the 2D Cartesian coordinates of the specified point. | Improve this Doc View Source CatmullRom(Vector2, Vector2, Vector2, Vector2, Single) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static Vector2 CatmullRom(Vector2 value1, Vector2 value2, Vector2 value3, Vector2 value4, float amount) Parameters Type Name Description Vector2 value1 The first position in the interpolation. Vector2 value2 The second position in the interpolation. Vector2 value3 The third position in the interpolation. Vector2 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Returns Type Description Vector2 A vector that is the result of the Catmull-Rom interpolation. | Improve this Doc View Source CatmullRom(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static void CatmullRom(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, ref Vector2 value4, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first position in the interpolation. Vector2 value2 The second position in the interpolation. Vector2 value3 The third position in the interpolation. Vector2 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Vector2 result When the method completes, contains the result of the Catmull-Rom interpolation. | Improve this Doc View Source Clamp(Vector2, Vector2, Vector2) Restricts a value to be within a specified range. Declaration public static Vector2 Clamp(Vector2 value, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 value The value to clamp. Vector2 min The minimum value. Vector2 max The maximum value. Returns Type Description Vector2 The clamped value. | Improve this Doc View Source Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Vector2 value, ref Vector2 min, ref Vector2 max, out Vector2 result) Parameters Type Name Description Vector2 value The value to clamp. Vector2 min The minimum value. Vector2 max The maximum value. Vector2 result When the method completes, contains the clamped value. | Improve this Doc View Source Distance(Vector2, Vector2) Calculates the distance between two vectors. Declaration public static float Distance(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description System.Single The distance between the two vectors. Remarks DistanceSquared(Vector2, Vector2) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source Distance(ref Vector2, ref Vector2, out Single) Calculates the distance between two vectors. Declaration public static void Distance(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single result When the method completes, contains the distance between the two vectors. Remarks DistanceSquared(ref Vector2, ref Vector2, out Single) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source DistanceSquared(Vector2, Vector2) Calculates the squared distance between two vectors. Declaration public static float DistanceSquared(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description System.Single The squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source DistanceSquared(ref Vector2, ref Vector2, out Single) Calculates the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector System.Single result When the method completes, contains the squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source Divide(Vector2, Single) Scales a vector by the given value. Declaration public static Vector2 Divide(Vector2 value, float scale) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Divide(ref Vector2, Single, out Vector2) Scales a vector by the given value. Declaration public static void Divide(ref Vector2 value, float scale, out Vector2 result) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector2 result When the method completes, contains the scaled vector. | Improve this Doc View Source Divide(Single, Vector2) Scales a vector by the given value. Declaration public static Vector2 Divide(float scale, Vector2 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector2 value The vector to scale. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Divide(Single, ref Vector2, out Vector2) Scales a vector by the given value. Declaration public static void Divide(float scale, ref Vector2 value, out Vector2 result) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector2 value The vector to scale. Vector2 result When the method completes, contains the scaled vector. | Improve this Doc View Source Dot(Vector2, Vector2) Calculates the dot product of two vectors. Declaration public static float Dot(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left First source vector. Vector2 right Second source vector. Returns Type Description System.Single The dot product of the two vectors. | Improve this Doc View Source Dot(ref Vector2, ref Vector2, out Single) Calculates the dot product of two vectors. Declaration public static void Dot(ref Vector2 left, ref Vector2 right, out float result) Parameters Type Name Description Vector2 left First source vector. Vector2 right Second source vector. System.Single result When the method completes, contains the dot product of the two vectors. | Improve this Doc View Source Equals(Vector2) Determines whether the specified Vector2 is equal to this instance. Declaration public bool Equals(Vector2 other) Parameters Type Name Description Vector2 other The Vector2 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector2 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Vector2) Determines whether the specified Vector2 is equal to this instance. Declaration public bool Equals(ref Vector2 other) Parameters Type Name Description Vector2 other The Vector2 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector2 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Hermite(Vector2, Vector2, Vector2, Vector2, Single) Performs a Hermite spline interpolation. Declaration public static Vector2 Hermite(Vector2 value1, Vector2 tangent1, Vector2 value2, Vector2 tangent2, float amount) Parameters Type Name Description Vector2 value1 First source position vector. Vector2 tangent1 First source tangent vector. Vector2 value2 Second source position vector. Vector2 tangent2 Second source tangent vector. System.Single amount Weighting factor. Returns Type Description Vector2 The result of the Hermite spline interpolation. | Improve this Doc View Source Hermite(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2) Performs a Hermite spline interpolation. Declaration public static void Hermite(ref Vector2 value1, ref Vector2 tangent1, ref Vector2 value2, ref Vector2 tangent2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 First source position vector. Vector2 tangent1 First source tangent vector. Vector2 value2 Second source position vector. Vector2 tangent2 Second source tangent vector. System.Single amount Weighting factor. Vector2 result When the method completes, contains the result of the Hermite spline interpolation. | Improve this Doc View Source Length() Calculates the length of the vector. Declaration public float Length() Returns Type Description System.Single The length of the vector. Remarks LengthSquared() may be preferred when only the relative length is needed and speed is of the essence. | Improve this Doc View Source LengthSquared() Calculates the squared length of the vector. Declaration public float LengthSquared() Returns Type Description System.Single The squared length of the vector. Remarks This method may be preferred to Length() when only a relative length is needed and speed is of the essence. | Improve this Doc View Source Lerp(Vector2, Vector2, Single) Performs a linear interpolation between two vectors. Declaration public static Vector2 Lerp(Vector2 start, Vector2 end, float amount) Parameters Type Name Description Vector2 start Start vector. Vector2 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector2 The linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Vector2, ref Vector2, Single, out Vector2) Performs a linear interpolation between two vectors. Declaration public static void Lerp(ref Vector2 start, ref Vector2 end, float amount, out Vector2 result) Parameters Type Name Description Vector2 start Start vector. Vector2 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector2 result When the method completes, contains the linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Vector2, Vector2) Returns a vector containing the largest components of the specified vectors. Declaration public static Vector2 Max(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 A vector containing the largest components of the source vectors. | Improve this Doc View Source Max(ref Vector2, ref Vector2, out Vector2) Returns a vector containing the largest components of the specified vectors. Declaration public static void Max(ref Vector2 left, ref Vector2 right, out Vector2 result) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Vector2 result When the method completes, contains an new vector composed of the largest components of the source vectors. | Improve this Doc View Source Min(Vector2, Vector2) Returns a vector containing the smallest components of the specified vectors. Declaration public static Vector2 Min(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 A vector containing the smallest components of the source vectors. | Improve this Doc View Source Min(ref Vector2, ref Vector2, out Vector2) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Min(ref Vector2 left, ref Vector2 right, out Vector2 result) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Vector2 result When the method completes, contains an new vector composed of the smallest components of the source vectors. | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies a vector with another by performing component-wise multiplication. Declaration public static Vector2 Multiply(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to multiply. Vector2 right The second vector to multiply. Returns Type Description Vector2 The multiplied vector. | Improve this Doc View Source Multiply(Vector2, Single) Scales a vector by the given value. Declaration public static Vector2 Multiply(Vector2 value, float scale) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(ref Vector2, ref Vector2, out Vector2) Multiplies a vector with another by performing component-wise multiplication. Declaration public static void Multiply(ref Vector2 left, ref Vector2 right, out Vector2 result) Parameters Type Name Description Vector2 left The first vector to multiply. Vector2 right The second vector to multiply. Vector2 result When the method completes, contains the multiplied vector. | Improve this Doc View Source Multiply(ref Vector2, Single, out Vector2) Scales a vector by the given value. Declaration public static void Multiply(ref Vector2 value, float scale, out Vector2 result) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector2 result When the method completes, contains the scaled vector. | Improve this Doc View Source Negate(Vector2) Reverses the direction of a given vector. Declaration public static Vector2 Negate(Vector2 value) Parameters Type Name Description Vector2 value The vector to negate. Returns Type Description Vector2 A vector facing in the opposite direction. | Improve this Doc View Source Negate(ref Vector2, out Vector2) Reverses the direction of a given vector. Declaration public static void Negate(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value The vector to negate. Vector2 result When the method completes, contains a vector facing in the opposite direction. | Improve this Doc View Source Normalize() Converts the vector into a unit vector. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector2) Converts the vector into a unit vector. Declaration public static Vector2 Normalize(Vector2 value) Parameters Type Name Description Vector2 value The vector to normalize. Returns Type Description Vector2 The normalized vector. | Improve this Doc View Source Normalize(ref Vector2, out Vector2) Converts the vector into a unit vector. Declaration public static void Normalize(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value The vector to normalize. Vector2 result When the method completes, contains the normalized vector. | Improve this Doc View Source Orthogonalize(Vector2[], Vector2[]) Orthogonalizes a list of vectors. Declaration public static void Orthogonalize(Vector2[] destination, params Vector2[] source) Parameters Type Name Description Vector2 [] destination The list of orthogonalized vectors. Vector2 [] source The list of vectors to orthogonalize. Remarks Orthogonalization is the process of making all vectors orthogonal to each other. This means that any given vector in the list will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source Orthonormalize(Vector2[], Vector2[]) Orthonormalizes a list of vectors. Declaration public static void Orthonormalize(Vector2[] destination, params Vector2[] source) Parameters Type Name Description Vector2 [] destination The list of orthonormalized vectors. Vector2 [] source The list of vectors to orthonormalize. Remarks Orthonormalization is the process of making all vectors orthogonal to each other and making all vectors of unit length. This means that any given vector will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source Reflect(Vector2, Vector2) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static Vector2 Reflect(Vector2 vector, Vector2 normal) Parameters Type Name Description Vector2 vector The source vector. Vector2 normal Normal of the surface. Returns Type Description Vector2 The reflected vector. Remarks Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it. | Improve this Doc View Source Reflect(ref Vector2, ref Vector2, out Vector2) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static void Reflect(ref Vector2 vector, ref Vector2 normal, out Vector2 result) Parameters Type Name Description Vector2 vector The source vector. Vector2 normal Normal of the surface. Vector2 result When the method completes, contains the reflected vector. Remarks Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it. | Improve this Doc View Source Saturate() Saturates this instance in the range [0,1] Declaration public void Saturate() | Improve this Doc View Source SmoothStep(Vector2, Vector2, Single) Performs a cubic interpolation between two vectors. Declaration public static Vector2 SmoothStep(Vector2 start, Vector2 end, float amount) Parameters Type Name Description Vector2 start Start vector. Vector2 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector2 The cubic interpolation of the two vectors. | Improve this Doc View Source SmoothStep(ref Vector2, ref Vector2, Single, out Vector2) Performs a cubic interpolation between two vectors. Declaration public static void SmoothStep(ref Vector2 start, ref Vector2 end, float amount, out Vector2 result) Parameters Type Name Description Vector2 start Start vector. Vector2 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector2 result When the method completes, contains the cubic interpolation of the two vectors. | Improve this Doc View Source Subtract(Vector2, Vector2) Subtracts two vectors. Declaration public static Vector2 Subtract(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to subtract. Vector2 right The second vector to subtract. Returns Type Description Vector2 The difference of the two vectors. | Improve this Doc View Source Subtract(Vector2, Single) Perform a component-wise subtraction Declaration public static Vector2 Subtract(Vector2 left, float right) Parameters Type Name Description Vector2 left The input vector System.Single right The scalar value to be subtraced from elements Returns Type Description Vector2 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Vector2, ref Vector2, out Vector2) Subtracts two vectors. Declaration public static void Subtract(ref Vector2 left, ref Vector2 right, out Vector2 result) Parameters Type Name Description Vector2 left The first vector to subtract. Vector2 right The second vector to subtract. Vector2 result When the method completes, contains the difference of the two vectors. | Improve this Doc View Source Subtract(ref Vector2, ref Single, out Vector2) Perform a component-wise subtraction Declaration public static void Subtract(ref Vector2 left, ref float right, out Vector2 result) Parameters Type Name Description Vector2 left The input vector System.Single right The scalar value to be subtraced from elements Vector2 result The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(Single, Vector2) Perform a component-wise subtraction Declaration public static Vector2 Subtract(float left, Vector2 right) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector2 right The input vector Returns Type Description Vector2 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Single, ref Vector2, out Vector2) Perform a component-wise subtraction Declaration public static void Subtract(ref float left, ref Vector2 right, out Vector2 result) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector2 right The input vector Vector2 result The vector with subtracted scalar for each element. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public float[] ToArray() Returns Type Description System.Single [] A two-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transform(Vector2, Matrix) Transforms a 2D vector by the given Matrix . Declaration public static Vector4 Transform(Vector2 vector, Matrix transform) Parameters Type Name Description Vector2 vector The source vector. Matrix transform The transformation Matrix . Returns Type Description Vector4 The transformed Vector4 . | Improve this Doc View Source Transform(Vector2, Quaternion) Transforms a 2D vector by the given Quaternion rotation. Declaration public static Vector2 Transform(Vector2 vector, Quaternion rotation) Parameters Type Name Description Vector2 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Returns Type Description Vector2 The transformed Vector4 . | Improve this Doc View Source Transform(ref Vector2, ref Matrix, out Vector4) Transforms a 2D vector by the given Matrix . Declaration public static void Transform(ref Vector2 vector, ref Matrix transform, out Vector4 result) Parameters Type Name Description Vector2 vector The source vector. Matrix transform The transformation Matrix . Vector4 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(ref Vector2, ref Quaternion, out Vector2) Transforms a 2D vector by the given Quaternion rotation. Declaration public static void Transform(ref Vector2 vector, ref Quaternion rotation, out Vector2 result) Parameters Type Name Description Vector2 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Vector2 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(Vector2[], ref Matrix, Vector4[]) Transforms an array of 2D vectors by the given Matrix . Declaration public static void Transform(Vector2[] source, ref Matrix transform, Vector4[] destination) Parameters Type Name Description Vector2 [] source The array of vectors to transform. Matrix transform The transformation Matrix . Vector4 [] destination The array for which the transformed vectors are stored. | Improve this Doc View Source Transform(Vector2[], ref Quaternion, Vector2[]) Transforms an array of vectors by the given Quaternion rotation. Declaration public static void Transform(Vector2[] source, ref Quaternion rotation, Vector2[] destination) Parameters Type Name Description Vector2 [] source The array of vectors to transform. Quaternion rotation The Quaternion rotation to apply. Vector2 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . | Improve this Doc View Source TransformCoordinate(Vector2, Matrix) Performs a coordinate transformation using the given Matrix . Declaration public static Vector2 TransformCoordinate(Vector2 coordinate, Matrix transform) Parameters Type Name Description Vector2 coordinate The coordinate vector to transform. Matrix transform The transformation Matrix . Returns Type Description Vector2 The transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformCoordinate(ref Vector2, ref Matrix, out Vector2) Performs a coordinate transformation using the given Matrix . Declaration public static void TransformCoordinate(ref Vector2 coordinate, ref Matrix transform, out Vector2 result) Parameters Type Name Description Vector2 coordinate The coordinate vector to transform. Matrix transform The transformation Matrix . Vector2 result When the method completes, contains the transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformCoordinate(Vector2[], ref Matrix, Vector2[]) Performs a coordinate transformation on an array of vectors using the given Matrix . Declaration public static void TransformCoordinate(Vector2[] source, ref Matrix transform, Vector2[] destination) Parameters Type Name Description Vector2 [] source The array of coordinate vectors to transform. Matrix transform The transformation Matrix . Vector2 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformNormal(Vector2, Matrix) Performs a normal transformation using the given Matrix . Declaration public static Vector2 TransformNormal(Vector2 normal, Matrix transform) Parameters Type Name Description Vector2 normal The normal vector to transform. Matrix transform The transformation Matrix . Returns Type Description Vector2 The transformed normal. Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. | Improve this Doc View Source TransformNormal(ref Vector2, ref Matrix, out Vector2) Performs a normal transformation using the given Matrix . Declaration public static void TransformNormal(ref Vector2 normal, ref Matrix transform, out Vector2 result) Parameters Type Name Description Vector2 normal The normal vector to transform. Matrix transform The transformation Matrix . Vector2 result When the method completes, contains the transformed normal. Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. | Improve this Doc View Source TransformNormal(Vector2[], ref Matrix, Vector2[]) Performs a normal transformation on an array of vectors using the given Matrix . Declaration public static void TransformNormal(Vector2[] source, ref Matrix transform, Vector2[] destination) Parameters Type Name Description Vector2 [] source The array of normal vectors to transform. Matrix transform The transformation Matrix . Vector2 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. Operators | Improve this Doc View Source Addition(Vector2, Vector2) Adds two vectors. Declaration public static Vector2 operator +(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to add. Vector2 right The second vector to add. Returns Type Description Vector2 The sum of the two vectors. | Improve this Doc View Source Addition(Vector2, Single) Perform a component-wise addition Declaration public static Vector2 operator +(Vector2 value, float scalar) Parameters Type Name Description Vector2 value The input vector. System.Single scalar The scalar value to be added on elements Returns Type Description Vector2 The vector with added scalar for each element. | Improve this Doc View Source Addition(Single, Vector2) Perform a component-wise addition Declaration public static Vector2 operator +(float scalar, Vector2 value) Parameters Type Name Description System.Single scalar The scalar value to be added on elements Vector2 value The input vector. Returns Type Description Vector2 The vector with added scalar for each element. | Improve this Doc View Source Division(Vector2, Vector2) Scales a vector by the given value. Declaration public static Vector2 operator /(Vector2 value, Vector2 scale) Parameters Type Name Description Vector2 value The vector to scale. Vector2 scale The amount by which to scale the vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Division(Vector2, Single) Scales a vector by the given value. Declaration public static Vector2 operator /(Vector2 value, float scale) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Division(Single, Vector2) Scales a vector by the given value. Declaration public static Vector2 operator /(float scale, Vector2 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector2 value The vector to scale. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Equality(Vector2, Vector2) Tests for equality between two objects. Declaration public static bool operator ==(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first value to compare. Vector2 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Vector2 to Vector3) Performs an explicit conversion from Vector2 to Vector3 . Declaration public static explicit operator Vector3(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Explicit(Vector2 to Vector4) Performs an explicit conversion from Vector2 to Vector4 . Declaration public static explicit operator Vector4(Vector2 value) Parameters Type Name Description Vector2 value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Inequality(Vector2, Vector2) Tests for inequality between two objects. Declaration public static bool operator !=(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first value to compare. Vector2 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies a vector with another by performing component-wise multiplication equivalent to Multiply(ref Vector2, ref Vector2, out Vector2) . Declaration public static Vector2 operator *(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to multiply. Vector2 right The second vector to multiply. Returns Type Description Vector2 The multiplication of the two vectors. | Improve this Doc View Source Multiply(Vector2, Single) Scales a vector by the given value. Declaration public static Vector2 operator *(Vector2 value, float scale) Parameters Type Name Description Vector2 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(Single, Vector2) Scales a vector by the given value. Declaration public static Vector2 operator *(float scale, Vector2 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector2 value The vector to scale. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Subtraction(Vector2, Vector2) Subtracts two vectors. Declaration public static Vector2 operator -(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to subtract. Vector2 right The second vector to subtract. Returns Type Description Vector2 The difference of the two vectors. | Improve this Doc View Source Subtraction(Vector2, Single) Perform a component-wise subtraction Declaration public static Vector2 operator -(Vector2 value, float scalar) Parameters Type Name Description Vector2 value The input vector. System.Single scalar The scalar value to be subtraced from elements Returns Type Description Vector2 The vector with subtraced scalar from each element. | Improve this Doc View Source Subtraction(Single, Vector2) Perform a component-wise subtraction Declaration public static Vector2 operator -(float scalar, Vector2 value) Parameters Type Name Description System.Single scalar The scalar value to be subtraced from elements Vector2 value The input vector. Returns Type Description Vector2 The vector with subtraced scalar from each element. | Improve this Doc View Source UnaryNegation(Vector2) Reverses the direction of a given vector. Declaration public static Vector2 operator -(Vector2 value) Parameters Type Name Description Vector2 value The vector to negate. Returns Type Description Vector2 A vector facing in the opposite direction. | Improve this Doc View Source UnaryPlus(Vector2) Assert a vector (return it unchanged). Declaration public static Vector2 operator +(Vector2 value) Parameters Type Name Description Vector2 value The vector to assert (unchanged). Returns Type Description Vector2 The asserted (unchanged) vector. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Vector2i.html": {
    "href": "api/Fluint.Layer.Mathematics.Vector2i.html",
    "title": "Struct Vector2i | Fluint",
    "keywords": "Struct Vector2i Implements IEquatable < Vector2i > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Vector2i : IEquatable<Vector2i> Constructors | Improve this Doc View Source Vector2i(Int32) Declaration public Vector2i(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source Vector2i(Int32, Int32) Declaration public Vector2i(int x, int y) Parameters Type Name Description System.Int32 x System.Int32 y Fields | Improve this Doc View Source X Declaration public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y Declaration public int Y Field Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Vector2i) Declaration public bool Equals(Vector2i other) Parameters Type Name Description Vector2i other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Equality(Vector2i, Vector2i) Declaration public static bool operator ==(Vector2i left, Vector2i right) Parameters Type Name Description Vector2i left Vector2i right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Vector2i, Vector2i) Declaration public static bool operator !=(Vector2i left, Vector2i right) Parameters Type Name Description Vector2i left Vector2i right Returns Type Description System.Boolean Implements IEquatable<>"
  },
  "api/Fluint.Layer.Mathematics.Vector3.html": {
    "href": "api/Fluint.Layer.Mathematics.Vector3.html",
    "title": "Struct Vector3 | Fluint",
    "keywords": "Struct Vector3 Represents a three dimensional mathematical vector. Implements IEquatable < Vector3 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Vector3 : IEquatable<Vector3>, IFormattable Constructors | Improve this Doc View Source Vector3(Vector2, Single) Initializes a new instance of the Vector3 struct. Declaration public Vector3(Vector2 value, float z) Parameters Type Name Description Vector2 value A vector containing the values with which to initialize the X and Y components. System.Single z Initial value for the Z component of the vector. | Improve this Doc View Source Vector3(Single) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Vector3(Single, Single, Single) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float x, float y, float z) Parameters Type Name Description System.Single x Initial value for the X component of the vector. System.Single y Initial value for the Y component of the vector. System.Single z Initial value for the Z component of the vector. | Improve this Doc View Source Vector3(Single[]) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements. Fields | Improve this Doc View Source BackwardLH A unit Vector3 designating backward in a left-handed coordinate system (0, 0, -1). Declaration public static readonly Vector3 BackwardLH Field Value Type Description Vector3 | Improve this Doc View Source BackwardRH A unit Vector3 designating backward in a right-handed coordinate system (0, 0, 1). Declaration public static readonly Vector3 BackwardRH Field Value Type Description Vector3 | Improve this Doc View Source Down A unit Vector3 designating down (0, -1, 0). Declaration public static readonly Vector3 Down Field Value Type Description Vector3 | Improve this Doc View Source ForwardLH A unit Vector3 designating forward in a left-handed coordinate system (0, 0, 1). Declaration public static readonly Vector3 ForwardLH Field Value Type Description Vector3 | Improve this Doc View Source ForwardRH A unit Vector3 designating forward in a right-handed coordinate system (0, 0, -1). Declaration public static readonly Vector3 ForwardRH Field Value Type Description Vector3 | Improve this Doc View Source Left A unit Vector3 designating left (-1, 0, 0). Declaration public static readonly Vector3 Left Field Value Type Description Vector3 | Improve this Doc View Source One A Vector3 with all of its components set to one. Declaration public static readonly Vector3 One Field Value Type Description Vector3 | Improve this Doc View Source Right A unit Vector3 designating right (1, 0, 0). Declaration public static readonly Vector3 Right Field Value Type Description Vector3 | Improve this Doc View Source SizeInBytes The size of the Vector3 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitX The X unit Vector3 (1, 0, 0). Declaration public static readonly Vector3 UnitX Field Value Type Description Vector3 | Improve this Doc View Source UnitY The Y unit Vector3 (0, 1, 0). Declaration public static readonly Vector3 UnitY Field Value Type Description Vector3 | Improve this Doc View Source UnitZ The Z unit Vector3 (0, 0, 1). Declaration public static readonly Vector3 UnitZ Field Value Type Description Vector3 | Improve this Doc View Source Up A unit Vector3 designating up (0, 1, 0). Declaration public static readonly Vector3 Up Field Value Type Description Vector3 | Improve this Doc View Source X The X component of the vector. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the vector. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The Z component of the vector. Declaration public float Z Field Value Type Description System.Single | Improve this Doc View Source Zero A Vector3 with all of its components set to zero. Declaration public static readonly Vector3 Zero Field Value Type Description Vector3 Properties | Improve this Doc View Source IsNormalized Gets a value indicting whether this instance is normalized. Declaration public bool IsNormalized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsZero Gets a value indicting whether this vector is zero Declaration public bool IsZero { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component. Property Value Type Description System.Single The value of the X, Y, or Z component, depending on the index. Methods | Improve this Doc View Source Abs(Vector3) Returns per component absolute value of a vector Declaration public static Vector3 Abs(Vector3 value) Parameters Type Name Description Vector3 value Input vector Returns Type Description Vector3 A vector with each component being the absolute value of the input component | Improve this Doc View Source Abs(ref Vector3, out Vector3) Returns per component absolute value of a vector Declaration public static void Abs(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value Input vector Vector3 result When the method completes, contains a vector with each component being the absolute value of the input component | Improve this Doc View Source Add(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 Add(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to add. Vector3 right The second vector to add. Returns Type Description Vector3 The sum of the two vectors. | Improve this Doc View Source Add(Vector3, Single) Perform a component-wise addition Declaration public static Vector3 Add(Vector3 left, float right) Parameters Type Name Description Vector3 left The input vector System.Single right The scalar value to be added to elements Returns Type Description Vector3 The vector with added scalar for each element. | Improve this Doc View Source Add(ref Vector3, ref Vector3, out Vector3) Adds two vectors. Declaration public static void Add(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left The first vector to add. Vector3 right The second vector to add. Vector3 result When the method completes, contains the sum of the two vectors. | Improve this Doc View Source Add(ref Vector3, ref Single, out Vector3) Perform a component-wise addition Declaration public static void Add(ref Vector3 left, ref float right, out Vector3 result) Parameters Type Name Description Vector3 left The input vector System.Single right The scalar value to be added to elements Vector3 result The vector with added scalar for each element. | Improve this Doc View Source Barycentric(Vector3, Vector3, Vector3, Single, Single) Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle. Declaration public static Vector3 Barycentric(Vector3 value1, Vector3 value2, Vector3 value3, float amount1, float amount2) Parameters Type Name Description Vector3 value1 A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle. Vector3 value2 A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle. Vector3 value3 A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Returns Type Description Vector3 A new Vector3 containing the 3D Cartesian coordinates of the specified point. | Improve this Doc View Source Barycentric(ref Vector3, ref Vector3, ref Vector3, Single, Single, out Vector3) Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle. Declaration public static void Barycentric(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, float amount1, float amount2, out Vector3 result) Parameters Type Name Description Vector3 value1 A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle. Vector3 value2 A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle. Vector3 value3 A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Vector3 result When the method completes, contains the 3D Cartesian coordinates of the specified point. | Improve this Doc View Source CatmullRom(Vector3, Vector3, Vector3, Vector3, Single) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static Vector3 CatmullRom(Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount) Parameters Type Name Description Vector3 value1 The first position in the interpolation. Vector3 value2 The second position in the interpolation. Vector3 value3 The third position in the interpolation. Vector3 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Returns Type Description Vector3 A vector that is the result of the Catmull-Rom interpolation. | Improve this Doc View Source CatmullRom(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static void CatmullRom(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, ref Vector3 value4, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first position in the interpolation. Vector3 value2 The second position in the interpolation. Vector3 value3 The third position in the interpolation. Vector3 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Vector3 result When the method completes, contains the result of the Catmull-Rom interpolation. | Improve this Doc View Source Clamp(Vector3, Vector3, Vector3) Restricts a value to be within a specified range. Declaration public static Vector3 Clamp(Vector3 value, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value The value to clamp. Vector3 min The minimum value. Vector3 max The maximum value. Returns Type Description Vector3 The clamped value. | Improve this Doc View Source Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Vector3 value, ref Vector3 min, ref Vector3 max, out Vector3 result) Parameters Type Name Description Vector3 value The value to clamp. Vector3 min The minimum value. Vector3 max The maximum value. Vector3 result When the method completes, contains the clamped value. | Improve this Doc View Source Cross(Vector3, Vector3) Calculates the cross product of two vectors. Declaration public static Vector3 Cross(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. Returns Type Description Vector3 The cross product of the two vectors. | Improve this Doc View Source Cross(ref Vector3, ref Vector3, out Vector3) Calculates the cross product of two vectors. Declaration public static void Cross(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. Vector3 result When the method completes, contains he cross product of the two vectors. | Improve this Doc View Source Distance(Vector3, Vector3) Calculates the distance between two vectors. Declaration public static float Distance(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description System.Single The distance between the two vectors. Remarks DistanceSquared(Vector3, Vector3) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source Distance(ref Vector3, ref Vector3, out Single) Calculates the distance between two vectors. Declaration public static void Distance(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single result When the method completes, contains the distance between the two vectors. Remarks DistanceSquared(ref Vector3, ref Vector3, out Single) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source DistanceSquared(Vector3, Vector3) Calculates the squared distance between two vectors. Declaration public static float DistanceSquared(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description System.Single The squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source DistanceSquared(ref Vector3, ref Vector3, out Single) Calculates the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single result When the method completes, contains the squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source Divide(Vector3, Single) Scales a vector by the given value. Declaration public static Vector3 Divide(Vector3 value, float scale) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Divide(ref Vector3, Single, out Vector3) Scales a vector by the given value. Declaration public static void Divide(ref Vector3 value, float scale, out Vector3 result) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector3 result When the method completes, contains the scaled vector. | Improve this Doc View Source Divide(Single, Vector3) Scales a vector by the given value. Declaration public static Vector3 Divide(float scale, Vector3 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector3 value The vector to scale. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Divide(Single, ref Vector3, out Vector3) Scales a vector by the given value. Declaration public static void Divide(float scale, ref Vector3 value, out Vector3 result) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector3 value The vector to scale. Vector3 result When the method completes, contains the scaled vector. | Improve this Doc View Source Dot(Vector3, Vector3) Calculates the dot product of two vectors. Declaration public static float Dot(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. Returns Type Description System.Single The dot product of the two vectors. | Improve this Doc View Source Dot(ref Vector3, ref Vector3, out Single) Calculates the dot product of two vectors. Declaration public static void Dot(ref Vector3 left, ref Vector3 right, out float result) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. System.Single result When the method completes, contains the dot product of the two vectors. | Improve this Doc View Source Equals(Vector3) Determines whether the specified Vector3 is equal to this instance. Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other The Vector3 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Vector3) Determines whether the specified Vector3 is equal to this instance. Declaration public bool Equals(ref Vector3 other) Parameters Type Name Description Vector3 other The Vector3 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector3 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Hermite(Vector3, Vector3, Vector3, Vector3, Single) Performs a Hermite spline interpolation. Declaration public static Vector3 Hermite(Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount) Parameters Type Name Description Vector3 value1 First source position vector. Vector3 tangent1 First source tangent vector. Vector3 value2 Second source position vector. Vector3 tangent2 Second source tangent vector. System.Single amount Weighting factor. Returns Type Description Vector3 The result of the Hermite spline interpolation. | Improve this Doc View Source Hermite(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3) Performs a Hermite spline interpolation. Declaration public static void Hermite(ref Vector3 value1, ref Vector3 tangent1, ref Vector3 value2, ref Vector3 tangent2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 First source position vector. Vector3 tangent1 First source tangent vector. Vector3 value2 Second source position vector. Vector3 tangent2 Second source tangent vector. System.Single amount Weighting factor. Vector3 result When the method completes, contains the result of the Hermite spline interpolation. | Improve this Doc View Source Length() Calculates the length of the vector. Declaration public float Length() Returns Type Description System.Single The length of the vector. Remarks LengthSquared() may be preferred when only the relative length is needed and speed is of the essence. | Improve this Doc View Source LengthSquared() Calculates the squared length of the vector. Declaration public float LengthSquared() Returns Type Description System.Single The squared length of the vector. Remarks This method may be preferred to Length() when only a relative length is needed and speed is of the essence. | Improve this Doc View Source Lerp(Vector3, Vector3, Single) Performs a linear interpolation between two vectors. Declaration public static Vector3 Lerp(Vector3 start, Vector3 end, float amount) Parameters Type Name Description Vector3 start Start vector. Vector3 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector3 The linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Vector3, ref Vector3, Single, out Vector3) Performs a linear interpolation between two vectors. Declaration public static void Lerp(ref Vector3 start, ref Vector3 end, float amount, out Vector3 result) Parameters Type Name Description Vector3 start Start vector. Vector3 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector3 result When the method completes, contains the linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Vector3, Vector3) Returns a vector containing the largest components of the specified vectors. Declaration public static Vector3 Max(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 A vector containing the largest components of the source vectors. | Improve this Doc View Source Max(ref Vector3, ref Vector3, out Vector3) Returns a vector containing the largest components of the specified vectors. Declaration public static void Max(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Vector3 result When the method completes, contains an new vector composed of the largest components of the source vectors. | Improve this Doc View Source Min(Vector3, Vector3) Returns a vector containing the smallest components of the specified vectors. Declaration public static Vector3 Min(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 A vector containing the smallest components of the source vectors. | Improve this Doc View Source Min(ref Vector3, ref Vector3, out Vector3) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Min(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Vector3 result When the method completes, contains an new vector composed of the smallest components of the source vectors. | Improve this Doc View Source Multiply(Vector3, Vector3) Multiply a vector with another by performing component-wise multiplication. Declaration public static Vector3 Multiply(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to Multiply. Vector3 right The second vector to multiply. Returns Type Description Vector3 The multiplied vector. | Improve this Doc View Source Multiply(Vector3, Single) Scales a vector by the given value. Declaration public static Vector3 Multiply(Vector3 value, float scale) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(ref Vector3, ref Vector3, out Vector3) Multiply a vector with another by performing component-wise multiplication. Declaration public static void Multiply(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left The first vector to multiply. Vector3 right The second vector to multiply. Vector3 result When the method completes, contains the multiplied vector. | Improve this Doc View Source Multiply(ref Vector3, Single, out Vector3) Scales a vector by the given value. Declaration public static void Multiply(ref Vector3 value, float scale, out Vector3 result) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector3 result When the method completes, contains the scaled vector. | Improve this Doc View Source NearEqual(Vector3, Vector3, Vector3) Tests whether one 3D vector is near another 3D vector. Declaration public static bool NearEqual(Vector3 left, Vector3 right, Vector3 epsilon) Parameters Type Name Description Vector3 left The left vector. Vector3 right The right vector. Vector3 epsilon The epsilon. Returns Type Description System.Boolean true if left and right are near another 3D, false otherwise | Improve this Doc View Source NearEqual(ref Vector3, ref Vector3, ref Vector3) Tests whether one 3D vector is near another 3D vector. Declaration public static bool NearEqual(ref Vector3 left, ref Vector3 right, ref Vector3 epsilon) Parameters Type Name Description Vector3 left The left vector. Vector3 right The right vector. Vector3 epsilon The epsilon. Returns Type Description System.Boolean true if left and right are near another 3D, false otherwise | Improve this Doc View Source Negate(Vector3) Reverses the direction of a given vector. Declaration public static Vector3 Negate(Vector3 value) Parameters Type Name Description Vector3 value The vector to negate. Returns Type Description Vector3 A vector facing in the opposite direction. | Improve this Doc View Source Negate(ref Vector3, out Vector3) Reverses the direction of a given vector. Declaration public static void Negate(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value The vector to negate. Vector3 result When the method completes, contains a vector facing in the opposite direction. | Improve this Doc View Source Normalize() Converts the vector into a unit vector. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector3) Converts the vector into a unit vector. Declaration public static Vector3 Normalize(Vector3 value) Parameters Type Name Description Vector3 value The vector to normalize. Returns Type Description Vector3 The normalized vector. | Improve this Doc View Source Normalize(ref Vector3, out Vector3) Converts the vector into a unit vector. Declaration public static void Normalize(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value The vector to normalize. Vector3 result When the method completes, contains the normalized vector. | Improve this Doc View Source Orthogonalize(Vector3[], Vector3[]) Orthogonalizes a list of vectors. Declaration public static void Orthogonalize(Vector3[] destination, params Vector3[] source) Parameters Type Name Description Vector3 [] destination The list of orthogonalized vectors. Vector3 [] source The list of vectors to orthogonalize. Remarks Orthogonalization is the process of making all vectors orthogonal to each other. This means that any given vector in the list will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source Orthonormalize(Vector3[], Vector3[]) Orthonormalizes a list of vectors. Declaration public static void Orthonormalize(Vector3[] destination, params Vector3[] source) Parameters Type Name Description Vector3 [] destination The list of orthonormalized vectors. Vector3 [] source The list of vectors to orthonormalize. Remarks Orthonormalization is the process of making all vectors orthogonal to each other and making all vectors of unit length. This means that any given vector will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source Project(Vector3, Single, Single, Single, Single, Single, Single, Matrix) Projects a 3D vector from object space into screen space. Declaration public static Vector3 Project(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix worldViewProjection) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X position of the viewport. System.Single y The Y position of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix worldViewProjection The combined world-view-projection matrix. Returns Type Description Vector3 The vector in screen space. | Improve this Doc View Source Project(ref Vector3, Single, Single, Single, Single, Single, Single, ref Matrix, out Vector3) Projects a 3D vector from object space into screen space. Declaration public static void Project(ref Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, ref Matrix worldViewProjection, out Vector3 result) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X position of the viewport. System.Single y The Y position of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix worldViewProjection The combined world-view-projection matrix. Vector3 result When the method completes, contains the vector in screen space. | Improve this Doc View Source Reflect(Vector3, Vector3) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static Vector3 Reflect(Vector3 vector, Vector3 normal) Parameters Type Name Description Vector3 vector The source vector. Vector3 normal Normal of the surface. Returns Type Description Vector3 The reflected vector. Remarks Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it. | Improve this Doc View Source Reflect(ref Vector3, ref Vector3, out Vector3) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static void Reflect(ref Vector3 vector, ref Vector3 normal, out Vector3 result) Parameters Type Name Description Vector3 vector The source vector. Vector3 normal Normal of the surface. Vector3 result When the method completes, contains the reflected vector. Remarks Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it. | Improve this Doc View Source SmoothStep(Vector3, Vector3, Single) Performs a cubic interpolation between two vectors. Declaration public static Vector3 SmoothStep(Vector3 start, Vector3 end, float amount) Parameters Type Name Description Vector3 start Start vector. Vector3 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector3 The cubic interpolation of the two vectors. | Improve this Doc View Source SmoothStep(ref Vector3, ref Vector3, Single, out Vector3) Performs a cubic interpolation between two vectors. Declaration public static void SmoothStep(ref Vector3 start, ref Vector3 end, float amount, out Vector3 result) Parameters Type Name Description Vector3 start Start vector. Vector3 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector3 result When the method completes, contains the cubic interpolation of the two vectors. | Improve this Doc View Source Subtract(Vector3, Vector3) Subtracts two vectors. Declaration public static Vector3 Subtract(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to subtract. Vector3 right The second vector to subtract. Returns Type Description Vector3 The difference of the two vectors. | Improve this Doc View Source Subtract(Vector3, Single) Perform a component-wise subtraction Declaration public static Vector3 Subtract(Vector3 left, float right) Parameters Type Name Description Vector3 left The input vector System.Single right The scalar value to be subtraced from elements Returns Type Description Vector3 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Vector3, ref Vector3, out Vector3) Subtracts two vectors. Declaration public static void Subtract(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left The first vector to subtract. Vector3 right The second vector to subtract. Vector3 result When the method completes, contains the difference of the two vectors. | Improve this Doc View Source Subtract(ref Vector3, ref Single, out Vector3) Perform a component-wise subtraction Declaration public static void Subtract(ref Vector3 left, ref float right, out Vector3 result) Parameters Type Name Description Vector3 left The input vector System.Single right The scalar value to be subtraced from elements Vector3 result The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(Single, Vector3) Perform a component-wise subtraction Declaration public static Vector3 Subtract(float left, Vector3 right) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector3 right The input vector. Returns Type Description Vector3 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Single, ref Vector3, out Vector3) Perform a component-wise subtraction Declaration public static void Subtract(ref float left, ref Vector3 right, out Vector3 result) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector3 right The input vector. Vector3 result The vector with subtracted scalar for each element. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public float[] ToArray() Returns Type Description System.Single [] A three-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transform(Vector3, Matrix) Transforms a 3D vector by the given Matrix . Declaration public static Vector4 Transform(Vector3 vector, Matrix transform) Parameters Type Name Description Vector3 vector The source vector. Matrix transform The transformation Matrix . Returns Type Description Vector4 The transformed Vector4 . | Improve this Doc View Source Transform(Vector3, Matrix3x3) Transforms a 3D vector by the given Matrix3x3 . Declaration public static Vector3 Transform(Vector3 vector, Matrix3x3 transform) Parameters Type Name Description Vector3 vector The source vector. Matrix3x3 transform The transformation Matrix3x3 . Returns Type Description Vector3 The transformed Vector3 . | Improve this Doc View Source Transform(Vector3, Quaternion) Transforms a 3D vector by the given Quaternion rotation. Declaration public static Vector3 Transform(Vector3 vector, Quaternion rotation) Parameters Type Name Description Vector3 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Returns Type Description Vector3 The transformed Vector4 . | Improve this Doc View Source Transform(ref Vector3, ref Matrix, out Vector3) Transforms a 3D vector by the given Matrix . Declaration public static void Transform(ref Vector3 vector, ref Matrix transform, out Vector3 result) Parameters Type Name Description Vector3 vector The source vector. Matrix transform The transformation Matrix . Vector3 result When the method completes, contains the transformed Vector3 . | Improve this Doc View Source Transform(ref Vector3, ref Matrix, out Vector4) Transforms a 3D vector by the given Matrix . Declaration public static void Transform(ref Vector3 vector, ref Matrix transform, out Vector4 result) Parameters Type Name Description Vector3 vector The source vector. Matrix transform The transformation Matrix . Vector4 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(ref Vector3, ref Matrix3x3, out Vector3) Transforms a 3D vector by the given Matrix3x3 . Declaration public static void Transform(ref Vector3 vector, ref Matrix3x3 transform, out Vector3 result) Parameters Type Name Description Vector3 vector The source vector. Matrix3x3 transform The transformation Matrix3x3 . Vector3 result When the method completes, contains the transformed Vector3 . | Improve this Doc View Source Transform(ref Vector3, ref Quaternion, out Vector3) Transforms a 3D vector by the given Quaternion rotation. Declaration public static void Transform(ref Vector3 vector, ref Quaternion rotation, out Vector3 result) Parameters Type Name Description Vector3 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Vector3 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(Vector3[], ref Matrix, Vector4[]) Transforms an array of 3D vectors by the given Matrix . Declaration public static void Transform(Vector3[] source, ref Matrix transform, Vector4[] destination) Parameters Type Name Description Vector3 [] source The array of vectors to transform. Matrix transform The transformation Matrix . Vector4 [] destination The array for which the transformed vectors are stored. | Improve this Doc View Source Transform(Vector3[], ref Quaternion, Vector3[]) Transforms an array of vectors by the given Quaternion rotation. Declaration public static void Transform(Vector3[] source, ref Quaternion rotation, Vector3[] destination) Parameters Type Name Description Vector3 [] source The array of vectors to transform. Quaternion rotation The Quaternion rotation to apply. Vector3 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . | Improve this Doc View Source TransformCoordinate(Vector3, Matrix) Performs a coordinate transformation using the given Matrix . Declaration public static Vector3 TransformCoordinate(Vector3 coordinate, Matrix transform) Parameters Type Name Description Vector3 coordinate The coordinate vector to transform. Matrix transform The transformation Matrix . Returns Type Description Vector3 The transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformCoordinate(ref Vector3, ref Matrix, out Vector3) Performs a coordinate transformation using the given Matrix . Declaration public static void TransformCoordinate(ref Vector3 coordinate, ref Matrix transform, out Vector3 result) Parameters Type Name Description Vector3 coordinate The coordinate vector to transform. Matrix transform The transformation Matrix . Vector3 result When the method completes, contains the transformed coordinates. Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformCoordinate(Vector3[], ref Matrix, Vector3[]) Performs a coordinate transformation on an array of vectors using the given Matrix . Declaration public static void TransformCoordinate(Vector3[] source, ref Matrix transform, Vector3[] destination) Parameters Type Name Description Vector3 [] source The array of coordinate vectors to transform. Matrix transform The transformation Matrix . Vector3 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . Remarks A coordinate transform performs the transformation with the assumption that the w component is one. The four dimensional vector obtained from the transformation operation has each component in the vector divided by the w component. This forces the w component to be one and therefore makes the vector homogeneous. The homogeneous vector is often preferred when working with coordinates as the w component can safely be ignored. | Improve this Doc View Source TransformNormal(Vector3, Matrix) Performs a normal transformation using the given Matrix . Declaration public static Vector3 TransformNormal(Vector3 normal, Matrix transform) Parameters Type Name Description Vector3 normal The normal vector to transform. Matrix transform The transformation Matrix . Returns Type Description Vector3 The transformed normal. Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. | Improve this Doc View Source TransformNormal(ref Vector3, ref Matrix, out Vector3) Performs a normal transformation using the given Matrix . Declaration public static void TransformNormal(ref Vector3 normal, ref Matrix transform, out Vector3 result) Parameters Type Name Description Vector3 normal The normal vector to transform. Matrix transform The transformation Matrix . Vector3 result When the method completes, contains the transformed normal. Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. | Improve this Doc View Source TransformNormal(Vector3[], ref Matrix, Vector3[]) Performs a normal transformation on an array of vectors using the given Matrix . Declaration public static void TransformNormal(Vector3[] source, ref Matrix transform, Vector3[] destination) Parameters Type Name Description Vector3 [] source The array of normal vectors to transform. Matrix transform The transformation Matrix . Vector3 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . Remarks A normal transform performs the transformation with the assumption that the w component is zero. This causes the fourth row and fourth column of the matrix to be unused. The end result is a vector that is not translated, but all other transformation properties apply. This is often preferred for normal vectors as normals purely represent direction rather than location because normal vectors should not be translated. | Improve this Doc View Source Unproject(Vector3, Single, Single, Single, Single, Single, Single, Matrix) Projects a 3D vector from screen space into object space. Declaration public static Vector3 Unproject(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix worldViewProjection) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X position of the viewport. System.Single y The Y position of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix worldViewProjection The combined world-view-projection matrix. Returns Type Description Vector3 The vector in object space. | Improve this Doc View Source Unproject(ref Vector3, Single, Single, Single, Single, Single, Single, ref Matrix, out Vector3) Projects a 3D vector from screen space into object space. Declaration public static void Unproject(ref Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, ref Matrix worldViewProjection, out Vector3 result) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X position of the viewport. System.Single y The Y position of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix worldViewProjection The combined world-view-projection matrix. Vector3 result When the method completes, contains the vector in object space. Operators | Improve this Doc View Source Addition(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 operator +(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to add. Vector3 right The second vector to add. Returns Type Description Vector3 The sum of the two vectors. | Improve this Doc View Source Addition(Vector3, Single) Perform a component-wise addition Declaration public static Vector3 operator +(Vector3 value, float scalar) Parameters Type Name Description Vector3 value The input vector. System.Single scalar The scalar value to be added on elements Returns Type Description Vector3 The vector with added scalar for each element. | Improve this Doc View Source Addition(Single, Vector3) Perform a component-wise addition Declaration public static Vector3 operator +(float scalar, Vector3 value) Parameters Type Name Description System.Single scalar The scalar value to be added on elements Vector3 value The input vector. Returns Type Description Vector3 The vector with added scalar for each element. | Improve this Doc View Source Division(Vector3, Vector3) Scales a vector by the given value. Declaration public static Vector3 operator /(Vector3 value, Vector3 scale) Parameters Type Name Description Vector3 value The vector to scale. Vector3 scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Division(Vector3, Single) Scales a vector by the given value. Declaration public static Vector3 operator /(Vector3 value, float scale) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Division(Single, Vector3) Scales a vector by the given value. Declaration public static Vector3 operator /(float scale, Vector3 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector3 value The vector to scale. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Equality(Vector3, Vector3) Tests for equality between two objects. Declaration public static bool operator ==(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first value to compare. Vector3 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Vector3 to Vector2) Performs an explicit conversion from Vector3 to Vector2 . Declaration public static explicit operator Vector2(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Vector3 to Vector4) Performs an explicit conversion from Vector3 to Vector4 . Declaration public static explicit operator Vector4(Vector3 value) Parameters Type Name Description Vector3 value The value. Returns Type Description Vector4 The result of the conversion. | Improve this Doc View Source Inequality(Vector3, Vector3) Tests for inequality between two objects. Declaration public static bool operator !=(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first value to compare. Vector3 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Vector3, Vector3) Multiplies a vector with another by performing component-wise multiplication equivalent to Multiply(ref Vector3, ref Vector3, out Vector3) . Declaration public static Vector3 operator *(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to multiply. Vector3 right The second vector to multiply. Returns Type Description Vector3 The multiplication of the two vectors. | Improve this Doc View Source Multiply(Vector3, Single) Scales a vector by the given value. Declaration public static Vector3 operator *(Vector3 value, float scale) Parameters Type Name Description Vector3 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(Single, Vector3) Scales a vector by the given value. Declaration public static Vector3 operator *(float scale, Vector3 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector3 value The vector to scale. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Subtraction(Vector3, Vector3) Subtracts two vectors. Declaration public static Vector3 operator -(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to subtract. Vector3 right The second vector to subtract. Returns Type Description Vector3 The difference of the two vectors. | Improve this Doc View Source Subtraction(Vector3, Single) Perform a component-wise subtraction Declaration public static Vector3 operator -(Vector3 value, float scalar) Parameters Type Name Description Vector3 value The input vector. System.Single scalar The scalar value to be subtraced from elements Returns Type Description Vector3 The vector with added scalar from each element. | Improve this Doc View Source Subtraction(Single, Vector3) Perform a component-wise subtraction Declaration public static Vector3 operator -(float scalar, Vector3 value) Parameters Type Name Description System.Single scalar The scalar value to be subtraced from elements Vector3 value The input vector. Returns Type Description Vector3 The vector with subtraced scalar from each element. | Improve this Doc View Source UnaryNegation(Vector3) Reverses the direction of a given vector. Declaration public static Vector3 operator -(Vector3 value) Parameters Type Name Description Vector3 value The vector to negate. Returns Type Description Vector3 A vector facing in the opposite direction. | Improve this Doc View Source UnaryPlus(Vector3) Assert a vector (return it unchanged). Declaration public static Vector3 operator +(Vector3 value) Parameters Type Name Description Vector3 value The vector to assert (unchanged). Returns Type Description Vector3 The asserted (unchanged) vector. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Vector4.html": {
    "href": "api/Fluint.Layer.Mathematics.Vector4.html",
    "title": "Struct Vector4 | Fluint",
    "keywords": "Struct Vector4 Represents a four dimensional mathematical vector. Implements IEquatable < Vector4 > IFormattable Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Vector4 : IEquatable<Vector4>, IFormattable Constructors | Improve this Doc View Source Vector4(Vector2, Single, Single) Initializes a new instance of the Vector4 struct. Declaration public Vector4(Vector2 value, float z, float w) Parameters Type Name Description Vector2 value A vector containing the values with which to initialize the X and Y components. System.Single z Initial value for the Z component of the vector. System.Single w Initial value for the W component of the vector. | Improve this Doc View Source Vector4(Vector3, Single) Initializes a new instance of the Vector4 struct. Declaration public Vector4(Vector3 value, float w) Parameters Type Name Description Vector3 value A vector containing the values with which to initialize the X, Y, and Z components. System.Single w Initial value for the W component of the vector. | Improve this Doc View Source Vector4(Single) Initializes a new instance of the Vector4 struct. Declaration public Vector4(float value) Parameters Type Name Description System.Single value The value that will be assigned to all components. | Improve this Doc View Source Vector4(Single, Single, Single, Single) Initializes a new instance of the Vector4 struct. Declaration public Vector4(float x, float y, float z, float w) Parameters Type Name Description System.Single x Initial value for the X component of the vector. System.Single y Initial value for the Y component of the vector. System.Single z Initial value for the Z component of the vector. System.Single w Initial value for the W component of the vector. | Improve this Doc View Source Vector4(Single[]) Initializes a new instance of the Vector4 struct. Declaration public Vector4(float[] values) Parameters Type Name Description System.Single [] values The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements. Fields | Improve this Doc View Source One A Vector4 with all of its components set to one. Declaration public static readonly Vector4 One Field Value Type Description Vector4 | Improve this Doc View Source SizeInBytes The size of the Vector4 type, in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitW The W unit Vector4 (0, 0, 0, 1). Declaration public static readonly Vector4 UnitW Field Value Type Description Vector4 | Improve this Doc View Source UnitX The X unit Vector4 (1, 0, 0, 0). Declaration public static readonly Vector4 UnitX Field Value Type Description Vector4 | Improve this Doc View Source UnitY The Y unit Vector4 (0, 1, 0, 0). Declaration public static readonly Vector4 UnitY Field Value Type Description Vector4 | Improve this Doc View Source UnitZ The Z unit Vector4 (0, 0, 1, 0). Declaration public static readonly Vector4 UnitZ Field Value Type Description Vector4 | Improve this Doc View Source W The W component of the vector. Declaration public float W Field Value Type Description System.Single | Improve this Doc View Source X The X component of the vector. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the vector. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The Z component of the vector. Declaration public float Z Field Value Type Description System.Single | Improve this Doc View Source Zero A Vector4 with all of its components set to zero. Declaration public static readonly Vector4 Zero Field Value Type Description Vector4 Properties | Improve this Doc View Source IsNormalized Gets a value indicting whether this instance is normalized. Declaration public bool IsNormalized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsZero Gets a value indicting whether this vector is zero Declaration public bool IsZero { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component. Property Value Type Description System.Single The value of the X, Y, Z, or W component, depending on the index. Methods | Improve this Doc View Source Add(Vector4, Vector4) Adds two vectors. Declaration public static Vector4 Add(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to add. Vector4 right The second vector to add. Returns Type Description Vector4 The sum of the two vectors. | Improve this Doc View Source Add(Vector4, Single) Perform a component-wise addition Declaration public static Vector4 Add(Vector4 left, float right) Parameters Type Name Description Vector4 left The input vector System.Single right The scalar value to be added to elements Returns Type Description Vector4 The vector with added scalar for each element. | Improve this Doc View Source Add(ref Vector4, ref Vector4, out Vector4) Adds two vectors. Declaration public static void Add(ref Vector4 left, ref Vector4 right, out Vector4 result) Parameters Type Name Description Vector4 left The first vector to add. Vector4 right The second vector to add. Vector4 result When the method completes, contains the sum of the two vectors. | Improve this Doc View Source Add(ref Vector4, ref Single, out Vector4) Perform a component-wise addition Declaration public static void Add(ref Vector4 left, ref float right, out Vector4 result) Parameters Type Name Description Vector4 left The input vector System.Single right The scalar value to be added to elements Vector4 result The vector with added scalar for each element. | Improve this Doc View Source Barycentric(Vector4, Vector4, Vector4, Single, Single) Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle. Declaration public static Vector4 Barycentric(Vector4 value1, Vector4 value2, Vector4 value3, float amount1, float amount2) Parameters Type Name Description Vector4 value1 A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle. Vector4 value2 A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle. Vector4 value3 A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Returns Type Description Vector4 A new Vector4 containing the 4D Cartesian coordinates of the specified point. | Improve this Doc View Source Barycentric(ref Vector4, ref Vector4, ref Vector4, Single, Single, out Vector4) Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle. Declaration public static void Barycentric(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, float amount1, float amount2, out Vector4 result) Parameters Type Name Description Vector4 value1 A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle. Vector4 value2 A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle. Vector4 value3 A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle. System.Single amount1 Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2 ). System.Single amount2 Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3 ). Vector4 result When the method completes, contains the 4D Cartesian coordinates of the specified point. | Improve this Doc View Source CatmullRom(Vector4, Vector4, Vector4, Vector4, Single) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static Vector4 CatmullRom(Vector4 value1, Vector4 value2, Vector4 value3, Vector4 value4, float amount) Parameters Type Name Description Vector4 value1 The first position in the interpolation. Vector4 value2 The second position in the interpolation. Vector4 value3 The third position in the interpolation. Vector4 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Returns Type Description Vector4 A vector that is the result of the Catmull-Rom interpolation. | Improve this Doc View Source CatmullRom(ref Vector4, ref Vector4, ref Vector4, ref Vector4, Single, out Vector4) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static void CatmullRom(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, ref Vector4 value4, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first position in the interpolation. Vector4 value2 The second position in the interpolation. Vector4 value3 The third position in the interpolation. Vector4 value4 The fourth position in the interpolation. System.Single amount Weighting factor. Vector4 result When the method completes, contains the result of the Catmull-Rom interpolation. | Improve this Doc View Source Clamp(Vector4, Vector4, Vector4) Restricts a value to be within a specified range. Declaration public static Vector4 Clamp(Vector4 value, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 value The value to clamp. Vector4 min The minimum value. Vector4 max The maximum value. Returns Type Description Vector4 The clamped value. | Improve this Doc View Source Clamp(ref Vector4, ref Vector4, ref Vector4, out Vector4) Restricts a value to be within a specified range. Declaration public static void Clamp(ref Vector4 value, ref Vector4 min, ref Vector4 max, out Vector4 result) Parameters Type Name Description Vector4 value The value to clamp. Vector4 min The minimum value. Vector4 max The maximum value. Vector4 result When the method completes, contains the clamped value. | Improve this Doc View Source Distance(Vector4, Vector4) Calculates the distance between two vectors. Declaration public static float Distance(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description System.Single The distance between the two vectors. Remarks DistanceSquared(Vector4, Vector4) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source Distance(ref Vector4, ref Vector4, out Single) Calculates the distance between two vectors. Declaration public static void Distance(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single result When the method completes, contains the distance between the two vectors. Remarks DistanceSquared(ref Vector4, ref Vector4, out Single) may be preferred when only the relative distance is needed and speed is of the essence. | Improve this Doc View Source DistanceSquared(Vector4, Vector4) Calculates the squared distance between two vectors. Declaration public static float DistanceSquared(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description System.Single The squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source DistanceSquared(ref Vector4, ref Vector4, out Single) Calculates the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single result When the method completes, contains the squared distance between the two vectors. Remarks Distance squared is the value before taking the square root. Distance squared can often be used in place of distance if relative comparisons are being made. For example, consider three points A, B, and C. To determine whether B or C is further from A, compare the distance between A and B to the distance between A and C. Calculating the two distances involves two square roots, which are computationally expensive. However, using distance squared provides the same information and avoids calculating two square roots. | Improve this Doc View Source Divide(Vector4, Single) Scales a vector by the given value. Declaration public static Vector4 Divide(Vector4 value, float scale) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Divide(ref Vector4, Single, out Vector4) Scales a vector by the given value. Declaration public static void Divide(ref Vector4 value, float scale, out Vector4 result) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector4 result When the method completes, contains the scaled vector. | Improve this Doc View Source Divide(Single, Vector4) Scales a vector by the given value. Declaration public static Vector4 Divide(float scale, Vector4 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector4 value The vector to scale. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Divide(Single, ref Vector4, out Vector4) Scales a vector by the given value. Declaration public static void Divide(float scale, ref Vector4 value, out Vector4 result) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector4 value The vector to scale. Vector4 result When the method completes, contains the scaled vector. | Improve this Doc View Source Dot(Vector4, Vector4) Calculates the dot product of two vectors. Declaration public static float Dot(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left First source vector. Vector4 right Second source vector. Returns Type Description System.Single The dot product of the two vectors. | Improve this Doc View Source Dot(ref Vector4, ref Vector4, out Single) Calculates the dot product of two vectors. Declaration public static void Dot(ref Vector4 left, ref Vector4 right, out float result) Parameters Type Name Description Vector4 left First source vector Vector4 right Second source vector. System.Single result When the method completes, contains the dot product of the two vectors. | Improve this Doc View Source Equals(Vector4) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(Vector4 other) Parameters Type Name Description Vector4 other The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Vector4) Determines whether the specified Vector4 is equal to this instance. Declaration public bool Equals(ref Vector4 other) Parameters Type Name Description Vector4 other The Vector4 to compare with this instance. Returns Type Description System.Boolean true if the specified Vector4 is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description System.Object value The to compare with this instance. Returns Type Description System.Boolean true if the specified is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Hermite(Vector4, Vector4, Vector4, Vector4, Single) Performs a Hermite spline interpolation. Declaration public static Vector4 Hermite(Vector4 value1, Vector4 tangent1, Vector4 value2, Vector4 tangent2, float amount) Parameters Type Name Description Vector4 value1 First source position vector. Vector4 tangent1 First source tangent vector. Vector4 value2 Second source position vector. Vector4 tangent2 Second source tangent vector. System.Single amount Weighting factor. Returns Type Description Vector4 The result of the Hermite spline interpolation. | Improve this Doc View Source Hermite(ref Vector4, ref Vector4, ref Vector4, ref Vector4, Single, out Vector4) Performs a Hermite spline interpolation. Declaration public static void Hermite(ref Vector4 value1, ref Vector4 tangent1, ref Vector4 value2, ref Vector4 tangent2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 First source position vector. Vector4 tangent1 First source tangent vector. Vector4 value2 Second source position vector. Vector4 tangent2 Second source tangent vector. System.Single amount Weighting factor. Vector4 result When the method completes, contains the result of the Hermite spline interpolation. | Improve this Doc View Source Length() Calculates the length of the vector. Declaration public float Length() Returns Type Description System.Single The length of the vector. Remarks LengthSquared() may be preferred when only the relative length is needed and speed is of the essence. | Improve this Doc View Source LengthSquared() Calculates the squared length of the vector. Declaration public float LengthSquared() Returns Type Description System.Single The squared length of the vector. Remarks This method may be preferred to Length() when only a relative length is needed and speed is of the essence. | Improve this Doc View Source Lerp(Vector4, Vector4, Single) Performs a linear interpolation between two vectors. Declaration public static Vector4 Lerp(Vector4 start, Vector4 end, float amount) Parameters Type Name Description Vector4 start Start vector. Vector4 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector4 The linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Lerp(ref Vector4, ref Vector4, Single, out Vector4) Performs a linear interpolation between two vectors. Declaration public static void Lerp(ref Vector4 start, ref Vector4 end, float amount, out Vector4 result) Parameters Type Name Description Vector4 start Start vector. Vector4 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector4 result When the method completes, contains the linear interpolation of the two vectors. Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Max(Vector4, Vector4) Returns a vector containing the largest components of the specified vectors. Declaration public static Vector4 Max(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 A vector containing the largest components of the source vectors. | Improve this Doc View Source Max(ref Vector4, ref Vector4, out Vector4) Returns a vector containing the largest components of the specified vectors. Declaration public static void Max(ref Vector4 left, ref Vector4 right, out Vector4 result) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Vector4 result When the method completes, contains an new vector composed of the largest components of the source vectors. | Improve this Doc View Source Min(Vector4, Vector4) Returns a vector containing the smallest components of the specified vectors. Declaration public static Vector4 Min(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 A vector containing the smallest components of the source vectors. | Improve this Doc View Source Min(ref Vector4, ref Vector4, out Vector4) Returns a vector containing the smallest components of the specified vectors. Declaration public static void Min(ref Vector4 left, ref Vector4 right, out Vector4 result) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Vector4 result When the method completes, contains an new vector composed of the smallest components of the source vectors. | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies a vector with another by performing component-wise multiplication. Declaration public static Vector4 Multiply(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to multiply. Vector4 right The second vector to multiply. Returns Type Description Vector4 The multiplied vector. | Improve this Doc View Source Multiply(Vector4, Single) Scales a vector by the given value. Declaration public static Vector4 Multiply(Vector4 value, float scale) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(ref Vector4, ref Vector4, out Vector4) Multiplies a vector with another by performing component-wise multiplication. Declaration public static void Multiply(ref Vector4 left, ref Vector4 right, out Vector4 result) Parameters Type Name Description Vector4 left The first vector to multiply. Vector4 right The second vector to multiply. Vector4 result When the method completes, contains the multiplied vector. | Improve this Doc View Source Multiply(ref Vector4, Single, out Vector4) Scales a vector by the given value. Declaration public static void Multiply(ref Vector4 value, float scale, out Vector4 result) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Vector4 result When the method completes, contains the scaled vector. | Improve this Doc View Source Negate(Vector4) Reverses the direction of a given vector. Declaration public static Vector4 Negate(Vector4 value) Parameters Type Name Description Vector4 value The vector to negate. Returns Type Description Vector4 A vector facing in the opposite direction. | Improve this Doc View Source Negate(ref Vector4, out Vector4) Reverses the direction of a given vector. Declaration public static void Negate(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value The vector to negate. Vector4 result When the method completes, contains a vector facing in the opposite direction. | Improve this Doc View Source Normalize() Converts the vector into a unit vector. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector4) Converts the vector into a unit vector. Declaration public static Vector4 Normalize(Vector4 value) Parameters Type Name Description Vector4 value The vector to normalize. Returns Type Description Vector4 The normalized vector. | Improve this Doc View Source Normalize(ref Vector4, out Vector4) Converts the vector into a unit vector. Declaration public static void Normalize(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value The vector to normalize. Vector4 result When the method completes, contains the normalized vector. | Improve this Doc View Source Orthogonalize(Vector4[], Vector4[]) Orthogonalizes a list of vectors. Declaration public static void Orthogonalize(Vector4[] destination, params Vector4[] source) Parameters Type Name Description Vector4 [] destination The list of orthogonalized vectors. Vector4 [] source The list of vectors to orthogonalize. Remarks Orthogonalization is the process of making all vectors orthogonal to each other. This means that any given vector in the list will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source Orthonormalize(Vector4[], Vector4[]) Orthonormalizes a list of vectors. Declaration public static void Orthonormalize(Vector4[] destination, params Vector4[] source) Parameters Type Name Description Vector4 [] destination The list of orthonormalized vectors. Vector4 [] source The list of vectors to orthonormalize. Remarks Orthonormalization is the process of making all vectors orthogonal to each other and making all vectors of unit length. This means that any given vector will be orthogonal to any other given vector in the list. Because this method uses the modified Gram-Schmidt process, the resulting vectors tend to be numerically unstable. The numeric stability decreases according to the vectors position in the list so that the first vector is the most stable and the last vector is the least stable. | Improve this Doc View Source SmoothStep(Vector4, Vector4, Single) Performs a cubic interpolation between two vectors. Declaration public static Vector4 SmoothStep(Vector4 start, Vector4 end, float amount) Parameters Type Name Description Vector4 start Start vector. Vector4 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description Vector4 The cubic interpolation of the two vectors. | Improve this Doc View Source SmoothStep(ref Vector4, ref Vector4, Single, out Vector4) Performs a cubic interpolation between two vectors. Declaration public static void SmoothStep(ref Vector4 start, ref Vector4 end, float amount, out Vector4 result) Parameters Type Name Description Vector4 start Start vector. Vector4 end End vector. System.Single amount Value between 0 and 1 indicating the weight of end . Vector4 result When the method completes, contains the cubic interpolation of the two vectors. | Improve this Doc View Source Subtract(Vector4, Vector4) Subtracts two vectors. Declaration public static Vector4 Subtract(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to subtract. Vector4 right The second vector to subtract. Returns Type Description Vector4 The difference of the two vectors. | Improve this Doc View Source Subtract(Vector4, Single) Perform a component-wise subtraction Declaration public static Vector4 Subtract(Vector4 left, float right) Parameters Type Name Description Vector4 left The input vector System.Single right The scalar value to be subtraced from elements Returns Type Description Vector4 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Vector4, ref Vector4, out Vector4) Subtracts two vectors. Declaration public static void Subtract(ref Vector4 left, ref Vector4 right, out Vector4 result) Parameters Type Name Description Vector4 left The first vector to subtract. Vector4 right The second vector to subtract. Vector4 result When the method completes, contains the difference of the two vectors. | Improve this Doc View Source Subtract(ref Vector4, ref Single, out Vector4) Perform a component-wise subtraction Declaration public static void Subtract(ref Vector4 left, ref float right, out Vector4 result) Parameters Type Name Description Vector4 left The input vector System.Single right The scalar value to be subtraced from elements Vector4 result The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(Single, Vector4) Perform a component-wise subtraction Declaration public static Vector4 Subtract(float left, Vector4 right) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector4 right The input vector. Returns Type Description Vector4 The vector with subtracted scalar for each element. | Improve this Doc View Source Subtract(ref Single, ref Vector4, out Vector4) Perform a component-wise subtraction Declaration public static void Subtract(ref float left, ref Vector4 right, out Vector4 result) Parameters Type Name Description System.Single left The scalar value to be subtraced from elements Vector4 right The input vector. Vector4 result The vector with subtracted scalar for each element. | Improve this Doc View Source ToArray() Creates an array containing the elements of the vector. Declaration public float[] ToArray() Returns Type Description System.Single [] A four-element array containing the components of the vector. | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(IFormatProvider) Returns a that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String) Returns a that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format. IFormatProvider formatProvider The format provider. Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Transform(Vector4, Matrix) Transforms a 4D vector by the given Matrix . Declaration public static Vector4 Transform(Vector4 vector, Matrix transform) Parameters Type Name Description Vector4 vector The source vector. Matrix transform The transformation Matrix . Returns Type Description Vector4 The transformed Vector4 . | Improve this Doc View Source Transform(Vector4, Matrix5x4) Transforms a 4D vector by the given Matrix5x4 . Declaration public static Vector4 Transform(Vector4 vector, Matrix5x4 transform) Parameters Type Name Description Vector4 vector The source vector. Matrix5x4 transform The transformation Matrix5x4 . Returns Type Description Vector4 The transformed Vector4 . | Improve this Doc View Source Transform(Vector4, Quaternion) Transforms a 4D vector by the given Quaternion rotation. Declaration public static Vector4 Transform(Vector4 vector, Quaternion rotation) Parameters Type Name Description Vector4 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Returns Type Description Vector4 The transformed Vector4 . | Improve this Doc View Source Transform(ref Vector4, ref Matrix, out Vector4) Transforms a 4D vector by the given Matrix . Declaration public static void Transform(ref Vector4 vector, ref Matrix transform, out Vector4 result) Parameters Type Name Description Vector4 vector The source vector. Matrix transform The transformation Matrix . Vector4 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(ref Vector4, ref Matrix5x4, out Vector4) Transforms a 4D vector by the given Matrix5x4 . Declaration public static void Transform(ref Vector4 vector, ref Matrix5x4 transform, out Vector4 result) Parameters Type Name Description Vector4 vector The source vector. Matrix5x4 transform The transformation Matrix5x4 . Vector4 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(ref Vector4, ref Quaternion, out Vector4) Transforms a 4D vector by the given Quaternion rotation. Declaration public static void Transform(ref Vector4 vector, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector4 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Vector4 result When the method completes, contains the transformed Vector4 . | Improve this Doc View Source Transform(Vector4[], ref Matrix, Vector4[]) Transforms an array of 4D vectors by the given Matrix . Declaration public static void Transform(Vector4[] source, ref Matrix transform, Vector4[] destination) Parameters Type Name Description Vector4 [] source The array of vectors to transform. Matrix transform The transformation Matrix . Vector4 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . | Improve this Doc View Source Transform(Vector4[], ref Quaternion, Vector4[]) Transforms an array of vectors by the given Quaternion rotation. Declaration public static void Transform(Vector4[] source, ref Quaternion rotation, Vector4[] destination) Parameters Type Name Description Vector4 [] source The array of vectors to transform. Quaternion rotation The Quaternion rotation to apply. Vector4 [] destination The array for which the transformed vectors are stored. This array may be the same array as source . Operators | Improve this Doc View Source Addition(Vector4, Vector4) Adds two vectors. Declaration public static Vector4 operator +(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to add. Vector4 right The second vector to add. Returns Type Description Vector4 The sum of the two vectors. | Improve this Doc View Source Addition(Vector4, Single) Perform a component-wise addition Declaration public static Vector4 operator +(Vector4 value, float scalar) Parameters Type Name Description Vector4 value The input vector. System.Single scalar The scalar value to be added on elements Returns Type Description Vector4 The vector with added scalar for each element. | Improve this Doc View Source Addition(Single, Vector4) Perform a component-wise addition Declaration public static Vector4 operator +(float scalar, Vector4 value) Parameters Type Name Description System.Single scalar The scalar value to be added on elements Vector4 value The input vector. Returns Type Description Vector4 The vector with added scalar for each element. | Improve this Doc View Source Division(Vector4, Vector4) Scales a vector by the given value. Declaration public static Vector4 operator /(Vector4 value, Vector4 scale) Parameters Type Name Description Vector4 value The vector to scale. Vector4 scale The amount by which to scale the vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Division(Vector4, Single) Scales a vector by the given value. Declaration public static Vector4 operator /(Vector4 value, float scale) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Division(Single, Vector4) Scales a vector by the given value. Declaration public static Vector4 operator /(float scale, Vector4 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector4 value The vector to scale. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Equality(Vector4, Vector4) Tests for equality between two objects. Declaration public static bool operator ==(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first value to compare. Vector4 right The second value to compare. Returns Type Description System.Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(Vector4 to Vector2) Performs an explicit conversion from Vector4 to Vector2 . Declaration public static explicit operator Vector2(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description Vector2 The result of the conversion. | Improve this Doc View Source Explicit(Vector4 to Vector3) Performs an explicit conversion from Vector4 to Vector3 . Declaration public static explicit operator Vector3(Vector4 value) Parameters Type Name Description Vector4 value The value. Returns Type Description Vector3 The result of the conversion. | Improve this Doc View Source Inequality(Vector4, Vector4) Tests for inequality between two objects. Declaration public static bool operator !=(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first value to compare. Vector4 right The second value to compare. Returns Type Description System.Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies a vector with another by performing component-wise multiplication equivalent to Multiply(ref Vector4, ref Vector4, out Vector4) . Declaration public static Vector4 operator *(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to multiply. Vector4 right The second vector to multiply. Returns Type Description Vector4 The multiplication of the two vectors. | Improve this Doc View Source Multiply(Vector4, Single) Scales a vector by the given value. Declaration public static Vector4 operator *(Vector4 value, float scale) Parameters Type Name Description Vector4 value The vector to scale. System.Single scale The amount by which to scale the vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(Single, Vector4) Scales a vector by the given value. Declaration public static Vector4 operator *(float scale, Vector4 value) Parameters Type Name Description System.Single scale The amount by which to scale the vector. Vector4 value The vector to scale. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Subtraction(Vector4, Vector4) Subtracts two vectors. Declaration public static Vector4 operator -(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to subtract. Vector4 right The second vector to subtract. Returns Type Description Vector4 The difference of the two vectors. | Improve this Doc View Source Subtraction(Vector4, Single) Perform a component-wise subtraction Declaration public static Vector4 operator -(Vector4 value, float scalar) Parameters Type Name Description Vector4 value The input vector. System.Single scalar The scalar value to be subtraced from elements Returns Type Description Vector4 The vector with subtraced scalar from each element. | Improve this Doc View Source Subtraction(Single, Vector4) Perform a component-wise subtraction Declaration public static Vector4 operator -(float scalar, Vector4 value) Parameters Type Name Description System.Single scalar The scalar value to be subtraced from elements Vector4 value The input vector. Returns Type Description Vector4 The vector with subtraced scalar from each element. | Improve this Doc View Source UnaryNegation(Vector4) Reverses the direction of a given vector. Declaration public static Vector4 operator -(Vector4 value) Parameters Type Name Description Vector4 value The vector to negate. Returns Type Description Vector4 A vector facing in the opposite direction. | Improve this Doc View Source UnaryPlus(Vector4) Assert a vector (return it unchanged). Declaration public static Vector4 operator +(Vector4 value) Parameters Type Name Description Vector4 value The vector to assert (unchanged). Returns Type Description Vector4 The asserted (unchanged) vector. Implements IEquatable<> IFormattable"
  },
  "api/Fluint.Layer.Mathematics.Viewport.html": {
    "href": "api/Fluint.Layer.Mathematics.Viewport.html",
    "title": "Struct Viewport | Fluint",
    "keywords": "Struct Viewport Defines the viewport dimensions. Implements IEquatable < Viewport > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct Viewport : IEquatable<Viewport> Constructors | Improve this Doc View Source Viewport(Rectangle) Initializes a new instance of the Viewport struct. Declaration public Viewport(Rectangle bounds) Parameters Type Name Description Rectangle bounds A bounding box that defines the location and size of the viewport in a render target. | Improve this Doc View Source Viewport(Int32, Int32, Int32, Int32) Initializes a new instance of the Viewport struct. Declaration public Viewport(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x The x coordinate of the upper-left corner of the viewport in pixels. System.Int32 y The y coordinate of the upper-left corner of the viewport in pixels. System.Int32 width The width of the viewport in pixels. System.Int32 height The height of the viewport in pixels. | Improve this Doc View Source Viewport(Int32, Int32, Int32, Int32, Single, Single) Initializes a new instance of the Viewport struct. Declaration public Viewport(int x, int y, int width, int height, float minDepth, float maxDepth) Parameters Type Name Description System.Int32 x The x coordinate of the upper-left corner of the viewport in pixels. System.Int32 y The y coordinate of the upper-left corner of the viewport in pixels. System.Int32 width The width of the viewport in pixels. System.Int32 height The height of the viewport in pixels. System.Single minDepth The minimum depth of the clip volume. System.Single maxDepth The maximum depth of the clip volume. Fields | Improve this Doc View Source Height Height dimension of the viewport. Declaration public int Height Field Value Type Description System.Int32 | Improve this Doc View Source MaxDepth Gets or sets the maximum depth of the clip volume. Declaration public float MaxDepth Field Value Type Description System.Single | Improve this Doc View Source MinDepth Gets or sets the minimum depth of the clip volume. Declaration public float MinDepth Field Value Type Description System.Single | Improve this Doc View Source Width Width dimension of the viewport. Declaration public int Width Field Value Type Description System.Int32 | Improve this Doc View Source X Position of the pixel coordinate of the upper-left corner of the viewport. Declaration public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y Position of the pixel coordinate of the upper-left corner of the viewport. Declaration public int Y Field Value Type Description System.Int32 Properties | Improve this Doc View Source AspectRatio Gets the aspect ratio used by the viewport. Declaration public float AspectRatio { get; } Property Value Type Description System.Single The aspect ratio. | Improve this Doc View Source Bounds Gets the size of this resource. Declaration public Rectangle Bounds { get; set; } Property Value Type Description Rectangle The bounds. Methods | Improve this Doc View Source Equals(Viewport) Determines whether the specified Viewport is equal to this instance. Declaration public bool Equals(Viewport other) Parameters Type Name Description Viewport other The Viewport to compare with this instance. Returns Type Description System.Boolean true if the specified Viewport is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref Viewport) Determines whether the specified Viewport is equal to this instance. Declaration public bool Equals(ref Viewport other) Parameters Type Name Description Viewport other The Viewport to compare with this instance. Returns Type Description System.Boolean true if the specified Viewport is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this instance. Returns Type Description System.Boolean true if the specified object is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Project(Vector3, Matrix, Matrix, Matrix) Projects a 3D vector from object space into screen space. Declaration public Vector3 Project(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source The vector to project. Matrix projection The projection matrix. Matrix view The view matrix. Matrix world The world matrix. Returns Type Description Vector3 The projected vector. | Improve this Doc View Source Project(ref Vector3, ref Matrix, out Vector3) Projects a 3D vector from object space into screen space. Declaration public void Project(ref Vector3 source, ref Matrix matrix, out Vector3 vector) Parameters Type Name Description Vector3 source The vector to project. Matrix matrix A combined WorldViewProjection matrix. Vector3 vector The projected vector. | Improve this Doc View Source ToString() Retrieves a string representation of this object. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Unproject(Vector3, Matrix, Matrix, Matrix) Converts a screen space point into a corresponding point in world space. Declaration public Vector3 Unproject(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source The vector to project. Matrix projection The projection matrix. Matrix view The view matrix. Matrix world The world matrix. Returns Type Description Vector3 The unprojected Vector. | Improve this Doc View Source Unproject(ref Vector3, ref Matrix, out Vector3) Converts a screen space point into a corresponding point in world space. Declaration public void Unproject(ref Vector3 source, ref Matrix matrix, out Vector3 vector) Parameters Type Name Description Vector3 source The vector to project. Matrix matrix An inverted combined WorldViewProjection matrix. Vector3 vector The unprojected vector. Operators | Improve this Doc View Source Equality(Viewport, Viewport) Implements the operator ==. Declaration public static bool operator ==(Viewport left, Viewport right) Parameters Type Name Description Viewport left The left. Viewport right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(Viewport, Viewport) Implements the operator !=. Declaration public static bool operator !=(Viewport left, Viewport right) Parameters Type Name Description Viewport left The left. Viewport right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<> Extension Methods GL46Extensions.ToOpenTK(Viewport)"
  },
  "api/Fluint.Layer.Mathematics.ViewportF.html": {
    "href": "api/Fluint.Layer.Mathematics.ViewportF.html",
    "title": "Struct ViewportF | Fluint",
    "keywords": "Struct ViewportF Defines the viewport dimensions using float coordinates for (X,Y,Width,Height). Implements IEquatable < ViewportF > Namespace : Fluint.Layer.Mathematics Assembly : Fluint.Layer.dll Syntax public struct ViewportF : IEquatable<ViewportF> Constructors | Improve this Doc View Source ViewportF(RectangleF) Initializes a new instance of the ViewportF struct. Declaration public ViewportF(RectangleF bounds) Parameters Type Name Description RectangleF bounds A bounding box that defines the location and size of the viewport in a render target. | Improve this Doc View Source ViewportF(Single, Single, Single, Single) Initializes a new instance of the ViewportF struct. Declaration public ViewportF(float x, float y, float width, float height) Parameters Type Name Description System.Single x The x coordinate of the upper-left corner of the viewport in pixels. System.Single y The y coordinate of the upper-left corner of the viewport in pixels. System.Single width The width of the viewport in pixels. System.Single height The height of the viewport in pixels. | Improve this Doc View Source ViewportF(Single, Single, Single, Single, Single, Single) Initializes a new instance of the ViewportF struct. Declaration public ViewportF(float x, float y, float width, float height, float minDepth, float maxDepth) Parameters Type Name Description System.Single x The x coordinate of the upper-left corner of the viewport in pixels. System.Single y The y coordinate of the upper-left corner of the viewport in pixels. System.Single width The width of the viewport in pixels. System.Single height The height of the viewport in pixels. System.Single minDepth The minimum depth of the clip volume. System.Single maxDepth The maximum depth of the clip volume. Fields | Improve this Doc View Source Height Height dimension of the viewport. Declaration public float Height Field Value Type Description System.Single | Improve this Doc View Source MaxDepth Gets or sets the maximum depth of the clip volume. Declaration public float MaxDepth Field Value Type Description System.Single | Improve this Doc View Source MinDepth Gets or sets the minimum depth of the clip volume. Declaration public float MinDepth Field Value Type Description System.Single | Improve this Doc View Source Width Width dimension of the viewport. Declaration public float Width Field Value Type Description System.Single | Improve this Doc View Source X Position of the pixel coordinate of the upper-left corner of the viewport. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y Position of the pixel coordinate of the upper-left corner of the viewport. Declaration public float Y Field Value Type Description System.Single Properties | Improve this Doc View Source AspectRatio Gets the aspect ratio used by the viewport. Declaration public float AspectRatio { get; } Property Value Type Description System.Single The aspect ratio. | Improve this Doc View Source Bounds Gets the size of this resource. Declaration public RectangleF Bounds { get; set; } Property Value Type Description RectangleF The bounds. Methods | Improve this Doc View Source Equals(ViewportF) Determines whether the specified ViewportF is equal to this instance. Declaration public bool Equals(ViewportF other) Parameters Type Name Description ViewportF other The ViewportF to compare with this instance. Returns Type Description System.Boolean true if the specified ViewportF is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref ViewportF) Determines whether the specified ViewportF is equal to this instance. Declaration public bool Equals(ref ViewportF other) Parameters Type Name Description ViewportF other The ViewportF to compare with this instance. Returns Type Description System.Boolean true if the specified ViewportF is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this instance. Returns Type Description System.Boolean true if the specified object is equal to this instance; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. | Improve this Doc View Source Project(Vector3, Matrix, Matrix, Matrix) Declaration public Vector3 Project(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source Matrix projection Matrix view Matrix world Returns Type Description Vector3 | Improve this Doc View Source Project(ref Vector3, ref Matrix, out Vector3) Projects a 3D vector from object space into screen space. Declaration public void Project(ref Vector3 source, ref Matrix matrix, out Vector3 vector) Parameters Type Name Description Vector3 source The vector to project. Matrix matrix A combined WorldViewProjection matrix. Vector3 vector The projected vector. | Improve this Doc View Source ToString() Retrieves a string representation of this object. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. | Improve this Doc View Source Unproject(Vector3, Matrix, Matrix, Matrix) Converts a screen space point into a corresponding point in world space. Declaration public Vector3 Unproject(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source The vector to project. Matrix projection The projection matrix. Matrix view The view matrix. Matrix world The world matrix. Returns Type Description Vector3 The unprojected Vector. | Improve this Doc View Source Unproject(ref Vector3, ref Matrix, out Vector3) Converts a screen space point into a corresponding point in world space. Declaration public void Unproject(ref Vector3 source, ref Matrix matrix, out Vector3 vector) Parameters Type Name Description Vector3 source The vector to project. Matrix matrix An inverted combined WorldViewProjection matrix. Vector3 vector The unprojected vector. Operators | Improve this Doc View Source Equality(ViewportF, ViewportF) Implements the operator ==. Declaration public static bool operator ==(ViewportF left, ViewportF right) Parameters Type Name Description ViewportF left The left. ViewportF right The right. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Implicit(Viewport to ViewportF) Performs an explicit conversion from Viewport to ViewportF . Declaration public static implicit operator ViewportF(Viewport value) Parameters Type Name Description Viewport value The value. Returns Type Description ViewportF The result of the conversion. | Improve this Doc View Source Inequality(ViewportF, ViewportF) Implements the operator !=. Declaration public static bool operator !=(ViewportF left, ViewportF right) Parameters Type Name Description ViewportF left The left. ViewportF right The right. Returns Type Description System.Boolean The result of the operator. Implements IEquatable<>"
  },
  "api/Fluint.Layer.Miscellaneous.Alignment.html": {
    "href": "api/Fluint.Layer.Miscellaneous.Alignment.html",
    "title": "Enum Alignment | Fluint",
    "keywords": "Enum Alignment Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public enum Alignment : int Fields Name Description Left Right"
  },
  "api/Fluint.Layer.Miscellaneous.ConsoleHelper.html": {
    "href": "api/Fluint.Layer.Miscellaneous.ConsoleHelper.html",
    "title": "Class ConsoleHelper | Fluint",
    "keywords": "Class ConsoleHelper Shameless steal! https://gist.github.com/RickStrahl/52c9ee43bd2723bcdf7bf4d24b029768 Inheritance System.Object ConsoleHelper Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public class ConsoleHelper : object Methods | Improve this Doc View Source Write(String, Nullable<ConsoleColor>) Write with color Declaration public static void Write(string text, ConsoleColor? color = null) Parameters Type Name Description System.String text System.Nullable < ConsoleColor > color | Improve this Doc View Source Write(String, String) Writes out a line with color specified as a string Declaration public static void Write(string text, string color) Parameters Type Name Description System.String text Text to write System.String color A console color. Must match ConsoleColors collection names (case insensitive) | Improve this Doc View Source WriteEmbeddedColor(String, Nullable<ConsoleColor>) Declaration public static void WriteEmbeddedColor(string text, ConsoleColor? baseTextColor = null) Parameters Type Name Description System.String text System.Nullable < ConsoleColor > baseTextColor | Improve this Doc View Source WriteEmbeddedColorLine(String, Nullable<ConsoleColor>) Allows a string to be written with embedded color values using: This is [red]Red[/red] text and this is [cyan]Blue[/blue] text Declaration public static void WriteEmbeddedColorLine(string text, ConsoleColor? baseTextColor = null) Parameters Type Name Description System.String text Text to display System.Nullable < ConsoleColor > baseTextColor Base text color | Improve this Doc View Source WriteError(String) Write a Error Line - Red Declaration public static void WriteError(string text) Parameters Type Name Description System.String text Text to write out | Improve this Doc View Source WriteInfo(String) Write a Info Line - dark cyan Declaration public static void WriteInfo(string text) Parameters Type Name Description System.String text Text to write out | Improve this Doc View Source WriteLine(String, Nullable<ConsoleColor>) WriteLine with color Declaration public static void WriteLine(string text, ConsoleColor? color = null) Parameters Type Name Description System.String text System.Nullable < ConsoleColor > color | Improve this Doc View Source WriteLine(String, String) Writes out a line with a specific color as a string Declaration public static void WriteLine(string text, string color) Parameters Type Name Description System.String text Text to write System.String color A console color. Must match ConsoleColors collection names (case insensitive) | Improve this Doc View Source WriteSuccess(String) Write a Success Line - green Declaration public static void WriteSuccess(string text) Parameters Type Name Description System.String text Text to write out | Improve this Doc View Source WriteWarning(String) Write a Warning Line - Yellow Declaration public static void WriteWarning(string text) Parameters Type Name Description System.String text Text to Write out | Improve this Doc View Source WriteWrappedHeader(String, Char, ConsoleColor, ConsoleColor) Writes a line of header text wrapped in a in a pair of lines of dashes: Header Text and allows you to specify a color for the header. The dashes are colored Declaration public static void WriteWrappedHeader(string headerText, char wrapperChar = '-', ConsoleColor headerColor = null, ConsoleColor dashColor = null) Parameters Type Name Description System.String headerText Header text to display System.Char wrapperChar wrapper character (-) ConsoleColor headerColor Color for header text (yellow) ConsoleColor dashColor Color for dashes (gray)"
  },
  "api/Fluint.Layer.Miscellaneous.ConsoleTable.html": {
    "href": "api/Fluint.Layer.Miscellaneous.ConsoleTable.html",
    "title": "Class ConsoleTable | Fluint",
    "keywords": "Class ConsoleTable Shameless steal from https://github.com/khalidabuhakmeh/ConsoleTables/blob/master/src/ConsoleTables/ConsoleTable.cs Inheritance System.Object ConsoleTable Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public class ConsoleTable : object Constructors | Improve this Doc View Source ConsoleTable(ConsoleTableOptions) Declaration public ConsoleTable(ConsoleTableOptions options) Parameters Type Name Description ConsoleTableOptions options | Improve this Doc View Source ConsoleTable(String[]) Declaration public ConsoleTable(params string[] columns) Parameters Type Name Description System.String [] columns Properties | Improve this Doc View Source Columns Declaration public IList<object> Columns { get; set; } Property Value Type Description IList < System.Object > | Improve this Doc View Source ColumnTypes Declaration public Type[] ColumnTypes { get; } Property Value Type Description Type [] | Improve this Doc View Source NumericTypes Declaration public static HashSet<Type> NumericTypes { get; } Property Value Type Description HashSet < Type > | Improve this Doc View Source Options Declaration public ConsoleTableOptions Options { get; protected set; } Property Value Type Description ConsoleTableOptions | Improve this Doc View Source Rows Declaration public IList<object[]> Rows { get; protected set; } Property Value Type Description IList < System.Object []> Methods | Improve this Doc View Source AddColumn(IEnumerable<String>) Declaration public ConsoleTable AddColumn(IEnumerable<string> names) Parameters Type Name Description IEnumerable < System.String > names Returns Type Description ConsoleTable | Improve this Doc View Source AddRow(Object[]) Declaration public ConsoleTable AddRow(params object[] values) Parameters Type Name Description System.Object [] values Returns Type Description ConsoleTable | Improve this Doc View Source Configure(Action<ConsoleTableOptions>) Declaration public ConsoleTable Configure(Action<ConsoleTableOptions> action) Parameters Type Name Description Action < ConsoleTableOptions > action Returns Type Description ConsoleTable | Improve this Doc View Source From<T>(IEnumerable<T>) Declaration public static ConsoleTable From<T>(IEnumerable<T> values) Parameters Type Name Description IEnumerable <T> values Returns Type Description ConsoleTable Type Parameters Name Description T | Improve this Doc View Source ToMarkDownString() Declaration public string ToMarkDownString() Returns Type Description System.String | Improve this Doc View Source ToMinimalString() Declaration public string ToMinimalString() Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source ToStringAlternative() Declaration public string ToStringAlternative() Returns Type Description System.String | Improve this Doc View Source Write(Format) Declaration public void Write(Format format = default(Format)) Parameters Type Name Description Format format"
  },
  "api/Fluint.Layer.Miscellaneous.ConsoleTableOptions.html": {
    "href": "api/Fluint.Layer.Miscellaneous.ConsoleTableOptions.html",
    "title": "Class ConsoleTableOptions | Fluint",
    "keywords": "Class ConsoleTableOptions Inheritance System.Object ConsoleTableOptions Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public class ConsoleTableOptions : object Properties | Improve this Doc View Source Columns Declaration public IEnumerable<string> Columns { get; set; } Property Value Type Description IEnumerable < System.String > | Improve this Doc View Source EnableCount Declaration public bool EnableCount { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NumberAlignment Enable only from a list of objects Declaration public Alignment NumberAlignment { get; set; } Property Value Type Description Alignment | Improve this Doc View Source OutputTo The to write to. Defaults to . Declaration public TextWriter OutputTo { get; set; } Property Value Type Description TextWriter"
  },
  "api/Fluint.Layer.Miscellaneous.DynamicModuleLambdaCompiler.html": {
    "href": "api/Fluint.Layer.Miscellaneous.DynamicModuleLambdaCompiler.html",
    "title": "Class DynamicModuleLambdaCompiler | Fluint",
    "keywords": "Class DynamicModuleLambdaCompiler Inheritance System.Object DynamicModuleLambdaCompiler Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public static class DynamicModuleLambdaCompiler : object Methods | Improve this Doc View Source GenerateFactory<T>() Declaration public static Func<T> GenerateFactory<T>() where T : new() Returns Type Description Func <T> Type Parameters Name Description T | Improve this Doc View Source GenerateFactory<T>(Object[]) Declaration public static Func<T> GenerateFactory<T>(params object[] parameters) where T : new() Parameters Type Name Description System.Object [] parameters Returns Type Description Func <T> Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Miscellaneous.FastActivator.html": {
    "href": "api/Fluint.Layer.Miscellaneous.FastActivator.html",
    "title": "Class FastActivator | Fluint",
    "keywords": "Class FastActivator Inheritance System.Object FastActivator Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public static class FastActivator : object Methods | Improve this Doc View Source CreateInstance<T>() Declaration public static T CreateInstance<T>() where T : new() Returns Type Description T Type Parameters Name Description T"
  },
  "api/Fluint.Layer.Miscellaneous.Format.html": {
    "href": "api/Fluint.Layer.Miscellaneous.Format.html",
    "title": "Enum Format | Fluint",
    "keywords": "Enum Format Namespace : Fluint.Layer.Miscellaneous Assembly : Fluint.Layer.dll Syntax public enum Format : int Fields Name Description Alternative Default MarkDown Minimal"
  },
  "api/Fluint.Layer.Miscellaneous.html": {
    "href": "api/Fluint.Layer.Miscellaneous.html",
    "title": "Namespace Fluint.Layer.Miscellaneous | Fluint",
    "keywords": "Namespace Fluint.Layer.Miscellaneous Classes ConsoleHelper Shameless steal! https://gist.github.com/RickStrahl/52c9ee43bd2723bcdf7bf4d24b029768 ConsoleTable Shameless steal from https://github.com/khalidabuhakmeh/ConsoleTables/blob/master/src/ConsoleTables/ConsoleTable.cs ConsoleTableOptions DynamicModuleLambdaCompiler FastActivator Enums Alignment Format"
  },
  "api/Fluint.Layer.ModuleAttribute.html": {
    "href": "api/Fluint.Layer.ModuleAttribute.html",
    "title": "Class ModuleAttribute | Fluint",
    "keywords": "Class ModuleAttribute An attribute containing the name and the description of the module. Inheritance System.Object ModuleAttribute Namespace : Fluint.Layer Assembly : Fluint.Layer.dll Syntax public class ModuleAttribute : Attribute Constructors | Improve this Doc View Source ModuleAttribute(String, String) Declaration public ModuleAttribute(string moduleName, string description) Parameters Type Name Description System.String moduleName System.String description | Improve this Doc View Source ModuleAttribute(String, String, String) Declaration public ModuleAttribute(string moduleName, string description, string help) Parameters Type Name Description System.String moduleName System.String description System.String help Properties | Improve this Doc View Source Description The description of the module. Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source Help Declaration public string Help { get; } Property Value Type Description System.String | Improve this Doc View Source ModuleName The name of the module Declaration public string ModuleName { get; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.ModulesManager.html": {
    "href": "api/Fluint.Layer.ModulesManager.html",
    "title": "Class ModulesManager | Fluint",
    "keywords": "Class ModulesManager Inheritance System.Object ModulesManager Namespace : Fluint.Layer Assembly : Fluint.Layer.dll Syntax public static class ModulesManager : object Methods | Improve this Doc View Source LoadFolder(String) Loads the modules inside the file using System.Reflection Declaration public static ModuleCollection LoadFolder(string modulesfolder) Parameters Type Name Description System.String modulesfolder The path of the folder to be loaded. Returns Type Description ModuleCollection"
  },
  "api/Fluint.Layer.Networking.Client.ClientData.html": {
    "href": "api/Fluint.Layer.Networking.Client.ClientData.html",
    "title": "Struct ClientData | Fluint",
    "keywords": "Struct ClientData Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public struct ClientData Properties | Improve this Doc View Source ID The Identifying ID of the client. Declaration public Guid ID { get; set; } Property Value Type Description Guid | Improve this Doc View Source Username The username of the cslient. Declaration public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.Networking.Client.ConnectedToServerEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Client.ConnectedToServerEventArgs.html",
    "title": "Class ConnectedToServerEventArgs | Fluint",
    "keywords": "Class ConnectedToServerEventArgs event arguments for when the client is connected to the server. Inheritance System.Object ConnectedToServerEventArgs Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public class ConnectedToServerEventArgs : EventArgs Constructors | Improve this Doc View Source ConnectedToServerEventArgs(ServerData, IEnumerable<ClientData>) Declaration public ConnectedToServerEventArgs(ServerData serverInfo, IEnumerable<ClientData> clientsConnected) Parameters Type Name Description ServerData serverInfo IEnumerable < ClientData > clientsConnected Properties | Improve this Doc View Source ClientsConnected The Collection of clients who are connected to this server, including this one. Declaration public ReadOnlyCollection<ClientData> ClientsConnected { get; } Property Value Type Description ReadOnlyCollection < ClientData > | Improve this Doc View Source ServerInfo The info of the server connected to. Declaration public ServerData ServerInfo { get; } Property Value Type Description ServerData"
  },
  "api/Fluint.Layer.Networking.Client.DisconnectedFromServerEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Client.DisconnectedFromServerEventArgs.html",
    "title": "Class DisconnectedFromServerEventArgs | Fluint",
    "keywords": "Class DisconnectedFromServerEventArgs Inheritance System.Object DisconnectedFromServerEventArgs Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public class DisconnectedFromServerEventArgs : EventArgs Constructors | Improve this Doc View Source DisconnectedFromServerEventArgs(DisconnectionReason, ServerData) Declaration public DisconnectedFromServerEventArgs(DisconnectionReason reason, ServerData serverInfo) Parameters Type Name Description DisconnectionReason reason ServerData serverInfo Properties | Improve this Doc View Source Reason The reason the client disconnected. Declaration public DisconnectionReason Reason { get; } Property Value Type Description DisconnectionReason | Improve this Doc View Source ServerInfo The server disconnected from. Declaration public ServerData ServerInfo { get; } Property Value Type Description ServerData"
  },
  "api/Fluint.Layer.Networking.Client.html": {
    "href": "api/Fluint.Layer.Networking.Client.html",
    "title": "Namespace Fluint.Layer.Networking.Client | Fluint",
    "keywords": "Namespace Fluint.Layer.Networking.Client Classes ConnectedToServerEventArgs event arguments for when the client is connected to the server. DisconnectedFromServerEventArgs MessageReceivedEventArgs ServerTickedEventArgs Structs ClientData Interfaces IClient The managing class on the Client-Side. IClientTask"
  },
  "api/Fluint.Layer.Networking.Client.IClient.html": {
    "href": "api/Fluint.Layer.Networking.Client.IClient.html",
    "title": "Interface IClient | Fluint",
    "keywords": "Interface IClient The managing class on the Client-Side. Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public interface IClient : IModule Properties | Improve this Doc View Source ClientInfo The info of this Client Declaration ClientData ClientInfo { get; set; } Property Value Type Description ClientData | Improve this Doc View Source IsConnected The connection state of this client. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Server Server Connected To. Declaration ServerData Server { get; } Property Value Type Description ServerData Methods | Improve this Doc View Source Connect(ServerData) Connects to server. (Sets Server ) Declaration void Connect(ServerData serverInfo) Parameters Type Name Description ServerData serverInfo Server to connect to. | Improve this Doc View Source Disconnect() Disconnects from the server. Declaration void Disconnect() | Improve this Doc View Source SendMessage(String) Sends a message to all clients. Declaration void SendMessage(string data) Parameters Type Name Description System.String data"
  },
  "api/Fluint.Layer.Networking.Client.IClientTask.html": {
    "href": "api/Fluint.Layer.Networking.Client.IClientTask.html",
    "title": "Interface IClientTask | Fluint",
    "keywords": "Interface IClientTask Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public interface IClientTask"
  },
  "api/Fluint.Layer.Networking.Client.MessageReceivedEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Client.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs | Fluint",
    "keywords": "Class MessageReceivedEventArgs Inheritance System.Object MessageReceivedEventArgs Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public class MessageReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source MessageReceivedEventArgs(ClientData, String) Declaration public MessageReceivedEventArgs(ClientData sender, string messageData) Parameters Type Name Description ClientData sender System.String messageData Properties | Improve this Doc View Source MessageData The message text (string). Declaration public string MessageData { get; } Property Value Type Description System.String | Improve this Doc View Source Sender The Client who sent the message. Declaration public ClientData Sender { get; } Property Value Type Description ClientData"
  },
  "api/Fluint.Layer.Networking.Client.ServerTickedEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Client.ServerTickedEventArgs.html",
    "title": "Class ServerTickedEventArgs | Fluint",
    "keywords": "Class ServerTickedEventArgs Inheritance System.Object ServerTickedEventArgs Namespace : Fluint.Layer.Networking.Client Assembly : Fluint.Layer.dll Syntax public class ServerTickedEventArgs : EventArgs Constructors | Improve this Doc View Source ServerTickedEventArgs(NetworkPacket) Declaration public ServerTickedEventArgs(NetworkPacket networkPacket) Parameters Type Name Description NetworkPacket networkPacket Properties | Improve this Doc View Source NetworkPacket The data that the server sent. Declaration public NetworkPacket NetworkPacket { get; } Property Value Type Description NetworkPacket"
  },
  "api/Fluint.Layer.Networking.DisconnectionReason.html": {
    "href": "api/Fluint.Layer.Networking.DisconnectionReason.html",
    "title": "Enum DisconnectionReason | Fluint",
    "keywords": "Enum DisconnectionReason Namespace : Fluint.Layer.Networking Assembly : Fluint.Layer.dll Syntax public enum DisconnectionReason : int Fields Name Description KickedByServer when a client is kicked. PluginMismatch when a client has unmatching plugins with the server/other clients. TimedOut when a client times out (when he is not responding). UserLogOff when a client logs off manually (by himself)."
  },
  "api/Fluint.Layer.Networking.html": {
    "href": "api/Fluint.Layer.Networking.html",
    "title": "Namespace Fluint.Layer.Networking | Fluint",
    "keywords": "Namespace Fluint.Layer.Networking Classes NetworkPacket A data structure to be transported Interfaces INetworkTaskManager IServerTaskHelper Enums DisconnectionReason"
  },
  "api/Fluint.Layer.Networking.INetworkTaskManager.html": {
    "href": "api/Fluint.Layer.Networking.INetworkTaskManager.html",
    "title": "Interface INetworkTaskManager | Fluint",
    "keywords": "Interface INetworkTaskManager Namespace : Fluint.Layer.Networking Assembly : Fluint.Layer.dll Syntax public interface INetworkTaskManager Methods | Improve this Doc View Source Parse(String) Declaration void Parse(string task) Parameters Type Name Description System.String task"
  },
  "api/Fluint.Layer.Networking.IServerTaskHelper.html": {
    "href": "api/Fluint.Layer.Networking.IServerTaskHelper.html",
    "title": "Interface IServerTaskHelper | Fluint",
    "keywords": "Interface IServerTaskHelper Namespace : Fluint.Layer.Networking Assembly : Fluint.Layer.dll Syntax public interface IServerTaskHelper : IModule Properties | Improve this Doc View Source PacketsToMultiCast Declaration List<NetworkPacket> PacketsToMultiCast { get; } Property Value Type Description List < NetworkPacket > Methods | Improve this Doc View Source InvokeConnectedEvent(ClientData) Declaration void InvokeConnectedEvent(ClientData client) Parameters Type Name Description ClientData client | Improve this Doc View Source InvokeDisconnectedEvent(ClientData, DisconnectionReason) Declaration void InvokeDisconnectedEvent(ClientData client, DisconnectionReason reason) Parameters Type Name Description ClientData client DisconnectionReason reason"
  },
  "api/Fluint.Layer.Networking.NetworkPacket.html": {
    "href": "api/Fluint.Layer.Networking.NetworkPacket.html",
    "title": "Class NetworkPacket | Fluint",
    "keywords": "Class NetworkPacket A data structure to be transported Inheritance System.Object NetworkPacket Namespace : Fluint.Layer.Networking Assembly : Fluint.Layer.dll Syntax public class NetworkPacket : object Constructors | Improve this Doc View Source NetworkPacket(String, Object[]) Declaration public NetworkPacket(string task, object[] arguments) Parameters Type Name Description System.String task System.Object [] arguments Properties | Improve this Doc View Source Arguments Declaration public object[] Arguments { get; } Property Value Type Description System.Object [] | Improve this Doc View Source Task Declaration public string Task { get; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.Networking.Server.ClientConnectedEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Server.ClientConnectedEventArgs.html",
    "title": "Class ClientConnectedEventArgs | Fluint",
    "keywords": "Class ClientConnectedEventArgs Event arguments for when a client connects. Inheritance System.Object ClientConnectedEventArgs Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public class ClientConnectedEventArgs : EventArgs Constructors | Improve this Doc View Source ClientConnectedEventArgs(ClientData) Declaration public ClientConnectedEventArgs(ClientData client) Parameters Type Name Description ClientData client Properties | Improve this Doc View Source Client The data of the client who connected. Declaration public ClientData Client { get; } Property Value Type Description ClientData"
  },
  "api/Fluint.Layer.Networking.Server.ClientDisconnectedEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Server.ClientDisconnectedEventArgs.html",
    "title": "Class ClientDisconnectedEventArgs | Fluint",
    "keywords": "Class ClientDisconnectedEventArgs Event Arguments for when the clients disconnects. Inheritance System.Object ClientDisconnectedEventArgs Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public class ClientDisconnectedEventArgs : EventArgs Constructors | Improve this Doc View Source ClientDisconnectedEventArgs(ClientData, DisconnectionReason) Declaration public ClientDisconnectedEventArgs(ClientData client, DisconnectionReason reason) Parameters Type Name Description ClientData client DisconnectionReason reason Properties | Improve this Doc View Source Client The data of the client who disconnected. Declaration public ClientData Client { get; } Property Value Type Description ClientData | Improve this Doc View Source Reason The reason the client disconnected. Declaration public DisconnectionReason Reason { get; } Property Value Type Description DisconnectionReason"
  },
  "api/Fluint.Layer.Networking.Server.ClientSentDataEventArgs.html": {
    "href": "api/Fluint.Layer.Networking.Server.ClientSentDataEventArgs.html",
    "title": "Class ClientSentDataEventArgs | Fluint",
    "keywords": "Class ClientSentDataEventArgs Event Arguments for when the client sends data. Inheritance System.Object ClientSentDataEventArgs Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public class ClientSentDataEventArgs : EventArgs Constructors | Improve this Doc View Source ClientSentDataEventArgs(NetworkPacket, ClientData) Declaration public ClientSentDataEventArgs(NetworkPacket data, ClientData client) Parameters Type Name Description NetworkPacket data ClientData client Properties | Improve this Doc View Source Client The data of the client who sent. Declaration public ClientData Client { get; } Property Value Type Description ClientData | Improve this Doc View Source Data The Data The client sent. Declaration public NetworkPacket Data { get; } Property Value Type Description NetworkPacket"
  },
  "api/Fluint.Layer.Networking.Server.html": {
    "href": "api/Fluint.Layer.Networking.Server.html",
    "title": "Namespace Fluint.Layer.Networking.Server | Fluint",
    "keywords": "Namespace Fluint.Layer.Networking.Server Classes ClientConnectedEventArgs Event arguments for when a client connects. ClientDisconnectedEventArgs Event Arguments for when the clients disconnects. ClientSentDataEventArgs Event Arguments for when the client sends data. Structs ServerData an interface for storing the server's data. Interfaces IServer The managing class on the Server-Side. IServerTask"
  },
  "api/Fluint.Layer.Networking.Server.IServer.html": {
    "href": "api/Fluint.Layer.Networking.Server.IServer.html",
    "title": "Interface IServer | Fluint",
    "keywords": "Interface IServer The managing class on the Server-Side. Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public interface IServer : IModule Properties | Improve this Doc View Source Clients Contains all the connected users. Declaration IReadOnlyCollection<ClientData> Clients { get; } Property Value Type Description IReadOnlyCollection < ClientData > | Improve this Doc View Source ServerInfo Contains the metadata concerning the server. Declaration ServerData ServerInfo { get; set; } Property Value Type Description ServerData | Improve this Doc View Source ServerStarted returns true if the server is started, returns false otherwise. Declaration bool ServerStarted { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Restart() Restarts the server. Declaration void Restart() | Improve this Doc View Source Start() Starts the server. Declaration void Start() | Improve this Doc View Source Stop() Stops the server. Declaration void Stop()"
  },
  "api/Fluint.Layer.Networking.Server.IServerTask.html": {
    "href": "api/Fluint.Layer.Networking.Server.IServerTask.html",
    "title": "Interface IServerTask | Fluint",
    "keywords": "Interface IServerTask Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public interface IServerTask : IModule Properties | Improve this Doc View Source TaskId Declaration string TaskId { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Do(ref IServerTaskHelper) Declaration void Do(ref IServerTaskHelper helper) Parameters Type Name Description IServerTaskHelper helper"
  },
  "api/Fluint.Layer.Networking.Server.ServerData.html": {
    "href": "api/Fluint.Layer.Networking.Server.ServerData.html",
    "title": "Struct ServerData | Fluint",
    "keywords": "Struct ServerData an interface for storing the server's data. Namespace : Fluint.Layer.Networking.Server Assembly : Fluint.Layer.dll Syntax public struct ServerData Properties | Improve this Doc View Source IpAddress The IP Address of the server. Declaration public string IpAddress { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name/tag of the server. (Can be changed at runtime) Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Port The Port Number for clients to connect through. Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TickDelay The tick delay of the server state, dedicates the tick rate. Declaration public int TickDelay { get; set; } Property Value Type Description System.Int32"
  },
  "api/Fluint.Layer.Runtime.FluintInstance.html": {
    "href": "api/Fluint.Layer.Runtime.FluintInstance.html",
    "title": "Class FluintInstance | Fluint",
    "keywords": "Class FluintInstance Inheritance System.Object FluintInstance Implements IRuntime Namespace : Fluint.Layer.Runtime Assembly : Fluint.Layer.dll Syntax public class FluintInstance : object, IRuntime Properties | Improve this Doc View Source Id Declaration public int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Manifest Declaration public StartupManifest Manifest { get; } Property Value Type Description Fluint.Layer.StartupManifest | Improve this Doc View Source Packet Declaration public ModulePacket Packet { get; } Property Value Type Description ModulePacket | Improve this Doc View Source Parent Declaration public InstanceManager Parent { get; } Property Value Type Description InstanceManager | Improve this Doc View Source TaskManager Declaration public ITaskManager TaskManager { get; } Property Value Type Description ITaskManager Methods | Improve this Doc View Source Create(Int32, StartupManifest, ModulePacket, InstanceManager) Declaration public void Create(int id, StartupManifest manifest, ModulePacket packet, InstanceManager parent) Parameters Type Name Description System.Int32 id Fluint.Layer.StartupManifest manifest ModulePacket packet InstanceManager parent | Improve this Doc View Source Kill() Declaration public void Kill() | Improve this Doc View Source Start() Declaration public void Start() Implements IRuntime"
  },
  "api/Fluint.Layer.Runtime.html": {
    "href": "api/Fluint.Layer.Runtime.html",
    "title": "Namespace Fluint.Layer.Runtime | Fluint",
    "keywords": "Namespace Fluint.Layer.Runtime Classes FluintInstance InstanceManager Interfaces ICommandLineArgument ICommandLineArgumentParser"
  },
  "api/Fluint.Layer.Runtime.ICommandLineArgument.html": {
    "href": "api/Fluint.Layer.Runtime.ICommandLineArgument.html",
    "title": "Interface ICommandLineArgument | Fluint",
    "keywords": "Interface ICommandLineArgument Namespace : Fluint.Layer.Runtime Assembly : Fluint.Layer.dll Syntax public interface ICommandLineArgument : IModule Properties | Improve this Doc View Source CommandText Declaration string CommandText { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Execute() Declaration void Execute()"
  },
  "api/Fluint.Layer.Runtime.ICommandLineArgumentParser.html": {
    "href": "api/Fluint.Layer.Runtime.ICommandLineArgumentParser.html",
    "title": "Interface ICommandLineArgumentParser | Fluint",
    "keywords": "Interface ICommandLineArgumentParser Namespace : Fluint.Layer.Runtime Assembly : Fluint.Layer.dll Syntax public interface ICommandLineArgumentParser : IModule Methods | Improve this Doc View Source Parse(String, String[]) Declaration void Parse(string command, string[] arguments) Parameters Type Name Description System.String command System.String [] arguments"
  },
  "api/Fluint.Layer.Runtime.InstanceManager.html": {
    "href": "api/Fluint.Layer.Runtime.InstanceManager.html",
    "title": "Class InstanceManager | Fluint",
    "keywords": "Class InstanceManager Inheritance System.Object InstanceManager Namespace : Fluint.Layer.Runtime Assembly : Fluint.Layer.dll Syntax public class InstanceManager : object Constructors | Improve this Doc View Source InstanceManager(StartupManifest) Declaration public InstanceManager(StartupManifest manifest) Parameters Type Name Description Fluint.Layer.StartupManifest manifest Properties | Improve this Doc View Source Instances Declaration public IReadOnlyDictionary<int, IRuntime> Instances { get; } Property Value Type Description IReadOnlyDictionary < System.Int32 , IRuntime > Methods | Improve this Doc View Source CreateInstance<T>() Declaration public int CreateInstance<T>() where T : IRuntime, new() Returns Type Description System.Int32 Type Parameters Name Description T | Improve this Doc View Source Kill(Int32) Declaration public void Kill(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source KillAll() Declaration public void KillAll() | Improve this Doc View Source Start(Int32) Declaration public void Start(int id) Parameters Type Name Description System.Int32 id | Improve this Doc View Source StartAll() Declaration public void StartAll() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Fluint.Layer.SDK.html": {
    "href": "api/Fluint.Layer.SDK.html",
    "title": "Namespace Fluint.Layer.SDK | Fluint",
    "keywords": "Namespace Fluint.Layer.SDK Classes LambdaObject SdkInstance Interfaces ILambda ILambdaListener ILambdaMemory ILambdaParser Enums LambdaStatus"
  },
  "api/Fluint.Layer.SDK.ILambda.html": {
    "href": "api/Fluint.Layer.SDK.ILambda.html",
    "title": "Interface ILambda | Fluint",
    "keywords": "Interface ILambda Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public interface ILambda : IModule Properties | Improve this Doc View Source Command Declaration string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject"
  },
  "api/Fluint.Layer.SDK.ILambdaListener.html": {
    "href": "api/Fluint.Layer.SDK.ILambdaListener.html",
    "title": "Interface ILambdaListener | Fluint",
    "keywords": "Interface ILambdaListener Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public interface ILambdaListener : IModule Methods | Improve this Doc View Source Execute(String) Declaration void Execute(string command) Parameters Type Name Description System.String command | Improve this Doc View Source Listen() Declaration void Listen()"
  },
  "api/Fluint.Layer.SDK.ILambdaMemory.html": {
    "href": "api/Fluint.Layer.SDK.ILambdaMemory.html",
    "title": "Interface ILambdaMemory | Fluint",
    "keywords": "Interface ILambdaMemory Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public interface ILambdaMemory : IModule Methods | Improve this Doc View Source Add(String, Object) Declaration void Add(string name, object value) Parameters Type Name Description System.String name System.Object value | Improve this Doc View Source AsDictionary() Declaration IReadOnlyDictionary<string, object> AsDictionary() Returns Type Description IReadOnlyDictionary < System.String , System.Object > | Improve this Doc View Source Get(String) Declaration object Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object"
  },
  "api/Fluint.Layer.SDK.ILambdaParser.html": {
    "href": "api/Fluint.Layer.SDK.ILambdaParser.html",
    "title": "Interface ILambdaParser | Fluint",
    "keywords": "Interface ILambdaParser Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public interface ILambdaParser : IModule Methods | Improve this Doc View Source Add(ILambda) Declaration void Add(ILambda command) Parameters Type Name Description ILambda command | Improve this Doc View Source Parse(String, String[]) Declaration LambdaObject Parse(string command, string[] args) Parameters Type Name Description System.String command System.String [] args Returns Type Description LambdaObject"
  },
  "api/Fluint.Layer.SDK.LambdaObject.html": {
    "href": "api/Fluint.Layer.SDK.LambdaObject.html",
    "title": "Class LambdaObject | Fluint",
    "keywords": "Class LambdaObject Inheritance System.Object LambdaObject Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public class LambdaObject : object Constructors | Improve this Doc View Source LambdaObject(LambdaStatus) Declaration public LambdaObject(LambdaStatus status) Parameters Type Name Description LambdaStatus status | Improve this Doc View Source LambdaObject(Object) Declaration public LambdaObject(object data) Parameters Type Name Description System.Object data | Improve this Doc View Source LambdaObject(Object, LambdaStatus) Declaration public LambdaObject(object data, LambdaStatus status) Parameters Type Name Description System.Object data LambdaStatus status Fields | Improve this Doc View Source Data Declaration public readonly object Data Field Value Type Description System.Object | Improve this Doc View Source Status Declaration public readonly LambdaStatus Status Field Value Type Description LambdaStatus Properties | Improve this Doc View Source Failure Declaration public static LambdaObject Failure { get; } Property Value Type Description LambdaObject | Improve this Doc View Source Success Declaration public static LambdaObject Success { get; } Property Value Type Description LambdaObject | Improve this Doc View Source Unknown Declaration public static LambdaObject Unknown { get; } Property Value Type Description LambdaObject Methods | Improve this Doc View Source Error(String) Declaration public static LambdaObject Error(string message) Parameters Type Name Description System.String message Returns Type Description LambdaObject | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Fluint.Layer.SDK.LambdaStatus.html": {
    "href": "api/Fluint.Layer.SDK.LambdaStatus.html",
    "title": "Enum LambdaStatus | Fluint",
    "keywords": "Enum LambdaStatus Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public enum LambdaStatus : int Fields Name Description Failure Success Unknown"
  },
  "api/Fluint.Layer.SDK.SdkInstance.html": {
    "href": "api/Fluint.Layer.SDK.SdkInstance.html",
    "title": "Class SdkInstance | Fluint",
    "keywords": "Class SdkInstance Inheritance System.Object SdkInstance Implements IRuntime Namespace : Fluint.Layer.SDK Assembly : Fluint.Layer.dll Syntax public class SdkInstance : object, IRuntime Properties | Improve this Doc View Source Id Declaration public int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Manifest Declaration public StartupManifest Manifest { get; } Property Value Type Description Fluint.Layer.StartupManifest | Improve this Doc View Source Packet Declaration public ModulePacket Packet { get; } Property Value Type Description ModulePacket | Improve this Doc View Source Parent Declaration public InstanceManager Parent { get; } Property Value Type Description InstanceManager Methods | Improve this Doc View Source Create(Int32, StartupManifest, ModulePacket, InstanceManager) Declaration public void Create(int id, StartupManifest manifest, ModulePacket packet, InstanceManager parent) Parameters Type Name Description System.Int32 id Fluint.Layer.StartupManifest manifest ModulePacket packet InstanceManager parent | Improve this Doc View Source Kill() Declaration public void Kill() | Improve this Doc View Source Start() Declaration public void Start() Implements IRuntime"
  },
  "api/Fluint.Layer.StateManagement.GlobalContext.html": {
    "href": "api/Fluint.Layer.StateManagement.GlobalContext.html",
    "title": "Class GlobalContext | Fluint",
    "keywords": "Class GlobalContext Inheritance System.Object GlobalContext Implements IStatefulContext IModule Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class GlobalContext : object, IStatefulContext, IModule Implements IStatefulContext IModule"
  },
  "api/Fluint.Layer.StateManagement.html": {
    "href": "api/Fluint.Layer.StateManagement.html",
    "title": "Namespace Fluint.Layer.StateManagement | Fluint",
    "keywords": "Namespace Fluint.Layer.StateManagement Classes GlobalContext InspectableAttribute Replicable ReplicationEvent StateChangeEvent StateException WorldState Interfaces IState IStatefulContext IStateManager Enums ReplicationMode"
  },
  "api/Fluint.Layer.StateManagement.InspectableAttribute.html": {
    "href": "api/Fluint.Layer.StateManagement.InspectableAttribute.html",
    "title": "Class InspectableAttribute | Fluint",
    "keywords": "Class InspectableAttribute Inheritance System.Object InspectableAttribute Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class InspectableAttribute : Attribute"
  },
  "api/Fluint.Layer.StateManagement.IState.html": {
    "href": "api/Fluint.Layer.StateManagement.IState.html",
    "title": "Interface IState | Fluint",
    "keywords": "Interface IState Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public interface IState"
  },
  "api/Fluint.Layer.StateManagement.IStatefulContext.html": {
    "href": "api/Fluint.Layer.StateManagement.IStatefulContext.html",
    "title": "Interface IStatefulContext | Fluint",
    "keywords": "Interface IStatefulContext Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public interface IStatefulContext : IModule"
  },
  "api/Fluint.Layer.StateManagement.IStateManager.html": {
    "href": "api/Fluint.Layer.StateManagement.IStateManager.html",
    "title": "Interface IStateManager | Fluint",
    "keywords": "Interface IStateManager Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public interface IStateManager : IModule Methods | Improve this Doc View Source GetState<T>() Declaration T GetState<T>() where T : IState Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetState<T>(IStatefulContext) Declaration T GetState<T>(IStatefulContext context) where T : IState Parameters Type Name Description IStatefulContext context Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetStates(IStatefulContext) Declaration IEnumerable<IState> GetStates(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description IEnumerable < IState > | Improve this Doc View Source HasState<T>() Declaration bool HasState<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source HasState<T>(IStatefulContext) Declaration bool HasState<T>(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source InitializeState<T>(IState) Declaration T InitializeState<T>(IState state) where T : IState Parameters Type Name Description IState state Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source InitializeState<T>(IState, IStatefulContext) Declaration T InitializeState<T>(IState state, IStatefulContext context) where T : IState Parameters Type Name Description IState state IStatefulContext context Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source InitializeStatefulContext(IStatefulContext) Declaration IStatefulContext InitializeStatefulContext(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description IStatefulContext | Improve this Doc View Source InitializeStatefulContext(IStatefulContext, IStatefulContext) Declaration IStatefulContext InitializeStatefulContext(IStatefulContext context, IStatefulContext parent) Parameters Type Name Description IStatefulContext context IStatefulContext parent Returns Type Description IStatefulContext"
  },
  "api/Fluint.Layer.StateManagement.Replicable.html": {
    "href": "api/Fluint.Layer.StateManagement.Replicable.html",
    "title": "Class Replicable | Fluint",
    "keywords": "Class Replicable Inheritance System.Object Replicable Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class Replicable : Attribute Constructors | Improve this Doc View Source Replicable(ReplicationMode, EventHandler<ReplicationEvent>) Declaration public Replicable(ReplicationMode mode, EventHandler<ReplicationEvent> incoming) Parameters Type Name Description ReplicationMode mode EventHandler < ReplicationEvent > incoming Fields | Improve this Doc View Source ReplicationMode Declaration public ReplicationMode ReplicationMode Field Value Type Description ReplicationMode Methods | Improve this Doc View Source OnIncomingReplication(ReplicationEvent) Declaration protected virtual void OnIncomingReplication(ReplicationEvent e) Parameters Type Name Description ReplicationEvent e Events | Improve this Doc View Source IncomingReplication Declaration public event EventHandler<ReplicationEvent> IncomingReplication Event Type Type Description EventHandler < ReplicationEvent >"
  },
  "api/Fluint.Layer.StateManagement.ReplicationEvent.html": {
    "href": "api/Fluint.Layer.StateManagement.ReplicationEvent.html",
    "title": "Class ReplicationEvent | Fluint",
    "keywords": "Class ReplicationEvent Inheritance System.Object ReplicationEvent Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class ReplicationEvent : EventArgs"
  },
  "api/Fluint.Layer.StateManagement.ReplicationMode.html": {
    "href": "api/Fluint.Layer.StateManagement.ReplicationMode.html",
    "title": "Enum ReplicationMode | Fluint",
    "keywords": "Enum ReplicationMode Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public enum ReplicationMode : int Fields Name Description Broadcast Sync"
  },
  "api/Fluint.Layer.StateManagement.StateChangeEvent.html": {
    "href": "api/Fluint.Layer.StateManagement.StateChangeEvent.html",
    "title": "Class StateChangeEvent | Fluint",
    "keywords": "Class StateChangeEvent Inheritance System.Object StateChangeEvent Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class StateChangeEvent : object"
  },
  "api/Fluint.Layer.StateManagement.StateException.html": {
    "href": "api/Fluint.Layer.StateManagement.StateException.html",
    "title": "Class StateException | Fluint",
    "keywords": "Class StateException Inheritance System.Object StateException Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class StateException : Exception Constructors | Improve this Doc View Source StateException(String) Declaration public StateException(string message) Parameters Type Name Description System.String message"
  },
  "api/Fluint.Layer.StateManagement.WorldState.html": {
    "href": "api/Fluint.Layer.StateManagement.WorldState.html",
    "title": "Class WorldState | Fluint",
    "keywords": "Class WorldState Inheritance System.Object WorldState Implements IState Namespace : Fluint.Layer.StateManagement Assembly : Fluint.Layer.dll Syntax public class WorldState : object, IState Fields | Improve this Doc View Source HudBuffer Declaration public IVertexBuffer HudBuffer Field Value Type Description IVertexBuffer | Improve this Doc View Source WorldVertices Declaration public List<PositionColorVertex> WorldVertices Field Value Type Description List < PositionColorVertex > | Improve this Doc View Source WorldVerticesBuffer Declaration public IVertexBuffer WorldVerticesBuffer Field Value Type Description IVertexBuffer Implements IState"
  },
  "api/Fluint.Layer.Tasks.html": {
    "href": "api/Fluint.Layer.Tasks.html",
    "title": "Namespace Fluint.Layer.Tasks | Fluint",
    "keywords": "Namespace Fluint.Layer.Tasks Classes TaskArgs Interfaces ITask ITaskManager Enums TaskSchedule"
  },
  "api/Fluint.Layer.Tasks.ITask.html": {
    "href": "api/Fluint.Layer.Tasks.ITask.html",
    "title": "Interface ITask | Fluint",
    "keywords": "Interface ITask Namespace : Fluint.Layer.Tasks Assembly : Fluint.Layer.dll Syntax public interface ITask : IModule Properties | Improve this Doc View Source Priority Declaration int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration void Start(TaskArgs args) Parameters Type Name Description TaskArgs args"
  },
  "api/Fluint.Layer.Tasks.ITaskManager.html": {
    "href": "api/Fluint.Layer.Tasks.ITaskManager.html",
    "title": "Interface ITaskManager | Fluint",
    "keywords": "Interface ITaskManager Namespace : Fluint.Layer.Tasks Assembly : Fluint.Layer.dll Syntax public interface ITaskManager : IModule Methods | Improve this Doc View Source Invoke(TaskSchedule) Declaration void Invoke(TaskSchedule schedule) Parameters Type Name Description TaskSchedule schedule | Improve this Doc View Source Invoke(TaskSchedule, TaskArgs) Declaration void Invoke(TaskSchedule schedule, TaskArgs args) Parameters Type Name Description TaskSchedule schedule TaskArgs args | Improve this Doc View Source StopAll() Declaration void StopAll()"
  },
  "api/Fluint.Layer.Tasks.TaskArgs.html": {
    "href": "api/Fluint.Layer.Tasks.TaskArgs.html",
    "title": "Class TaskArgs | Fluint",
    "keywords": "Class TaskArgs Inheritance System.Object TaskArgs Namespace : Fluint.Layer.Tasks Assembly : Fluint.Layer.dll Syntax public class TaskArgs : object Constructors | Improve this Doc View Source TaskArgs() Declaration public TaskArgs() | Improve this Doc View Source TaskArgs(Object) Declaration public TaskArgs(object invoker) Parameters Type Name Description System.Object invoker | Improve this Doc View Source TaskArgs(Object[]) Declaration public TaskArgs(object[] args) Parameters Type Name Description System.Object [] args | Improve this Doc View Source TaskArgs(Object[], Object) Declaration public TaskArgs(object[] args, object invoker) Parameters Type Name Description System.Object [] args System.Object invoker Properties | Improve this Doc View Source Args Declaration public object[] Args { get; } Property Value Type Description System.Object [] | Improve this Doc View Source Invoker Declaration public object Invoker { get; } Property Value Type Description System.Object"
  },
  "api/Fluint.Layer.Tasks.TaskSchedule.html": {
    "href": "api/Fluint.Layer.Tasks.TaskSchedule.html",
    "title": "Enum TaskSchedule | Fluint",
    "keywords": "Enum TaskSchedule Namespace : Fluint.Layer.Tasks Assembly : Fluint.Layer.dll Syntax public enum TaskSchedule : int Fields Name Description Background Startup WindowDisposing WindowEnterText WindowMouseScroll WindowReady WindowRender WindowResize WindowUpdate"
  },
  "api/Fluint.Layer.UI.Control.html": {
    "href": "api/Fluint.Layer.UI.Control.html",
    "title": "Class Control | Fluint",
    "keywords": "Class Control Inheritance System.Object Control AboutControl CameraControl MetricsControl ToolboxControl UIDemoControl Implements IGuiComponent Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public class Control : object, IGuiComponent Fields | Improve this Doc View Source Children Declaration protected readonly List<IGuiComponent> Children Field Value Type Description List < IGuiComponent > Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Begin(String, IWindow) Declaration public virtual void Begin(string name, IWindow parent) Parameters Type Name Description System.String name IWindow parent | Improve this Doc View Source Tick() Declaration public virtual void Tick() Implements IGuiComponent"
  },
  "api/Fluint.Layer.UI.Font.html": {
    "href": "api/Fluint.Layer.UI.Font.html",
    "title": "Class Font | Fluint",
    "keywords": "Class Font Inheritance System.Object Font Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public class Font : object Constructors | Improve this Doc View Source Font(Action, Action) Declaration public Font(Action enable, Action disable) Parameters Type Name Description Action enable Action disable Properties | Improve this Doc View Source DisableFont Declaration public Action DisableFont { get; } Property Value Type Description Action | Improve this Doc View Source EnableFont Declaration public Action EnableFont { get; } Property Value Type Description Action"
  },
  "api/Fluint.Layer.UI.html": {
    "href": "api/Fluint.Layer.UI.html",
    "title": "Namespace Fluint.Layer.UI | Fluint",
    "keywords": "Namespace Fluint.Layer.UI Classes Control Font ThemeConfiguration UIConfiguration Interfaces IButton IContainer IDemo IFontManager IGuiComponent IGuiContainer<T> IGuiInstanceManager IImage IImageButton ILayout IListbox IMainMenu IMenuItem IMultiLineTextBox ITextBox ITextLabel ITextureView IViewport"
  },
  "api/Fluint.Layer.UI.IButton.html": {
    "href": "api/Fluint.Layer.UI.IButton.html",
    "title": "Interface IButton | Fluint",
    "keywords": "Interface IButton Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IButton : IModule, IGuiComponent Properties | Improve this Doc View Source OnClick Declaration Action OnClick { get; set; } Property Value Type Description Action | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.IContainer.html": {
    "href": "api/Fluint.Layer.UI.IContainer.html",
    "title": "Interface IContainer | Fluint",
    "keywords": "Interface IContainer Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IContainer : IModule, IGuiContainer<IGuiComponent>, IGuiComponent, IDictionary<string, IGuiComponent> Properties | Improve this Doc View Source IsFocused Declaration bool IsFocused { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Location Declaration Vector2i Location { get; } Property Value Type Description Vector2i | Improve this Doc View Source Resizable Declaration bool Resizable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ScrollBar Declaration bool ScrollBar { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Size Declaration Vector2i Size { get; } Property Value Type Description Vector2i | Improve this Doc View Source Title Declaration string Title { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.IDemo.html": {
    "href": "api/Fluint.Layer.UI.IDemo.html",
    "title": "Interface IDemo | Fluint",
    "keywords": "Interface IDemo Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IDemo : IGuiComponent, IModule"
  },
  "api/Fluint.Layer.UI.IFontManager.html": {
    "href": "api/Fluint.Layer.UI.IFontManager.html",
    "title": "Interface IFontManager | Fluint",
    "keywords": "Interface IFontManager Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IFontManager : IModule Methods | Improve this Doc View Source LoadFont(String, Single) Declaration Font LoadFont(string fontName, float fontSize = 16F) Parameters Type Name Description System.String fontName System.Single fontSize Returns Type Description Font"
  },
  "api/Fluint.Layer.UI.IGuiComponent.html": {
    "href": "api/Fluint.Layer.UI.IGuiComponent.html",
    "title": "Interface IGuiComponent | Fluint",
    "keywords": "Interface IGuiComponent Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IGuiComponent Properties | Improve this Doc View Source Name Declaration string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration void Tick()"
  },
  "api/Fluint.Layer.UI.IGuiContainer-1.html": {
    "href": "api/Fluint.Layer.UI.IGuiContainer-1.html",
    "title": "Interface IGuiContainer<T> | Fluint",
    "keywords": "Interface IGuiContainer<T> Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IGuiContainer<T> : IGuiComponent, IDictionary<string, T> where T : IGuiComponent Type Parameters Name Description T"
  },
  "api/Fluint.Layer.UI.IGuiInstanceManager.html": {
    "href": "api/Fluint.Layer.UI.IGuiInstanceManager.html",
    "title": "Interface IGuiInstanceManager | Fluint",
    "keywords": "Interface IGuiInstanceManager Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IGuiInstanceManager : IModule Properties | Improve this Doc View Source MainWindow Declaration IWindow MainWindow { get; } Property Value Type Description IWindow Methods | Improve this Doc View Source Adopt(IWindow) please don't call outside provider. Declaration void Adopt(in IWindow window) Parameters Type Name Description IWindow window"
  },
  "api/Fluint.Layer.UI.IImage.html": {
    "href": "api/Fluint.Layer.UI.IImage.html",
    "title": "Interface IImage | Fluint",
    "keywords": "Interface IImage Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IImage : IModule, IGuiComponent Properties | Improve this Doc View Source Path Declaration string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration Vector2i Size { get; set; } Property Value Type Description Vector2i"
  },
  "api/Fluint.Layer.UI.IImageButton.html": {
    "href": "api/Fluint.Layer.UI.IImageButton.html",
    "title": "Interface IImageButton | Fluint",
    "keywords": "Interface IImageButton Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IImageButton : IModule, IGuiComponent Properties | Improve this Doc View Source BackgroundColor Declaration Color4 BackgroundColor { get; set; } Property Value Type Description Color4 | Improve this Doc View Source OnClick Declaration Action OnClick { get; set; } Property Value Type Description Action | Improve this Doc View Source Padding Declaration float Padding { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Path Declaration string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.ILayout.html": {
    "href": "api/Fluint.Layer.UI.ILayout.html",
    "title": "Interface ILayout | Fluint",
    "keywords": "Interface ILayout Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface ILayout : IModule Methods | Improve this Doc View Source Initialize(IWindow) Declaration void Initialize(IWindow window) Parameters Type Name Description IWindow window"
  },
  "api/Fluint.Layer.UI.IListbox.html": {
    "href": "api/Fluint.Layer.UI.IListbox.html",
    "title": "Interface IListbox | Fluint",
    "keywords": "Interface IListbox Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IListbox : IGuiComponent, IModule"
  },
  "api/Fluint.Layer.UI.IMainMenu.html": {
    "href": "api/Fluint.Layer.UI.IMainMenu.html",
    "title": "Interface IMainMenu | Fluint",
    "keywords": "Interface IMainMenu Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IMainMenu : IModule, IGuiContainer<IMenuItem>, IGuiComponent, IDictionary<string, IMenuItem>"
  },
  "api/Fluint.Layer.UI.IMenuItem.html": {
    "href": "api/Fluint.Layer.UI.IMenuItem.html",
    "title": "Interface IMenuItem | Fluint",
    "keywords": "Interface IMenuItem Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IMenuItem : IModule, IGuiContainer<IMenuItem>, IGuiComponent, IDictionary<string, IMenuItem> Properties | Improve this Doc View Source OnClick Declaration ModularAction OnClick { get; set; } Property Value Type Description ModularAction | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.IMultiLineTextBox.html": {
    "href": "api/Fluint.Layer.UI.IMultiLineTextBox.html",
    "title": "Interface IMultiLineTextBox | Fluint",
    "keywords": "Interface IMultiLineTextBox Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IMultiLineTextBox : IModule, IGuiComponent Properties | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.ITextBox.html": {
    "href": "api/Fluint.Layer.UI.ITextBox.html",
    "title": "Interface ITextBox | Fluint",
    "keywords": "Interface ITextBox Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface ITextBox : IModule, IGuiComponent Properties | Improve this Doc View Source SideText Declaration string SideText { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.ITextLabel.html": {
    "href": "api/Fluint.Layer.UI.ITextLabel.html",
    "title": "Interface ITextLabel | Fluint",
    "keywords": "Interface ITextLabel Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface ITextLabel : IModule, IGuiComponent Properties | Improve this Doc View Source Text Declaration string Text { get; set; } Property Value Type Description System.String"
  },
  "api/Fluint.Layer.UI.ITextureView.html": {
    "href": "api/Fluint.Layer.UI.ITextureView.html",
    "title": "Interface ITextureView | Fluint",
    "keywords": "Interface ITextureView Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface ITextureView : IModule, IGuiComponent Properties | Improve this Doc View Source Size Declaration Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Texture Declaration ITexture Texture { get; set; } Property Value Type Description ITexture"
  },
  "api/Fluint.Layer.UI.IViewport.html": {
    "href": "api/Fluint.Layer.UI.IViewport.html",
    "title": "Interface IViewport | Fluint",
    "keywords": "Interface IViewport Inherited Members IGuiComponent.Name IGuiComponent.Begin(String) IGuiComponent.Tick() Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public interface IViewport : IModule, IGuiComponent Properties | Improve this Doc View Source Size Declaration Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source SwapChain Declaration ISwapChain SwapChain { get; set; } Property Value Type Description ISwapChain"
  },
  "api/Fluint.Layer.UI.ThemeConfiguration.html": {
    "href": "api/Fluint.Layer.UI.ThemeConfiguration.html",
    "title": "Class ThemeConfiguration | Fluint",
    "keywords": "Class ThemeConfiguration Inheritance System.Object ThemeConfiguration Implements IConfiguration Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public class ThemeConfiguration : object, IConfiguration Constructors | Improve this Doc View Source ThemeConfiguration() Declaration public ThemeConfiguration() Properties | Improve this Doc View Source Border Declaration public Vector4 Border { get; } Property Value Type Description Vector4 | Improve this Doc View Source BorderShadow Declaration public Vector4 BorderShadow { get; } Property Value Type Description Vector4 | Improve this Doc View Source Button Declaration public Vector4 Button { get; } Property Value Type Description Vector4 | Improve this Doc View Source ButtonActive Declaration public Vector4 ButtonActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source ButtonHovered Declaration public Vector4 ButtonHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source CheckMark Declaration public Vector4 CheckMark { get; } Property Value Type Description Vector4 | Improve this Doc View Source ChildBg Declaration public Vector4 ChildBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source FrameBg Declaration public Vector4 FrameBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source FrameBgActive Declaration public Vector4 FrameBgActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source FrameBgHovered Declaration public Vector4 FrameBgHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source FramePadding Declaration public Vector2 FramePadding { get; } Property Value Type Description Vector2 | Improve this Doc View Source FrameRounding Declaration public float FrameRounding { get; } Property Value Type Description System.Single | Improve this Doc View Source GrabMinSize Declaration public float GrabMinSize { get; } Property Value Type Description System.Single | Improve this Doc View Source GrabRounding Declaration public float GrabRounding { get; } Property Value Type Description System.Single | Improve this Doc View Source Header Declaration public Vector4 Header { get; } Property Value Type Description Vector4 | Improve this Doc View Source HeaderActive Declaration public Vector4 HeaderActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source HeaderHovered Declaration public Vector4 HeaderHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source IndentSpacing Declaration public float IndentSpacing { get; } Property Value Type Description System.Single | Improve this Doc View Source ItemInnerSpacing Declaration public Vector2 ItemInnerSpacing { get; } Property Value Type Description Vector2 | Improve this Doc View Source ItemSpacing Declaration public Vector2 ItemSpacing { get; } Property Value Type Description Vector2 | Improve this Doc View Source MenuBarBg Declaration public Vector4 MenuBarBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source PlotHistogram Declaration public Vector4 PlotHistogram { get; } Property Value Type Description Vector4 | Improve this Doc View Source PlotHistogramHovered Declaration public Vector4 PlotHistogramHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source PlotLines Declaration public Vector4 PlotLines { get; } Property Value Type Description Vector4 | Improve this Doc View Source PlotLinesHovered Declaration public Vector4 PlotLinesHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source PopupBg Declaration public Vector4 PopupBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source ResizeGrip Declaration public Vector4 ResizeGrip { get; } Property Value Type Description Vector4 | Improve this Doc View Source ResizeGripActive Declaration public Vector4 ResizeGripActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source ResizeGripHovered Declaration public Vector4 ResizeGripHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source ScrollbarBg Declaration public Vector4 ScrollbarBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source ScrollbarGrab Declaration public Vector4 ScrollbarGrab { get; } Property Value Type Description Vector4 | Improve this Doc View Source ScrollbarGrabActive Declaration public Vector4 ScrollbarGrabActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source ScrollbarGrabHovered Declaration public Vector4 ScrollbarGrabHovered { get; } Property Value Type Description Vector4 | Improve this Doc View Source ScrollbarRounding Declaration public float ScrollbarRounding { get; } Property Value Type Description System.Single | Improve this Doc View Source ScrollbarSize Declaration public float ScrollbarSize { get; } Property Value Type Description System.Single | Improve this Doc View Source Separator Declaration public Vector4 Separator { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source SliderGrab Declaration public Vector4 SliderGrab { get; } Property Value Type Description Vector4 | Improve this Doc View Source SliderGrabActive Declaration public Vector4 SliderGrabActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source TabRounding Declaration public float TabRounding { get; } Property Value Type Description System.Single | Improve this Doc View Source Text Declaration public Vector4 Text { get; } Property Value Type Description Vector4 | Improve this Doc View Source TextDisabled Declaration public Vector4 TextDisabled { get; } Property Value Type Description Vector4 | Improve this Doc View Source TextSelectedBg Declaration public Vector4 TextSelectedBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source TitleBg Declaration public Vector4 TitleBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source TitleBgActive Declaration public Vector4 TitleBgActive { get; } Property Value Type Description Vector4 | Improve this Doc View Source TitleBgCollapsed Declaration public Vector4 TitleBgCollapsed { get; } Property Value Type Description Vector4 | Improve this Doc View Source WindowBg Declaration public Vector4 WindowBg { get; } Property Value Type Description Vector4 | Improve this Doc View Source WindowPadding Declaration public Vector2 WindowPadding { get; } Property Value Type Description Vector2 | Improve this Doc View Source WindowRounding Declaration public float WindowRounding { get; } Property Value Type Description System.Single Implements IConfiguration"
  },
  "api/Fluint.Layer.UI.UIConfiguration.html": {
    "href": "api/Fluint.Layer.UI.UIConfiguration.html",
    "title": "Class UIConfiguration | Fluint",
    "keywords": "Class UIConfiguration Inheritance System.Object UIConfiguration Implements IConfiguration Namespace : Fluint.Layer.UI Assembly : Fluint.Layer.dll Syntax public class UIConfiguration : object, IConfiguration Constructors | Improve this Doc View Source UIConfiguration() Declaration public UIConfiguration() Properties | Improve this Doc View Source Fonts Declaration public UIConfiguration.Font[] Fonts { get; set; } Property Value Type Description Fluint.Layer.UI.UIConfiguration.Font [] | Improve this Doc View Source Language Declaration public string Language { get; set; } Property Value Type Description System.String Implements IConfiguration"
  },
  "api/Fluint.Layer.VirtualFileSystem.html": {
    "href": "api/Fluint.Layer.VirtualFileSystem.html",
    "title": "Namespace Fluint.Layer.VirtualFileSystem | Fluint",
    "keywords": "Namespace Fluint.Layer.VirtualFileSystem Interfaces IDirectory IFile IVirtualFileSystem"
  },
  "api/Fluint.Layer.VirtualFileSystem.IDirectory.html": {
    "href": "api/Fluint.Layer.VirtualFileSystem.IDirectory.html",
    "title": "Interface IDirectory | Fluint",
    "keywords": "Interface IDirectory Namespace : Fluint.Layer.VirtualFileSystem Assembly : Fluint.Layer.dll Syntax public interface IDirectory Methods | Improve this Doc View Source AddDirectory(String, IDirectory) Declaration void AddDirectory(string virtualPath, IDirectory directory) Parameters Type Name Description System.String virtualPath IDirectory directory | Improve this Doc View Source AddDirectory(String, String) Declaration IDirectory AddDirectory(string virtualPath, string physicalPath) Parameters Type Name Description System.String virtualPath System.String physicalPath Returns Type Description IDirectory | Improve this Doc View Source AddFile(String, IFile) Declaration void AddFile(string virtualPath, IFile file) Parameters Type Name Description System.String virtualPath IFile file | Improve this Doc View Source AddFile(String, String) Declaration IFile AddFile(string virtualPath, string physicalPath) Parameters Type Name Description System.String virtualPath System.String physicalPath Returns Type Description IFile"
  },
  "api/Fluint.Layer.VirtualFileSystem.IFile.html": {
    "href": "api/Fluint.Layer.VirtualFileSystem.IFile.html",
    "title": "Interface IFile | Fluint",
    "keywords": "Interface IFile Namespace : Fluint.Layer.VirtualFileSystem Assembly : Fluint.Layer.dll Syntax public interface IFile Properties | Improve this Doc View Source Data Declaration object Data { get; } Property Value Type Description System.Object"
  },
  "api/Fluint.Layer.VirtualFileSystem.IVirtualFileSystem.html": {
    "href": "api/Fluint.Layer.VirtualFileSystem.IVirtualFileSystem.html",
    "title": "Interface IVirtualFileSystem | Fluint",
    "keywords": "Interface IVirtualFileSystem Inherited Members IDirectory.AddDirectory(String, IDirectory) IDirectory.AddDirectory(String, String) IDirectory.AddFile(String, IFile) IDirectory.AddFile(String, String) Namespace : Fluint.Layer.VirtualFileSystem Assembly : Fluint.Layer.dll Syntax public interface IVirtualFileSystem : IModule, IDirectory Methods | Improve this Doc View Source LoadFromFile(String) Declaration void LoadFromFile(string path) Parameters Type Name Description System.String path | Improve this Doc View Source QueryDirectory(String) Declaration IDirectory QueryDirectory(string path) Parameters Type Name Description System.String path Returns Type Description IDirectory | Improve this Doc View Source QueryFile(String) Declaration IFile QueryFile(string path) Parameters Type Name Description System.String path Returns Type Description IFile | Improve this Doc View Source SaveToFile(String) Declaration void SaveToFile(string path) Parameters Type Name Description System.String path"
  },
  "api/Fluint.Layer.Windowing.html": {
    "href": "api/Fluint.Layer.Windowing.html",
    "title": "Namespace Fluint.Layer.Windowing | Fluint",
    "keywords": "Namespace Fluint.Layer.Windowing Classes RenderEvent ResizeEvent WindowConfiguration Interfaces IPuppet IWindow IWindowProvider"
  },
  "api/Fluint.Layer.Windowing.IPuppet.html": {
    "href": "api/Fluint.Layer.Windowing.IPuppet.html",
    "title": "Interface IPuppet | Fluint",
    "keywords": "Interface IPuppet Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public interface IPuppet Methods | Improve this Doc View Source OnLoad() Declaration virtual void OnLoad() | Improve this Doc View Source OnMouseWheelMoved(Vector2) Declaration virtual void OnMouseWheelMoved(Vector2 offset) Parameters Type Name Description Vector2 offset | Improve this Doc View Source OnRender(Double) Declaration virtual void OnRender(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source OnResize(Int32, Int32) Declaration virtual void OnResize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source OnStart() Declaration virtual void OnStart() | Improve this Doc View Source OnTextReceived(Int32, String) Declaration virtual void OnTextReceived(int unicode, string data) Parameters Type Name Description System.Int32 unicode System.String data | Improve this Doc View Source OnUpdate(Double) Declaration virtual void OnUpdate(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source SetPossessed(IWindow) Don't call outside IWindow Declaration virtual void SetPossessed(in IWindow possessor) Parameters Type Name Description IWindow possessor"
  },
  "api/Fluint.Layer.Windowing.IWindow.html": {
    "href": "api/Fluint.Layer.Windowing.IWindow.html",
    "title": "Interface IWindow | Fluint",
    "keywords": "Interface IWindow Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public interface IWindow : IStatefulContext, IModule Properties | Improve this Doc View Source Controls Declaration IDictionary<string, IGuiComponent> Controls { get; } Property Value Type Description IDictionary < System.String , IGuiComponent > | Improve this Doc View Source FrameTime Declaration double FrameTime { get; } Property Value Type Description System.Double | Improve this Doc View Source InputManager Declaration IInputManager InputManager { get; } Property Value Type Description IInputManager | Improve this Doc View Source Location Declaration Vector2i Location { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source ScreenSize Declaration Vector2i ScreenSize { get; } Property Value Type Description Vector2i | Improve this Doc View Source Size Declaration Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Title Declaration string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source VSync Declaration bool VSync { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Close() Declaration void Close() | Improve this Doc View Source Enqueue(Action) Declaration void Enqueue(Action action) Parameters Type Name Description Action action | Improve this Doc View Source OnLoad() Declaration void OnLoad() | Improve this Doc View Source OnMouseWheelMoved(Vector2) Declaration void OnMouseWheelMoved(Vector2 offset) Parameters Type Name Description Vector2 offset | Improve this Doc View Source OnRender(Double) Declaration void OnRender(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source OnResize(Int32, Int32) Declaration void OnResize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source OnStart() Declaration void OnStart() | Improve this Doc View Source OnTextReceived(Int32, String) Declaration void OnTextReceived(int unicode, string data) Parameters Type Name Description System.Int32 unicode System.String data | Improve this Doc View Source OnUpdate(Double) Declaration void OnUpdate(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source Puppet<TPuppet>() Declaration void Puppet<TPuppet>() where TPuppet : IPuppet Type Parameters Name Description TPuppet | Improve this Doc View Source SetProvider(IWindowProvider) Declaration void SetProvider(in IWindowProvider provider) Parameters Type Name Description IWindowProvider provider | Improve this Doc View Source SpawnControl<T>() Declaration T SpawnControl<T>() where T : Control Returns Type Description T Type Parameters Name Description T Events | Improve this Doc View Source Load Declaration event EventHandler Load Event Type Type Description EventHandler | Improve this Doc View Source Render Declaration event EventHandler<RenderEvent> Render Event Type Type Description EventHandler < RenderEvent > | Improve this Doc View Source Resize Declaration event EventHandler<ResizeEvent> Resize Event Type Type Description EventHandler < ResizeEvent > | Improve this Doc View Source Update Declaration event EventHandler<RenderEvent> Update Event Type Type Description EventHandler < RenderEvent >"
  },
  "api/Fluint.Layer.Windowing.IWindowProvider.html": {
    "href": "api/Fluint.Layer.Windowing.IWindowProvider.html",
    "title": "Interface IWindowProvider | Fluint",
    "keywords": "Interface IWindowProvider Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public interface IWindowProvider : IModule Properties | Improve this Doc View Source Client Declaration IWindow Client { get; } Property Value Type Description IWindow | Improve this Doc View Source FrameQueue Declaration Queue<Action> FrameQueue { get; } Property Value Type Description Queue < Action > | Improve this Doc View Source NativeKeyboardObject Declaration object NativeKeyboardObject { get; } Property Value Type Description System.Object | Improve this Doc View Source NativeMouseObject Declaration object NativeMouseObject { get; } Property Value Type Description System.Object | Improve this Doc View Source ScreenSize Declaration Vector2i ScreenSize { get; } Property Value Type Description Vector2i | Improve this Doc View Source WindowLocation Declaration Vector2i WindowLocation { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source WindowSize Declaration Vector2i WindowSize { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source WindowTitle Declaration string WindowTitle { get; set; } Property Value Type Description System.String | Improve this Doc View Source WindowVSync Declaration bool WindowVSync { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Adopt<TClient>() Declaration void Adopt<TClient>() where TClient : IWindow Type Parameters Name Description TClient | Improve this Doc View Source Close() Declaration void Close() | Improve this Doc View Source SetMouseLocation(Vector2) Declaration void SetMouseLocation(Vector2 location) Parameters Type Name Description Vector2 location | Improve this Doc View Source Start() Declaration void Start()"
  },
  "api/Fluint.Layer.Windowing.RenderEvent.html": {
    "href": "api/Fluint.Layer.Windowing.RenderEvent.html",
    "title": "Class RenderEvent | Fluint",
    "keywords": "Class RenderEvent Inheritance System.Object RenderEvent Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public class RenderEvent : EventArgs Constructors | Improve this Doc View Source RenderEvent(Double) Declaration public RenderEvent(double frametime) Parameters Type Name Description System.Double frametime Properties | Improve this Doc View Source Frametime Declaration public double Frametime { get; } Property Value Type Description System.Double"
  },
  "api/Fluint.Layer.Windowing.ResizeEvent.html": {
    "href": "api/Fluint.Layer.Windowing.ResizeEvent.html",
    "title": "Class ResizeEvent | Fluint",
    "keywords": "Class ResizeEvent Inheritance System.Object ResizeEvent Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public class ResizeEvent : EventArgs Constructors | Improve this Doc View Source ResizeEvent(Vector2i) Declaration public ResizeEvent(Vector2i size) Parameters Type Name Description Vector2i size Properties | Improve this Doc View Source Size Declaration public Vector2i Size { get; } Property Value Type Description Vector2i"
  },
  "api/Fluint.Layer.Windowing.WindowConfiguration.html": {
    "href": "api/Fluint.Layer.Windowing.WindowConfiguration.html",
    "title": "Class WindowConfiguration | Fluint",
    "keywords": "Class WindowConfiguration Inheritance System.Object WindowConfiguration Implements IConfiguration Namespace : Fluint.Layer.Windowing Assembly : Fluint.Layer.dll Syntax public class WindowConfiguration : object, IConfiguration Constructors | Improve this Doc View Source WindowConfiguration() Declaration public WindowConfiguration() Properties | Improve this Doc View Source FrameLimit Declaration public int FrameLimit { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Resizable Declaration public bool Resizable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source VSync Declaration public bool VSync { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WindowSize Declaration public Vector2i WindowSize { get; set; } Property Value Type Description Vector2i Implements IConfiguration"
  },
  "api/Fluint.Localization.Base.html": {
    "href": "api/Fluint.Localization.Base.html",
    "title": "Namespace Fluint.Localization.Base | Fluint",
    "keywords": "Namespace Fluint.Localization.Base Classes Language LocalizationManager"
  },
  "api/Fluint.Localization.Base.Language.html": {
    "href": "api/Fluint.Localization.Base.Language.html",
    "title": "Class Language | Fluint",
    "keywords": "Class Language Inheritance System.Object Language Implements ILambda IModule Namespace : Fluint.Localization.Base Assembly : Fluint.Localization.Base.dll Syntax public class Language : object, ILambda, IModule Constructors | Improve this Doc View Source Language(ILocalizationManager) Declaration public Language(ILocalizationManager localizationManager) Parameters Type Name Description ILocalizationManager localizationManager Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.Localization.Base.LocalizationManager.html": {
    "href": "api/Fluint.Localization.Base.LocalizationManager.html",
    "title": "Class LocalizationManager | Fluint",
    "keywords": "Class LocalizationManager Inheritance System.Object LocalizationManager Implements ILocalizationManager IModule Namespace : Fluint.Localization.Base Assembly : Fluint.Localization.Base.dll Syntax public class LocalizationManager : object, ILocalizationManager, IModule Constructors | Improve this Doc View Source LocalizationManager() Declaration public LocalizationManager() Properties | Improve this Doc View Source ActiveLanguage Declaration public string ActiveLanguage { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateLanguage(String) Declaration public void CreateLanguage(string languageAbbreviation) Parameters Type Name Description System.String languageAbbreviation | Improve this Doc View Source CreateRecord(String, String) Declaration public void CreateRecord(string recordName, string recordData) Parameters Type Name Description System.String recordName System.String recordData | Improve this Doc View Source Fetch(String) Declaration public string Fetch(string recordName) Parameters Type Name Description System.String recordName Returns Type Description System.String | Improve this Doc View Source FetchLanguages() Declaration public string[] FetchLanguages() Returns Type Description System.String [] Implements ILocalizationManager IModule"
  },
  "api/Fluint.Logic.Base.ActionManager.html": {
    "href": "api/Fluint.Logic.Base.ActionManager.html",
    "title": "Class ActionManager | Fluint",
    "keywords": "Class ActionManager Inheritance System.Object ActionManager Implements IActionManager IModule Namespace : Fluint.Logic.Base Assembly : Fluint.Logic.Base.dll Syntax public class ActionManager : object, IActionManager, IModule Constructors | Improve this Doc View Source ActionManager(ModulePacket) Declaration public ActionManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source GetAction<T>() Declaration public T GetAction<T>() where T : ILogicModule Returns Type Description T Type Parameters Name Description T Implements IActionManager IModule"
  },
  "api/Fluint.Logic.Base.GenerateSphere.html": {
    "href": "api/Fluint.Logic.Base.GenerateSphere.html",
    "title": "Class GenerateSphere | Fluint",
    "keywords": "Class GenerateSphere Inheritance System.Object GenerateSphere Implements IGenerateSphere ILogicModule IModule Namespace : Fluint.Logic.Base Assembly : Fluint.Logic.Base.dll Syntax public class GenerateSphere : object, IGenerateSphere, ILogicModule, IModule Methods | Improve this Doc View Source GenerateIcoSphere() Declaration public PositionColorVertex[] GenerateIcoSphere() Returns Type Description PositionColorVertex [] | Improve this Doc View Source GenerateQuadSphere() Declaration public PositionColorVertex[] GenerateQuadSphere() Returns Type Description PositionColorVertex [] | Improve this Doc View Source GenerateUVSphere() Declaration public PositionColorVertex[] GenerateUVSphere() Returns Type Description PositionColorVertex [] Implements IGenerateSphere ILogicModule IModule"
  },
  "api/Fluint.Logic.Base.GracefulExit.html": {
    "href": "api/Fluint.Logic.Base.GracefulExit.html",
    "title": "Class GracefulExit | Fluint",
    "keywords": "Class GracefulExit Inheritance System.Object GracefulExit Implements IGracefulExit ILogicModule IModule Namespace : Fluint.Logic.Base Assembly : Fluint.Logic.Base.dll Syntax public class GracefulExit : object, IGracefulExit, ILogicModule, IModule Constructors | Improve this Doc View Source GracefulExit(ModulePacket) Declaration public GracefulExit(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Exit() Declaration public void Exit() Implements IGracefulExit ILogicModule IModule"
  },
  "api/Fluint.Logic.Base.html": {
    "href": "api/Fluint.Logic.Base.html",
    "title": "Namespace Fluint.Logic.Base | Fluint",
    "keywords": "Namespace Fluint.Logic.Base Classes ActionManager GenerateSphere GracefulExit"
  },
  "api/Fluint.Networking.Base.Client.html": {
    "href": "api/Fluint.Networking.Base.Client.html",
    "title": "Namespace Fluint.Networking.Base.Client | Fluint",
    "keywords": "Namespace Fluint.Networking.Base.Client Classes NcsClient"
  },
  "api/Fluint.Networking.Base.Client.NcsClient.html": {
    "href": "api/Fluint.Networking.Base.Client.NcsClient.html",
    "title": "Class NcsClient | Fluint",
    "keywords": "Class NcsClient Inheritance System.Object NcsClient Namespace : Fluint.Networking.Base.Client Assembly : Fluint.Networking.Base.dll Syntax public class NcsClient : NetCoreServer.UdpClient Constructors | Improve this Doc View Source NcsClient(String, Int32, ClientData, ILogger) Declaration public NcsClient(string address, int port, ClientData data, ILogger logger) Parameters Type Name Description System.String address System.Int32 port ClientData data ILogger logger Methods | Improve this Doc View Source OnConnected() Declaration protected override void OnConnected() | Improve this Doc View Source OnError(SocketError) Declaration protected override void OnError(SocketError error) Parameters Type Name Description SocketError error | Improve this Doc View Source OnReceived(EndPoint, Byte[], Int64, Int64) Declaration protected override void OnReceived(EndPoint endpoint, byte[] buffer, long offset, long size) Parameters Type Name Description EndPoint endpoint System.Byte [] buffer System.Int64 offset System.Int64 size"
  },
  "api/Fluint.Networking.Base.Server.html": {
    "href": "api/Fluint.Networking.Base.Server.html",
    "title": "Namespace Fluint.Networking.Base.Server | Fluint",
    "keywords": "Namespace Fluint.Networking.Base.Server Classes Server ServerTaskHelper"
  },
  "api/Fluint.Networking.Base.Server.Server.html": {
    "href": "api/Fluint.Networking.Base.Server.Server.html",
    "title": "Class Server | Fluint",
    "keywords": "Class Server Inheritance System.Object Server Implements IServer IModule Namespace : Fluint.Networking.Base.Server Assembly : Fluint.Networking.Base.dll Syntax public class Server : object, IServer, IModule Constructors | Improve this Doc View Source Server(ModulePacket) Declaration public Server(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Clients Declaration public IReadOnlyCollection<ClientData> Clients { get; } Property Value Type Description IReadOnlyCollection < ClientData > | Improve this Doc View Source ServerInfo Declaration public ServerData ServerInfo { get; set; } Property Value Type Description ServerData | Improve this Doc View Source ServerStarted Declaration public bool ServerStarted { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Restart() Declaration public void Restart() | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Stop() Declaration public void Stop() Implements IServer IModule"
  },
  "api/Fluint.Networking.Base.Server.ServerTaskHelper.html": {
    "href": "api/Fluint.Networking.Base.Server.ServerTaskHelper.html",
    "title": "Class ServerTaskHelper | Fluint",
    "keywords": "Class ServerTaskHelper Inheritance System.Object ServerTaskHelper Implements IServerTaskHelper IModule Namespace : Fluint.Networking.Base.Server Assembly : Fluint.Networking.Base.dll Syntax public class ServerTaskHelper : object, IServerTaskHelper, IModule Constructors | Improve this Doc View Source ServerTaskHelper() Declaration public ServerTaskHelper() Properties | Improve this Doc View Source PacketsToMultiCast Declaration public List<NetworkPacket> PacketsToMultiCast { get; } Property Value Type Description List < NetworkPacket > Methods | Improve this Doc View Source InvokeConnectedEvent(ClientData) Declaration public void InvokeConnectedEvent(ClientData client) Parameters Type Name Description ClientData client | Improve this Doc View Source InvokeDisconnectedEvent(ClientData, DisconnectionReason) Declaration public void InvokeDisconnectedEvent(ClientData client, DisconnectionReason reason) Parameters Type Name Description ClientData client DisconnectionReason reason Events | Improve this Doc View Source ClientConnected Declaration public event EventHandler<ClientConnectedEventArgs> ClientConnected Event Type Type Description EventHandler < ClientConnectedEventArgs > | Improve this Doc View Source ClientDisconnected Declaration public event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Event Type Type Description EventHandler < ClientDisconnectedEventArgs > Implements IServerTaskHelper IModule"
  },
  "api/Fluint.Runtime.Fluint.html": {
    "href": "api/Fluint.Runtime.Fluint.html",
    "title": "Class Fluint | Fluint",
    "keywords": "Class Fluint Inheritance System.Object Fluint Namespace : Fluint.Runtime Assembly : Fluint.Runtime.dll Syntax public class Fluint : object Methods | Improve this Doc View Source Start() Declaration public void Start()"
  },
  "api/Fluint.Runtime.html": {
    "href": "api/Fluint.Runtime.html",
    "title": "Namespace Fluint.Runtime | Fluint",
    "keywords": "Namespace Fluint.Runtime Classes Fluint"
  },
  "api/Fluint.SDK.Base.ConsoleKeyHandler.html": {
    "href": "api/Fluint.SDK.Base.ConsoleKeyHandler.html",
    "title": "Class ConsoleKeyHandler | Fluint",
    "keywords": "Class ConsoleKeyHandler Inheritance System.Object ConsoleKeyHandler Namespace : Fluint.SDK.Base Assembly : Fluint.SDK.Base.dll Syntax public class ConsoleKeyHandler : object Constructors | Improve this Doc View Source ConsoleKeyHandler(List<String>) Declaration public ConsoleKeyHandler(List<string> history) Parameters Type Name Description List < System.String > history Methods | Improve this Doc View Source GetText() Declaration public string GetText() Returns Type Description System.String | Improve this Doc View Source Handle(ConsoleKeyInfo) Declaration public void Handle(ConsoleKeyInfo keyInfo) Parameters Type Name Description ConsoleKeyInfo keyInfo"
  },
  "api/Fluint.SDK.Base.html": {
    "href": "api/Fluint.SDK.Base.html",
    "title": "Namespace Fluint.SDK.Base | Fluint",
    "keywords": "Namespace Fluint.SDK.Base Classes ConsoleKeyHandler LambdaListener LambdaMemory LambdaParser"
  },
  "api/Fluint.SDK.Base.LambdaListener.html": {
    "href": "api/Fluint.SDK.Base.LambdaListener.html",
    "title": "Class LambdaListener | Fluint",
    "keywords": "Class LambdaListener Inheritance System.Object LambdaListener Implements ILambdaListener IModule Namespace : Fluint.SDK.Base Assembly : Fluint.SDK.Base.dll Syntax public class LambdaListener : object, ILambdaListener, IModule Constructors | Improve this Doc View Source LambdaListener(ModulePacket) Declaration public LambdaListener(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Execute(String) Declaration public void Execute(string command) Parameters Type Name Description System.String command | Improve this Doc View Source Execute(String, String[]) Declaration public LambdaObject Execute(string command, string[] args) Parameters Type Name Description System.String command System.String [] args Returns Type Description LambdaObject | Improve this Doc View Source Listen() Declaration public void Listen() | Improve this Doc View Source Parse(String) Declaration public static (string command, string[] arguments) Parse(string input) Parameters Type Name Description System.String input Returns Type Description System.ValueTuple < System.String , System.String []> | Improve this Doc View Source Split(String, Func<Char, Boolean>) Declaration public static IEnumerable<string> Split(string str, Func<char, bool> controller) Parameters Type Name Description System.String str Func < System.Char , System.Boolean > controller Returns Type Description IEnumerable < System.String > | Improve this Doc View Source TrimMatchingQuotes(String, Char) Declaration public static string TrimMatchingQuotes(string input, char quote) Parameters Type Name Description System.String input System.Char quote Returns Type Description System.String Implements ILambdaListener IModule"
  },
  "api/Fluint.SDK.Base.LambdaMemory.html": {
    "href": "api/Fluint.SDK.Base.LambdaMemory.html",
    "title": "Class LambdaMemory | Fluint",
    "keywords": "Class LambdaMemory Inheritance System.Object LambdaMemory Implements ILambdaMemory IModule Namespace : Fluint.SDK.Base Assembly : Fluint.SDK.Base.dll Syntax public class LambdaMemory : object, ILambdaMemory, IModule Methods | Improve this Doc View Source Add(String, Object) Declaration public void Add(string name, object value) Parameters Type Name Description System.String name System.Object value | Improve this Doc View Source AsDictionary() Declaration public IReadOnlyDictionary<string, object> AsDictionary() Returns Type Description IReadOnlyDictionary < System.String , System.Object > | Improve this Doc View Source Get(String) Declaration public object Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object Implements ILambdaMemory IModule"
  },
  "api/Fluint.SDK.Base.LambdaParser.html": {
    "href": "api/Fluint.SDK.Base.LambdaParser.html",
    "title": "Class LambdaParser | Fluint",
    "keywords": "Class LambdaParser Inheritance System.Object LambdaParser Implements ILambdaParser IModule Namespace : Fluint.SDK.Base Assembly : Fluint.SDK.Base.dll Syntax public class LambdaParser : object, ILambdaParser, IModule Constructors | Improve this Doc View Source LambdaParser(ModulePacket) Declaration public LambdaParser(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Add(ILambda) Declaration public void Add(ILambda command) Parameters Type Name Description ILambda command | Improve this Doc View Source Parse(String, String[]) Declaration public LambdaObject Parse(string command, string[] args) Parameters Type Name Description System.String command System.String [] args Returns Type Description LambdaObject Implements ILambdaParser IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Adopt.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Adopt.html",
    "title": "Class Adopt | Fluint",
    "keywords": "Class Adopt Inheritance System.Object Adopt Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Adopt : object, ILambda, IModule Constructors | Improve this Doc View Source Adopt(ModulePacket) Declaration public Adopt(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Async.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Async.html",
    "title": "Class Async | Fluint",
    "keywords": "Class Async Inheritance System.Object Async Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Async : object, ILambda, IModule Constructors | Improve this Doc View Source Async(ModulePacket) Declaration public Async(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Clear.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Clear.html",
    "title": "Class Clear | Fluint",
    "keywords": "Class Clear Inheritance System.Object Clear Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Clear : object, ILambda, IModule Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Clients.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Clients.html",
    "title": "Class Clients | Fluint",
    "keywords": "Class Clients Inheritance System.Object Clients Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Clients : object, ILambda, IModule Constructors | Improve this Doc View Source Clients(ModulePacket, ILogger) Declaration public Clients(ModulePacket packet, ILogger logger) Parameters Type Name Description ModulePacket packet ILogger logger Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Connect.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Connect.html",
    "title": "Class Connect | Fluint",
    "keywords": "Class Connect Inheritance System.Object Connect Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Connect : object, ILambda, IModule Constructors | Improve this Doc View Source Connect(ModulePacket) Declaration public Connect(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Create.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Create.html",
    "title": "Class Create | Fluint",
    "keywords": "Class Create Inheritance System.Object Create Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Create : object, ILambda, IModule Constructors | Improve this Doc View Source Create(ModulePacket) Declaration public Create(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Debug.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Debug.html",
    "title": "Class Debug | Fluint",
    "keywords": "Class Debug Inheritance System.Object Debug Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Debug : object, ILambda, IModule Constructors | Improve this Doc View Source Debug(ModulePacket) Declaration public Debug(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Disconnect.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Disconnect.html",
    "title": "Class Disconnect | Fluint",
    "keywords": "Class Disconnect Inheritance System.Object Disconnect Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Disconnect : object, ILambda, IModule Constructors | Improve this Doc View Source Disconnect(ModulePacket) Declaration public Disconnect(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Dump.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Dump.html",
    "title": "Class Dump | Fluint",
    "keywords": "Class Dump Inheritance System.Object Dump Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Dump : object, ILambda, IModule Constructors | Improve this Doc View Source Dump(ModulePacket) Declaration public Dump(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Echo.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Echo.html",
    "title": "Class Echo | Fluint",
    "keywords": "Class Echo Inheritance System.Object Echo Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Echo : object, ILambda, IModule Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Error.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Error.html",
    "title": "Class Error | Fluint",
    "keywords": "Class Error Inheritance System.Object Error Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Error : object, ILambda, IModule Constructors | Improve this Doc View Source Error(ModulePacket) Declaration public Error(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Exit.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Exit.html",
    "title": "Class Exit | Fluint",
    "keywords": "Class Exit Inheritance System.Object Exit Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Exit : object, ILambda, IModule Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Fatal.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Fatal.html",
    "title": "Class Fatal | Fluint",
    "keywords": "Class Fatal Inheritance System.Object Fatal Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Fatal : object, ILambda, IModule Constructors | Improve this Doc View Source Fatal(ModulePacket) Declaration public Fatal(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.html",
    "title": "Namespace Fluint.SDK.Base.Lambdas | Fluint",
    "keywords": "Namespace Fluint.SDK.Base.Lambdas Classes Adopt Async Clear Clients Connect Create Debug Disconnect Dump Echo Error Exit Fatal Information Jsonize Listen Load Repeat Say Singleton Sleep Verbose Warning"
  },
  "api/Fluint.SDK.Base.Lambdas.Information.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Information.html",
    "title": "Class Information | Fluint",
    "keywords": "Class Information Inheritance System.Object Information Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Information : object, ILambda, IModule Constructors | Improve this Doc View Source Information(ModulePacket) Declaration public Information(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Jsonize.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Jsonize.html",
    "title": "Class Jsonize | Fluint",
    "keywords": "Class Jsonize Inheritance System.Object Jsonize Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Jsonize : object, ILambda, IModule Constructors | Improve this Doc View Source Jsonize(ModulePacket) Declaration public Jsonize(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Listen.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Listen.html",
    "title": "Class Listen | Fluint",
    "keywords": "Class Listen Inheritance System.Object Listen Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Listen : object, ILambda, IModule Constructors | Improve this Doc View Source Listen(ModulePacket) Declaration public Listen(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Load.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Load.html",
    "title": "Class Load | Fluint",
    "keywords": "Class Load Inheritance System.Object Load Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Load : object, ILambda, IModule Constructors | Improve this Doc View Source Load(ModulePacket) Declaration public Load(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Repeat.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Repeat.html",
    "title": "Class Repeat | Fluint",
    "keywords": "Class Repeat Inheritance System.Object Repeat Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Repeat : object, ILambda, IModule Constructors | Improve this Doc View Source Repeat(ModulePacket) Declaration public Repeat(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Say.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Say.html",
    "title": "Class Say | Fluint",
    "keywords": "Class Say Inheritance System.Object Say Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Say : object, ILambda, IModule Constructors | Improve this Doc View Source Say(ModulePacket) Declaration public Say(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Singleton.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Singleton.html",
    "title": "Class Singleton | Fluint",
    "keywords": "Class Singleton Inheritance System.Object Singleton Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Singleton : object, ILambda, IModule Constructors | Improve this Doc View Source Singleton(ModulePacket) Declaration public Singleton(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Sleep.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Sleep.html",
    "title": "Class Sleep | Fluint",
    "keywords": "Class Sleep Inheritance System.Object Sleep Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Sleep : object, ILambda, IModule Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Verbose.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Verbose.html",
    "title": "Class Verbose | Fluint",
    "keywords": "Class Verbose Inheritance System.Object Verbose Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Verbose : object, ILambda, IModule Constructors | Improve this Doc View Source Verbose(ModulePacket) Declaration public Verbose(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Lambdas.Warning.html": {
    "href": "api/Fluint.SDK.Base.Lambdas.Warning.html",
    "title": "Class Warning | Fluint",
    "keywords": "Class Warning Inheritance System.Object Warning Implements ILambda IModule Namespace : Fluint.SDK.Base.Lambdas Assembly : Fluint.SDK.Base.dll Syntax public class Warning : object, ILambda, IModule Constructors | Improve this Doc View Source Warning(ModulePacket) Declaration public Warning(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Base.Tasks.html": {
    "href": "api/Fluint.SDK.Base.Tasks.html",
    "title": "Namespace Fluint.SDK.Base.Tasks | Fluint",
    "keywords": "Namespace Fluint.SDK.Base.Tasks Classes TaskManager"
  },
  "api/Fluint.SDK.Base.Tasks.TaskManager.html": {
    "href": "api/Fluint.SDK.Base.Tasks.TaskManager.html",
    "title": "Class TaskManager | Fluint",
    "keywords": "Class TaskManager Inheritance System.Object TaskManager Implements ITaskManager IModule Namespace : Fluint.SDK.Base.Tasks Assembly : Fluint.Tasks.Base.dll Syntax public class TaskManager : object, ITaskManager, IModule Constructors | Improve this Doc View Source TaskManager(ModulePacket) Declaration public TaskManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Invoke(TaskSchedule) Declaration public void Invoke(TaskSchedule schedule) Parameters Type Name Description TaskSchedule schedule | Improve this Doc View Source Invoke(TaskSchedule, TaskArgs) Declaration public void Invoke(TaskSchedule schedule, TaskArgs args) Parameters Type Name Description TaskSchedule schedule TaskArgs args | Improve this Doc View Source StopAll() Declaration public void StopAll() Implements ITaskManager IModule"
  },
  "api/Fluint.SDK.Commands.About.html": {
    "href": "api/Fluint.SDK.Commands.About.html",
    "title": "Class About | Fluint",
    "keywords": "Class About Inheritance System.Object About Implements ILambda IModule Namespace : Fluint.SDK.Commands Assembly : Fluint.SDK.dll Syntax public class About : object, ILambda, IModule Properties | Improve this Doc View Source Command Declaration public string Command { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Run(String[]) Declaration public LambdaObject Run(string[] args) Parameters Type Name Description System.String [] args Returns Type Description LambdaObject Implements ILambda IModule"
  },
  "api/Fluint.SDK.Commands.html": {
    "href": "api/Fluint.SDK.Commands.html",
    "title": "Namespace Fluint.SDK.Commands | Fluint",
    "keywords": "Namespace Fluint.SDK.Commands Classes About"
  },
  "api/Fluint.SDK.html": {
    "href": "api/Fluint.SDK.html",
    "title": "Namespace Fluint.SDK | Fluint",
    "keywords": "Namespace Fluint.SDK Classes Sdk"
  },
  "api/Fluint.SDK.Sdk.html": {
    "href": "api/Fluint.SDK.Sdk.html",
    "title": "Class Sdk | Fluint",
    "keywords": "Class Sdk Inheritance System.Object Sdk Namespace : Fluint.SDK Assembly : Fluint.SDK.dll Syntax public class Sdk : object Methods | Improve this Doc View Source Start() Declaration public void Start()"
  },
  "api/Fluint.StateManagement.Base.html": {
    "href": "api/Fluint.StateManagement.Base.html",
    "title": "Namespace Fluint.StateManagement.Base | Fluint",
    "keywords": "Namespace Fluint.StateManagement.Base Classes StateManager"
  },
  "api/Fluint.StateManagement.Base.StateManager.html": {
    "href": "api/Fluint.StateManagement.Base.StateManager.html",
    "title": "Class StateManager | Fluint",
    "keywords": "Class StateManager Inheritance System.Object StateManager Implements IStateManager IModule Namespace : Fluint.StateManagement.Base Assembly : Fluint.StateManagement.Base.dll Syntax public class StateManager : object, IStateManager, IModule Constructors | Improve this Doc View Source StateManager(ModulePacket) Declaration public StateManager(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source GetState<T>() Declaration public T GetState<T>() where T : IState Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetState<T>(IStatefulContext) Declaration public T GetState<T>(IStatefulContext context) where T : IState Parameters Type Name Description IStatefulContext context Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetStates(IStatefulContext) Declaration public IEnumerable<IState> GetStates(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description IEnumerable < IState > | Improve this Doc View Source HasState<T>() Declaration public bool HasState<T>() Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source HasState<T>(IStatefulContext) Declaration public bool HasState<T>(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source InitializeState<T>(IState) Declaration public T InitializeState<T>(IState state) where T : IState Parameters Type Name Description IState state Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source InitializeState<T>(IState, IStatefulContext) Declaration public T InitializeState<T>(IState state, IStatefulContext context) where T : IState Parameters Type Name Description IState state IStatefulContext context Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source InitializeStatefulContext(IStatefulContext) Declaration public IStatefulContext InitializeStatefulContext(IStatefulContext context) Parameters Type Name Description IStatefulContext context Returns Type Description IStatefulContext | Improve this Doc View Source InitializeStatefulContext(IStatefulContext, IStatefulContext) Declaration public IStatefulContext InitializeStatefulContext(IStatefulContext context, IStatefulContext parent) Parameters Type Name Description IStatefulContext context IStatefulContext parent Returns Type Description IStatefulContext Implements IStateManager IModule"
  },
  "api/Fluint.UI.Base.Button.html": {
    "href": "api/Fluint.UI.Base.Button.html",
    "title": "Class Button | Fluint",
    "keywords": "Class Button Inheritance System.Object Button Implements IButton IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Button : object, IButton, IModule, IGuiComponent Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OnClick Declaration public Action OnClick { get; set; } Property Value Type Description Action | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IButton IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.Container.html": {
    "href": "api/Fluint.UI.Base.Container.html",
    "title": "Class Container | Fluint",
    "keywords": "Class Container Inheritance System.Object Container Implements IContainer IModule IGuiContainer < IGuiComponent > IGuiComponent IDictionary < System.String , IGuiComponent > Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Container : object, IContainer, IModule, IGuiContainer<IGuiComponent>, IGuiComponent, IDictionary<string, IGuiComponent> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFocused Declaration public bool IsFocused { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public IGuiComponent this[string key] { get; set; } Parameters Type Name Description System.String key Property Value Type Description IGuiComponent | Improve this Doc View Source Keys Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < System.String > | Improve this Doc View Source Location Declaration public Vector2i Location { get; } Property Value Type Description Vector2i | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Resizable Declaration public bool Resizable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ScrollBar Declaration public bool ScrollBar { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Size Declaration public Vector2i Size { get; } Property Value Type Description Vector2i | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source Values Declaration public ICollection<IGuiComponent> Values { get; } Property Value Type Description ICollection < IGuiComponent > Methods | Improve this Doc View Source Add(KeyValuePair<String, IGuiComponent>) Declaration public void Add(KeyValuePair<string, IGuiComponent> item) Parameters Type Name Description KeyValuePair < System.String , IGuiComponent > item | Improve this Doc View Source Add(String, IGuiComponent) Declaration public void Add(string key, IGuiComponent value) Parameters Type Name Description System.String key IGuiComponent value | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<String, IGuiComponent>) Declaration public bool Contains(KeyValuePair<string, IGuiComponent> item) Parameters Type Name Description KeyValuePair < System.String , IGuiComponent > item Returns Type Description System.Boolean | Improve this Doc View Source ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(KeyValuePair<String, IGuiComponent>[], Int32) Declaration public void CopyTo(KeyValuePair<string, IGuiComponent>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair < System.String , IGuiComponent >[] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, IGuiComponent>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < System.String , IGuiComponent >> | Improve this Doc View Source Remove(KeyValuePair<String, IGuiComponent>) Declaration public bool Remove(KeyValuePair<string, IGuiComponent> item) Parameters Type Name Description KeyValuePair < System.String , IGuiComponent > item Returns Type Description System.Boolean | Improve this Doc View Source Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source Tick() Declaration public void Tick() | Improve this Doc View Source TryGetValue(String, out IGuiComponent) Declaration public bool TryGetValue(string key, out IGuiComponent value) Parameters Type Name Description System.String key IGuiComponent value Returns Type Description System.Boolean Implements IContainer IModule IGuiContainer<T> IGuiComponent IDictionary<, >"
  },
  "api/Fluint.UI.Base.Demo.html": {
    "href": "api/Fluint.UI.Base.Demo.html",
    "title": "Class Demo | Fluint",
    "keywords": "Class Demo Inheritance System.Object Demo Implements IDemo IGuiComponent IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Demo : object, IDemo, IGuiComponent, IModule Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IDemo IGuiComponent IModule"
  },
  "api/Fluint.UI.Base.FontManager.html": {
    "href": "api/Fluint.UI.Base.FontManager.html",
    "title": "Class FontManager | Fluint",
    "keywords": "Class FontManager Inheritance System.Object FontManager Implements IFontManager IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class FontManager : object, IFontManager, IModule Methods | Improve this Doc View Source LoadFont(String, Single) Declaration public Font LoadFont(string fontFileName, float fontSize = null) Parameters Type Name Description System.String fontFileName System.Single fontSize Returns Type Description Font Implements IFontManager IModule"
  },
  "api/Fluint.UI.Base.GuiInstanceManger.html": {
    "href": "api/Fluint.UI.Base.GuiInstanceManger.html",
    "title": "Class GuiInstanceManger | Fluint",
    "keywords": "Class GuiInstanceManger Inheritance System.Object GuiInstanceManger Implements IGuiInstanceManager IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class GuiInstanceManger : object, IGuiInstanceManager, IModule Properties | Improve this Doc View Source MainWindow Declaration public IWindow MainWindow { get; } Property Value Type Description IWindow Methods | Improve this Doc View Source Adopt(IWindow) Declaration public void Adopt(in IWindow window) Parameters Type Name Description IWindow window Implements IGuiInstanceManager IModule"
  },
  "api/Fluint.UI.Base.html": {
    "href": "api/Fluint.UI.Base.html",
    "title": "Namespace Fluint.UI.Base | Fluint",
    "keywords": "Namespace Fluint.UI.Base Classes Button Container Demo FontManager GuiInstanceManger Image ImageButton Listbox MainMenu MainWindow MainWindowTask MenuItem TextBox TextLabel TextureView Viewport"
  },
  "api/Fluint.UI.Base.Image.html": {
    "href": "api/Fluint.UI.Base.Image.html",
    "title": "Class Image | Fluint",
    "keywords": "Class Image Inheritance System.Object Image Implements IImage IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Image : object, IImage, IModule, IGuiComponent Constructors | Improve this Doc View Source Image(ILogger, IGraphicsFactory) Declaration public Image(ILogger logger, IGraphicsFactory graphicsFactory) Parameters Type Name Description ILogger logger IGraphicsFactory graphicsFactory Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path Declaration public string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration public Vector2i Size { get; set; } Property Value Type Description Vector2i Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IImage IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.ImageButton.html": {
    "href": "api/Fluint.UI.Base.ImageButton.html",
    "title": "Class ImageButton | Fluint",
    "keywords": "Class ImageButton Inheritance System.Object ImageButton Implements IImageButton IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class ImageButton : object, IImageButton, IModule, IGuiComponent Constructors | Improve this Doc View Source ImageButton(ILogger, IGraphicsFactory) Declaration public ImageButton(ILogger logger, IGraphicsFactory graphicsFactory) Parameters Type Name Description ILogger logger IGraphicsFactory graphicsFactory Properties | Improve this Doc View Source BackgroundColor Declaration public Color4 BackgroundColor { get; set; } Property Value Type Description Color4 | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OnClick Declaration public Action OnClick { get; set; } Property Value Type Description Action | Improve this Doc View Source Padding Declaration public float Padding { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Path Declaration public string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration public Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IImageButton IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.Listbox.html": {
    "href": "api/Fluint.UI.Base.Listbox.html",
    "title": "Class Listbox | Fluint",
    "keywords": "Class Listbox Inheritance System.Object Listbox Implements IListbox IGuiComponent IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Listbox : object, IListbox, IGuiComponent, IModule Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IListbox IGuiComponent IModule"
  },
  "api/Fluint.UI.Base.MainMenu.html": {
    "href": "api/Fluint.UI.Base.MainMenu.html",
    "title": "Class MainMenu | Fluint",
    "keywords": "Class MainMenu Inheritance System.Object MainMenu Implements IMainMenu IModule IGuiContainer < IMenuItem > IGuiComponent IDictionary < System.String , IMenuItem > Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class MainMenu : object, IMainMenu, IModule, IGuiContainer<IMenuItem>, IGuiComponent, IDictionary<string, IMenuItem> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public IMenuItem this[string key] { get; set; } Parameters Type Name Description System.String key Property Value Type Description IMenuItem | Improve this Doc View Source Keys Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < System.String > | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Values Declaration public ICollection<IMenuItem> Values { get; } Property Value Type Description ICollection < IMenuItem > Methods | Improve this Doc View Source Add(KeyValuePair<String, IMenuItem>) Declaration public void Add(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item | Improve this Doc View Source Add(String, IMenuItem) Declaration public void Add(string name, IMenuItem item) Parameters Type Name Description System.String name IMenuItem item | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<String, IMenuItem>) Declaration public bool Contains(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item Returns Type Description System.Boolean | Improve this Doc View Source ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(KeyValuePair<String, IMenuItem>[], Int32) Declaration public void CopyTo(KeyValuePair<string, IMenuItem>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair < System.String , IMenuItem >[] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, IMenuItem>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < System.String , IMenuItem >> | Improve this Doc View Source Remove(KeyValuePair<String, IMenuItem>) Declaration public bool Remove(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item Returns Type Description System.Boolean | Improve this Doc View Source Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source Tick() Declaration public void Tick() | Improve this Doc View Source TryGetValue(String, out IMenuItem) Declaration public bool TryGetValue(string key, out IMenuItem value) Parameters Type Name Description System.String key IMenuItem value Returns Type Description System.Boolean Implements IMainMenu IModule IGuiContainer<T> IGuiComponent IDictionary<, >"
  },
  "api/Fluint.UI.Base.MainWindow.html": {
    "href": "api/Fluint.UI.Base.MainWindow.html",
    "title": "Class MainWindow | Fluint",
    "keywords": "Class MainWindow Inheritance System.Object MainWindow Implements IWindow IStatefulContext IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class MainWindow : object, IWindow, IStatefulContext, IModule Constructors | Improve this Doc View Source MainWindow(ModulePacket, ILogger, IConfigurationManager) Declaration public MainWindow(ModulePacket packet, ILogger logger, IConfigurationManager configurationManager) Parameters Type Name Description ModulePacket packet ILogger logger IConfigurationManager configurationManager Properties | Improve this Doc View Source Controls Declaration public IDictionary<string, IGuiComponent> Controls { get; } Property Value Type Description IDictionary < System.String , IGuiComponent > | Improve this Doc View Source FrameTime Declaration public double FrameTime { get; } Property Value Type Description System.Double | Improve this Doc View Source InputManager Declaration public IInputManager InputManager { get; } Property Value Type Description IInputManager | Improve this Doc View Source Location Declaration public Vector2i Location { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source ScreenSize Declaration public Vector2i ScreenSize { get; } Property Value Type Description Vector2i | Improve this Doc View Source Size Declaration public Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source VSync Declaration public bool VSync { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Enqueue(Action) Declaration public void Enqueue(Action action) Parameters Type Name Description Action action | Improve this Doc View Source OnLoad() Declaration public void OnLoad() | Improve this Doc View Source OnMouseWheelMoved(Vector2) Declaration public void OnMouseWheelMoved(Vector2 offset) Parameters Type Name Description Vector2 offset | Improve this Doc View Source OnRender(Double) Declaration public void OnRender(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source OnResize(Int32, Int32) Declaration public void OnResize(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source OnStart() Declaration public void OnStart() | Improve this Doc View Source OnTextReceived(Int32, String) Declaration public void OnTextReceived(int unicode, string data) Parameters Type Name Description System.Int32 unicode System.String data | Improve this Doc View Source OnUpdate(Double) Declaration public void OnUpdate(double delay) Parameters Type Name Description System.Double delay | Improve this Doc View Source Puppet<TGhost>() Declaration public void Puppet<TGhost>() where TGhost : IPuppet Type Parameters Name Description TGhost | Improve this Doc View Source SetProvider(IWindowProvider) Declaration public void SetProvider(in IWindowProvider provider) Parameters Type Name Description IWindowProvider provider | Improve this Doc View Source SpawnControl<T>() Declaration public T SpawnControl<T>() where T : Control Returns Type Description T Type Parameters Name Description T Events | Improve this Doc View Source Load Declaration public event EventHandler Load Event Type Type Description EventHandler | Improve this Doc View Source Render Declaration public event EventHandler<RenderEvent> Render Event Type Type Description EventHandler < RenderEvent > | Improve this Doc View Source Resize Declaration public event EventHandler<ResizeEvent> Resize Event Type Type Description EventHandler < ResizeEvent > | Improve this Doc View Source Update Declaration public event EventHandler<RenderEvent> Update Event Type Type Description EventHandler < RenderEvent > Implements IWindow IStatefulContext IModule"
  },
  "api/Fluint.UI.Base.MainWindowTask.html": {
    "href": "api/Fluint.UI.Base.MainWindowTask.html",
    "title": "Class MainWindowTask | Fluint",
    "keywords": "Class MainWindowTask Inheritance System.Object MainWindowTask Implements ITask IModule Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class MainWindowTask : object, ITask, IModule Constructors | Improve this Doc View Source MainWindowTask(ModulePacket) Declaration public MainWindowTask(ModulePacket packet) Parameters Type Name Description ModulePacket packet Properties | Improve this Doc View Source Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Schedule Declaration public TaskSchedule Schedule { get; } Property Value Type Description TaskSchedule Methods | Improve this Doc View Source Start(TaskArgs) Declaration public void Start(TaskArgs args) Parameters Type Name Description TaskArgs args Implements ITask IModule"
  },
  "api/Fluint.UI.Base.MenuItem.html": {
    "href": "api/Fluint.UI.Base.MenuItem.html",
    "title": "Class MenuItem | Fluint",
    "keywords": "Class MenuItem Inheritance System.Object MenuItem Implements IMenuItem IModule IGuiContainer < IMenuItem > IGuiComponent IDictionary < System.String , IMenuItem > Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class MenuItem : object, IMenuItem, IModule, IGuiContainer<IMenuItem>, IGuiComponent, IDictionary<string, IMenuItem> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public IMenuItem this[string key] { get; set; } Parameters Type Name Description System.String key Property Value Type Description IMenuItem | Improve this Doc View Source Keys Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < System.String > | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OnClick Declaration public ModularAction OnClick { get; set; } Property Value Type Description ModularAction | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description System.String | Improve this Doc View Source Values Declaration public ICollection<IMenuItem> Values { get; } Property Value Type Description ICollection < IMenuItem > Methods | Improve this Doc View Source Add(KeyValuePair<String, IMenuItem>) Declaration public void Add(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item | Improve this Doc View Source Add(String, IMenuItem) Declaration public void Add(string name, IMenuItem item) Parameters Type Name Description System.String name IMenuItem item | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<String, IMenuItem>) Declaration public bool Contains(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item Returns Type Description System.Boolean | Improve this Doc View Source ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(KeyValuePair<String, IMenuItem>[], Int32) Declaration public void CopyTo(KeyValuePair<string, IMenuItem>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair < System.String , IMenuItem >[] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, IMenuItem>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < System.String , IMenuItem >> | Improve this Doc View Source Remove(KeyValuePair<String, IMenuItem>) Declaration public bool Remove(KeyValuePair<string, IMenuItem> item) Parameters Type Name Description KeyValuePair < System.String , IMenuItem > item Returns Type Description System.Boolean | Improve this Doc View Source Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source Tick() Declaration public void Tick() | Improve this Doc View Source TryGetValue(String, out IMenuItem) Declaration public bool TryGetValue(string key, out IMenuItem value) Parameters Type Name Description System.String key IMenuItem value Returns Type Description System.Boolean Implements IMenuItem IModule IGuiContainer<T> IGuiComponent IDictionary<, >"
  },
  "api/Fluint.UI.Base.TextBox.html": {
    "href": "api/Fluint.UI.Base.TextBox.html",
    "title": "Class TextBox | Fluint",
    "keywords": "Class TextBox Inheritance System.Object TextBox Implements ITextBox IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class TextBox : object, ITextBox, IModule, IGuiComponent Properties | Improve this Doc View Source IsMultiLine Declaration public bool IsMultiLine { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source SideText Declaration public string SideText { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements ITextBox IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.TextLabel.html": {
    "href": "api/Fluint.UI.Base.TextLabel.html",
    "title": "Class TextLabel | Fluint",
    "keywords": "Class TextLabel Inheritance System.Object TextLabel Implements ITextLabel IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class TextLabel : object, ITextLabel, IModule, IGuiComponent Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Text Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements ITextLabel IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.TextureView.html": {
    "href": "api/Fluint.UI.Base.TextureView.html",
    "title": "Class TextureView | Fluint",
    "keywords": "Class TextureView Inheritance System.Object TextureView Implements ITextureView IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class TextureView : object, ITextureView, IModule, IGuiComponent Constructors | Improve this Doc View Source TextureView(ILogger) Declaration public TextureView(ILogger logger) Parameters Type Name Description ILogger logger Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration public Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source Texture Declaration public ITexture Texture { get; set; } Property Value Type Description ITexture | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements ITextureView IModule IGuiComponent"
  },
  "api/Fluint.UI.Base.Viewport.html": {
    "href": "api/Fluint.UI.Base.Viewport.html",
    "title": "Class Viewport | Fluint",
    "keywords": "Class Viewport Inheritance System.Object Viewport Implements IViewport IModule IGuiComponent Namespace : Fluint.UI.Base Assembly : Fluint.UI.Base.dll Syntax public class Viewport : object, IViewport, IModule, IGuiComponent Constructors | Improve this Doc View Source Viewport() Declaration public Viewport() Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Size Declaration public Vector2i Size { get; set; } Property Value Type Description Vector2i | Improve this Doc View Source SwapChain Declaration public ISwapChain SwapChain { get; set; } Property Value Type Description ISwapChain Methods | Improve this Doc View Source Begin(String) Declaration public void Begin(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Tick() Declaration public void Tick() Implements IViewport IModule IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.Controls.AboutControl.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.AboutControl.html",
    "title": "Class AboutControl | Fluint",
    "keywords": "Class AboutControl Inheritance System.Object Control AboutControl Implements IGuiComponent Inherited Members Control.Children Control.Name Control.Begin(String, IWindow) Control.Begin(String) Control.Tick() Namespace : Fluint.UI.Layout.Base.Controls Assembly : Fluint.UI.Layout.Base.dll Syntax public class AboutControl : Control, IGuiComponent Constructors | Improve this Doc View Source AboutControl(ModulePacket) Declaration public AboutControl(ModulePacket packet) Parameters Type Name Description ModulePacket packet Implements IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.Controls.CameraControl.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.CameraControl.html",
    "title": "Class CameraControl | Fluint",
    "keywords": "Class CameraControl Inheritance System.Object Control CameraControl Implements IGuiComponent Inherited Members Control.Children Control.Name Control.Begin(String) Namespace : Fluint.UI.Layout.Base.Controls Assembly : Fluint.UI.Layout.Base.dll Syntax public class CameraControl : Control, IGuiComponent Constructors | Improve this Doc View Source CameraControl(ModulePacket) Declaration public CameraControl(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Begin(String, IWindow) Declaration public override void Begin(string name, IWindow window) Parameters Type Name Description System.String name IWindow window | Improve this Doc View Source GenerateCube(Vector3, Vector3, Color4) Declaration public List<PositionColorVertex> GenerateCube(Vector3 Verts, Vector3 Trans, Color4 color) Parameters Type Name Description Vector3 Verts Vector3 Trans Color4 color Returns Type Description List < PositionColorVertex > | Improve this Doc View Source Tick() Declaration public override void Tick() Overrides Control.Tick() Implements IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.Controls.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.html",
    "title": "Namespace Fluint.UI.Layout.Base.Controls | Fluint",
    "keywords": "Namespace Fluint.UI.Layout.Base.Controls Classes AboutControl CameraControl MetricsControl ToolboxControl UIDemoControl"
  },
  "api/Fluint.UI.Layout.Base.Controls.MetricsControl.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.MetricsControl.html",
    "title": "Class MetricsControl | Fluint",
    "keywords": "Class MetricsControl Inheritance System.Object Control MetricsControl Implements IGuiComponent Inherited Members Control.Children Control.Name Control.Begin(String) Namespace : Fluint.UI.Layout.Base.Controls Assembly : Fluint.UI.Layout.Base.dll Syntax public class MetricsControl : Control, IGuiComponent Constructors | Improve this Doc View Source MetricsControl(ModulePacket) Declaration public MetricsControl(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Begin(String, IWindow) Declaration public override void Begin(string name, IWindow parent) Parameters Type Name Description System.String name IWindow parent | Improve this Doc View Source Tick() Declaration public override void Tick() Overrides Control.Tick() Implements IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.Controls.ToolboxControl.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.ToolboxControl.html",
    "title": "Class ToolboxControl | Fluint",
    "keywords": "Class ToolboxControl Inheritance System.Object Control ToolboxControl Implements IGuiComponent Inherited Members Control.Children Control.Name Control.Begin(String, IWindow) Control.Begin(String) Namespace : Fluint.UI.Layout.Base.Controls Assembly : Fluint.UI.Layout.Base.dll Syntax public class ToolboxControl : Control, IGuiComponent Constructors | Improve this Doc View Source ToolboxControl(ModulePacket, ILocalizationManager, IConfigurationManager, IStateManager) Declaration public ToolboxControl(ModulePacket packet, ILocalizationManager localizationManager, IConfigurationManager configManager, IStateManager stateManager) Parameters Type Name Description ModulePacket packet ILocalizationManager localizationManager IConfigurationManager configManager IStateManager stateManager Methods | Improve this Doc View Source Tick() Declaration public override void Tick() Overrides Control.Tick() Implements IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.Controls.UIDemoControl.html": {
    "href": "api/Fluint.UI.Layout.Base.Controls.UIDemoControl.html",
    "title": "Class UIDemoControl | Fluint",
    "keywords": "Class UIDemoControl Inheritance System.Object Control UIDemoControl Implements IGuiComponent Inherited Members Control.Children Control.Name Control.Begin(String, IWindow) Control.Begin(String) Control.Tick() Namespace : Fluint.UI.Layout.Base.Controls Assembly : Fluint.UI.Layout.Base.dll Syntax public class UIDemoControl : Control, IGuiComponent Constructors | Improve this Doc View Source UIDemoControl(ModulePacket) Declaration public UIDemoControl(ModulePacket packet) Parameters Type Name Description ModulePacket packet Implements IGuiComponent"
  },
  "api/Fluint.UI.Layout.Base.html": {
    "href": "api/Fluint.UI.Layout.Base.html",
    "title": "Namespace Fluint.UI.Layout.Base | Fluint",
    "keywords": "Namespace Fluint.UI.Layout.Base Classes MainWindowLayout"
  },
  "api/Fluint.UI.Layout.Base.MainWindowLayout.html": {
    "href": "api/Fluint.UI.Layout.Base.MainWindowLayout.html",
    "title": "Class MainWindowLayout | Fluint",
    "keywords": "Class MainWindowLayout Inheritance System.Object MainWindowLayout Implements ILayout IModule Namespace : Fluint.UI.Layout.Base Assembly : Fluint.UI.Layout.Base.dll Syntax public class MainWindowLayout : object, ILayout, IModule Constructors | Improve this Doc View Source MainWindowLayout(ModulePacket) Declaration public MainWindowLayout(ModulePacket packet) Parameters Type Name Description ModulePacket packet Methods | Improve this Doc View Source Initialize(IWindow) Declaration public void Initialize(IWindow window) Parameters Type Name Description IWindow window Implements ILayout IModule"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "What is Fluint | Fluint",
    "keywords": "What is Fluint This project was born out of the frustrations of the cumbersome, non-intuitive, level design process that modern 3D tools provide. our mission with this project is to build a utility that's aimed at making the level design process as efficient and mindless as possible, we want to provide powerful yet fluent tools for the designer."
  },
  "index.html": {
    "href": "index.html",
    "title": "What is Fluint | Fluint",
    "keywords": "What is Fluint This project was born out of the frustrations of the cumbersome, non-intuitive, level design process that modern 3D tools provide. our mission with this project is to build a utility that's aimed at making the level design process as efficient and mindless as possible, we want to provide powerful yet fluent tools for the designer. The Fluint paradigm Fluint is created around the philosophy of superflexiblity. at it's core Fluint.Layer has an interface specification that specifies all the functionality of fluint, in it is also built a math library, some useful helper functions and a dynamic dependency injection container which loads all the classes, and modules at runtime, allowing for the superflexible nature of fluint. in fluint if you can see it, you can mod it. Project Status work on this project is very slow since am doing other stuff. and it's honestly not a top priority. coding on this is generally for fun. feel free to contirbute. Building Fluint has scripts to automatically build and setup the file structure, mainly fluint has two important build configurations Release With Modules Setup and Debug With Modules Setup these two build configuration will automatically copy the modules into the defualt (SlnDir)/output/base/ directory. included is also a shell script for building and running fluint in the output directory. Running Starting fluint for the first time will probably popup an issue about missing runtimes, these could be located in the /base/runtimes directory, you will need to copy the files contained depending on your system into the output and base folder. Modules you can access the Fluint.Layer documentation by clicking here . Currently these modules include : Fluint.Configuration.Base is a module that implements tools for storing, reading, and writing configurations, and themes in real-time. Fluint.Diagnostics.Base is a module that implements tools for logging, and debugging. Fluint.Input.Base is a module that implements mouse, and keyboard input into Fluint. Fluint.IO.Base is a module that implements file IO tools into Fluint, such as model importers, and exporters. Fluint.Localization.Base is a module that implements a localization/globalization system into fluint, with expandability in mind. Fluint.Networking.Base is a module that implements a server, and client networking features for cooperative work. Fluint.SDK.Base is a module that provides a toolset to make the debugging and module creation process for developers and third-parties easier. Fluint.Tasks.Base is a module for creating scheduled tasks that run at Fluint's runtime. Fluint.Graphics.Base is a module responsible for rendering in Fluint which is abstracted over the individual graphics APIs. Fluint.UI.Base contains an ImGui implementation of the UI library provided by Fluint. Fluint.UI.Layout.Base is the module which contains the base layout of the application. Fluint.Logic.Base is a module which contains separate pieces of logic which are reusable across the entirety of the project. Fluint.StateManagement.Base is a module which contains separate pieces of logic which are reusable across the entirety of the project. There are also engine modules, which house components for rendering in different APIs, and these include : Fluint.Engine.GL46 is a module that implements the OpenGL 4.6 graphics API into fluint. Fluint.Engine.GL33 [INCOMPLETE] is a module that implements the OpenGL 3.3 graphics API into fluint. Fluint.Engine.D3D11 [INCOMPLETE] is a module that implements the DirectX 11 graphics API into fluint. Fluint.Engine.D3D12 [INCOMPLETE] is a module that implements the DirectX 12 graphics API into fluint. Fluint.Engine.VK [INCOMPLETE] is a module that implements the Vulkan graphics API into fluint. Copyright (C) Yaman Alhalabi 2022"
  }
}